import{_ as p,r as c,o,c as i,b as n,d as a,e as l,a as t}from"./app-fdb0ca41.js";const u={},r=t('<h1 id="数据同步解决方案-canal" tabindex="-1"><a class="header-anchor" href="#数据同步解决方案-canal" aria-hidden="true">#</a> 数据同步解决方案-canal</h1><h2 id="_1-canal" tabindex="-1"><a class="header-anchor" href="#_1-canal" aria-hidden="true">#</a> 1. canal</h2><h3 id="_1-1-canal简介" tabindex="-1"><a class="header-anchor" href="#_1-1-canal简介" aria-hidden="true">#</a> 1.1 canal简介</h3><p>canal可以用来监控数据库数据的变化，从而获得新增数据，或者修改的数据。 canal是应阿里巴巴存在杭州和美国的双机房部署，存在跨机房同步的业务需求而提出的。 阿里系公司开始逐步的尝试基于数据库的日志解析，获取增量变更进行同步，由此衍生出了增量订阅&amp;消费的业务。</p>',4),d=["src"],k=t(`<p>原理相对比较简单：</p><ol><li>canal模拟mysql slave的交互协议，伪装自己为mysql slave，向mysql master发送dump协议</li><li>mysql master收到dump请求，开始推送binary log给slave(也就是canal)</li><li>canal解析binary log对象(原始为byte流)</li></ol><h3 id="_1-2-环境部署" tabindex="-1"><a class="header-anchor" href="#_1-2-环境部署" aria-hidden="true">#</a> 1.2 环境部署</h3><h4 id="_1-2-1-mysql开启binlog模式" tabindex="-1"><a class="header-anchor" href="#_1-2-1-mysql开启binlog模式" aria-hidden="true">#</a> 1.2.1 mysql开启binlog模式</h4><p>（1）查看当前mysql是否开启binlog模式。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 如果log_bin的值为OFF是未开启，为ON是已开启。</span>
SHOW VARIABLES LIKE <span class="token string">&#39;%log_bin%&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）修改/etc/my.cnf 需要开启binlog模式。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>binlog-format<span class="token operator">=</span>ROW <span class="token comment"># 更改参数</span>
<span class="token assign-left variable">server_id</span><span class="token operator">=</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>(3) 进入mysql</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql <span class="token parameter variable">-h</span> localhost <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（4）创建账号 用于测试使用 使用root账号创建用户并授予权限</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>create user canal@<span class="token string">&#39;%&#39;</span> IDENTIFIED by <span class="token string">&#39;canal&#39;</span><span class="token punctuation">;</span> GRANT SELECT, REPLICATION SLAVE, REPLICATION CLIENT,SUPER ON *.* TO <span class="token string">&#39;canal&#39;</span>@<span class="token string">&#39;%&#39;</span><span class="token punctuation">;</span> FLUSH PRIVILEGES<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_1-2-2-canal服务端安装配置" tabindex="-1"><a class="header-anchor" href="#_1-2-2-canal服务端安装配置" aria-hidden="true">#</a> 1.2.2 canal服务端安装配置</h4><p>（1）下载地址canal</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>https://github.com/alibaba/canal/releases/tag/canal-1.0.24
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,15),m=["src"],v=n("p",null,"（2）下载之后 上传到linux系统中，解压缩到指定的目录/usr/local/canal 解压缩之后的目录结构如下：",-1),b=["src"],h=t(`<p>（3）修改 exmaple下的实例配置</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vi</span> conf/example/instance.properties
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),g=["src"],_=t(`<p>（3）指定读取位置 进入mysql中执行下面语句查看binlog所在位置</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span>showmasterstatus<span class="token punctuation">;</span>
显示如下:
<span class="token operator">+</span><span class="token comment">------------------+----------+--------------+------------------+-------------------+</span>
<span class="token operator">|</span><span class="token keyword">File</span>      <span class="token operator">|</span>Position<span class="token operator">|</span>Binlog_Do_DB<span class="token operator">|</span>Binlog_Ignore_DB<span class="token operator">|</span>Executed_Gtid_Set<span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------------------+----------+--------------+------------------+-------------------+</span>
<span class="token operator">|</span>mysql<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000001</span><span class="token operator">|</span>   <span class="token number">120</span><span class="token operator">|</span>        <span class="token operator">|</span>                <span class="token operator">|</span>                 <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------------------+----------+--------------+------------------+-------------------+</span>
<span class="token number">1</span>rowinset<span class="token punctuation">(</span><span class="token number">0.00</span>sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果file中binlog文件不为 mysql-bin.000001 可以重置mysql</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> reset master<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看canal配置文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vim</span> /usr/local/canal/conf/example/meta.dat
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>找到对应的binlog信息更改一致即可</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token string">&quot;journalName&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;mysql-bin.000001&quot;</span>,<span class="token string">&quot;position&quot;</span>:120,&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意：如果不一致，可能导致以下错误</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">2019</span>-06-1719:35:20.918<span class="token punctuation">[</span>NewI/Oserverworker<span class="token comment">#1-2]ERROR</span>
c.a.otter.canal.server.netty.handler.SessionHandler-something goes wrong with channel:<span class="token punctuation">[</span>id:0x7f2e9be3,/192.168.200.56:52225<span class="token operator">=</span><span class="token operator">&gt;</span>/192.168.200.128:11111<span class="token punctuation">]</span>,
<span class="token assign-left variable">exception</span><span class="token operator">=</span>java.io.IOException:Connectionresetbypeer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（4）启动服务：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost canal<span class="token punctuation">]</span><span class="token comment"># ./bin/startup.sh</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（5）查看日志：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cat</span> /usr/local/canal/logs/canal/canal.log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,14),x=["src"],f=n("h3",{id:"_1-3-数据监控微服务",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-3-数据监控微服务","aria-hidden":"true"},"#"),a(" 1.3 数据监控微服务")],-1),q={href:"https://github.com/chenqian56131/spring-boot-starter-canal",target:"_blank",rel:"noopener noreferrer"},y=t(`<h4 id="_1-3-1-微服务搭建" tabindex="-1"><a class="header-anchor" href="#_1-3-1-微服务搭建" aria-hidden="true">#</a> 1.3.1 微服务搭建</h4><p>（1）创建工程模块xxx_canal，pom引入依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.xpand<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>starter-canal<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）创建包com.xxx.canal ，包下创建启动类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableCanalClient</span><span class="token comment">//声明当前的服务是canal的客户端</span>
publicclassCanalApplication<span class="token punctuation">{</span>
  <span class="token function">publicstaticvoidmain</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">CanalApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（3）添加配置文件application.properties</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">canal.client.instances.example.host</span><span class="token punctuation">=</span><span class="token value attr-value">192.168.200.128 canal.client.instances.example.port=11111</span>
<span class="token key attr-name">canal.client.instances.example.batchSize</span><span class="token punctuation">=</span><span class="token value attr-value">1000</span>
<span class="token key attr-name">spring.rabbitmq.host</span><span class="token punctuation">=</span><span class="token value attr-value">192.168.200.128</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（4）创建com.xxx.canal.listener包，包下创建类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@CanalEventListener</span><span class="token comment">//声明当前的类是canal的监听类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BusinessListener</span><span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Autowired</span>
  <span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
  *
  *@parameventType当前操作数据库的类型
  *@paramrowData当前操作数据库的数据
  */</span>
  <span class="token annotation punctuation">@ListenPoint</span><span class="token punctuation">(</span>schema<span class="token operator">=</span><span class="token string">&quot;xxx_business&quot;</span><span class="token punctuation">,</span>table<span class="token operator">=</span><span class="token string">&quot;tb_ad&quot;</span><span class="token punctuation">)</span>
  <span class="token function">publicvoidadUpdate</span><span class="token punctuation">(</span><span class="token class-name">CanalEntry<span class="token punctuation">.</span>EventTypeeventType</span><span class="token punctuation">,</span><span class="token class-name">CanalEntry<span class="token punctuation">.</span>RowData</span> rowData<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;广告表数据发生改变&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//获取改变之前的数据</span>
    rowData<span class="token punctuation">.</span><span class="token function">getBeforeColumnsList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;改变前的数据:&quot;</span><span class="token operator">+</span>c<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;::&quot;</span><span class="token operator">+</span>c<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//获取改变之后的数据</span>
    rowData<span class="token punctuation">.</span><span class="token function">getAfterColumnsList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;改变之后的数据:&quot;</span><span class="token operator">+</span>c<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;::&quot;</span><span class="token operator">+</span>c<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试：启动数据监控微服务，修改数据库的数据表，观察控制台输出。</p><h2 id="_2-首页广告缓存更新" tabindex="-1"><a class="header-anchor" href="#_2-首页广告缓存更新" aria-hidden="true">#</a> 2. 首页广告缓存更新</h2><h3 id="_2-1-需求分析" tabindex="-1"><a class="header-anchor" href="#_2-1-需求分析" aria-hidden="true">#</a> 2.1 需求分析</h3><p>当tb_ad（广告）表的数据发生变化时，更新redis中的广告数据。</p><h3 id="_2-2-实现思路" tabindex="-1"><a class="header-anchor" href="#_2-2-实现思路" aria-hidden="true">#</a> 2.2 实现思路</h3>`,14),w=["src"],E=n("h3",{id:"_2-3-代码实现",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-3-代码实现","aria-hidden":"true"},"#"),a(" 2.3 代码实现")],-1),S=n("h4",{id:"_2-3-1-发送消息到mq",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-3-1-发送消息到mq","aria-hidden":"true"},"#"),a(" 2.3.1 发送消息到mq")],-1),C=n("strong",null,"（1）在rabbitmq管理后台创建队列 ad_update_queue ，用于接收广告更新通知",-1),I=["src"],j=n("strong",null,"（2）引入rabbitmq起步依赖",-1),A=t(`<div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-rabbit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（3）配置文件application.properties 添加内容</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">spring.rabbitmq.host</span><span class="token operator">=</span><span class="token number">192.168</span>.200.128
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>（4）新增rabbitMQ配置类</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
publicclassRabbitMQConfig<span class="token punctuation">{</span>
  <span class="token comment">//定义队列名称</span>
  publicstaticfinalStringAD_UPDATE_QUEUE<span class="token operator">=</span><span class="token string">&quot;ad_update_queue&quot;</span><span class="token punctuation">;</span> 
  <span class="token comment">//声明队列</span>
  <span class="token annotation punctuation">@Bean</span>
  <span class="token function">publicQueuequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	    <span class="token function">returnnewQueue</span><span class="token punctuation">(</span><span class="token constant">AD_UPDATE_QUEUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（5）修改BusinessListener类</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@CanalEventListener</span><span class="token comment">//声明当前的类是canal的监听类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BusinessListener</span><span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Autowired</span>
  privateRabbitTemplaterabbitTemplate<span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
  *
  *@parameventType当前操作数据库的类型
  *@paramrowData当前操作数据库的数据
  */</span>
  <span class="token annotation punctuation">@ListenPoint</span><span class="token punctuation">(</span>schema<span class="token operator">=</span><span class="token string">&quot;xxx_business&quot;</span><span class="token punctuation">,</span>table<span class="token operator">=</span><span class="token string">&quot;tb_ad&quot;</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">adUpdate</span><span class="token punctuation">(</span><span class="token class-name">CanalEntry<span class="token punctuation">.</span>EventTypeeventType</span><span class="token punctuation">,</span><span class="token class-name">CanalEntry<span class="token punctuation">.</span>RowData</span> rowData<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;广告表数据发生改变&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">CanalEntry<span class="token punctuation">.</span>Columncolumn</span><span class="token operator">:</span>rowData<span class="token punctuation">.</span><span class="token function">getAfterColumnsList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;position&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>column<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;发送最新的数据到MQ:&quot;</span><span class="token operator">+</span>column<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        	<span class="token comment">//发送消息</span>
        	rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
				<span class="token class-name">RabbitMQConfig</span><span class="token punctuation">.</span><span class="token constant">AD_UPDATE_QUEUE</span><span class="token punctuation">,</span>column<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),B=n("strong",null,"（6）测试，运行数据监控微服务canal，新增、修改或删除tb_ad表数据，修改后观察控制台输出和rabbitmq管理界面中ad_update_queue是否接收到消息",-1),L=["src"],T=t(`<h4 id="_2-3-2-从mq中提取消息执行更新" tabindex="-1"><a class="header-anchor" href="#_2-3-2-从mq中提取消息执行更新" aria-hidden="true">#</a> 2.3.2 从mq中提取消息执行更新</h4><p><strong>（1）xxx_service_business工程pom.xml引入依赖</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（2）在spring节点下添加rabbitmq配置</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>host:192.168.200.128
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>（3）com.xxx.business包下创建listener包，包下创建类</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
publicclassAdListener<span class="token punctuation">{</span>
  <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues<span class="token operator">=</span><span class="token string">&quot;ad_update_queue&quot;</span><span class="token punctuation">)</span>
  <span class="token function">publicvoidreceiveMessage</span><span class="token punctuation">(</span><span class="token class-name">Stringmessage</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;接收到的消息为:&quot;</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//发起远程调用</span>
    <span class="token class-name">OkHttpClientokHttpClient</span><span class="token operator">=</span><span class="token function">newOkHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Stringurl</span><span class="token operator">=</span><span class="token string">&quot;http://192.168.200.128/ad_update?position=&quot;</span><span class="token operator">+</span>message<span class="token punctuation">;</span>
	<span class="token class-name">Requestrequest</span><span class="token operator">=</span><span class="token class-name"><span class="token namespace">newRequest<span class="token punctuation">.</span></span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Callcall</span><span class="token operator">=</span>okHttpClient<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
    call<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token function">newCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token annotation punctuation">@Override</span>
      <span class="token function">publicvoidonFailure</span><span class="token punctuation">(</span><span class="token class-name">Callcall</span><span class="token punctuation">,</span><span class="token class-name">IOExceptione</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//请求失败</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token punctuation">}</span>
	  
	  <span class="token annotation punctuation">@Override</span>
      <span class="token function">publicvoidonResponse</span><span class="token punctuation">(</span><span class="token class-name">Callcall</span><span class="token punctuation">,</span><span class="token class-name">Responseresponse</span><span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">{</span>
        <span class="token comment">//请求成功</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;请求成功:&quot;</span><span class="token operator">+</span>response<span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>** （4）测试，启动eureka和business微服务，观察控制台输出和数据同步效果。**</p><p>具体代码详见git仓库 xxx_canal 服务 与 xxx_service_business 服务</p><h2 id="_3-商品上架索引库导入数据" tabindex="-1"><a class="header-anchor" href="#_3-商品上架索引库导入数据" aria-hidden="true">#</a> 3. 商品上架索引库导入数据</h2><h3 id="_3-1-需求分析" tabindex="-1"><a class="header-anchor" href="#_3-1-需求分析" aria-hidden="true">#</a> 3.1 需求分析</h3><p>商品上架将商品的sku列表导入或更新索引库。</p><h3 id="_3-2-实现思路" tabindex="-1"><a class="header-anchor" href="#_3-2-实现思路" aria-hidden="true">#</a> 3.2 实现思路</h3><p>（1）在数据监控微服务中监控tb_spu表的数据，当tb_spu发生更改且is_marketable为1时，表示商品上架，将spu的id发送到rabbitmq。 （2）在rabbitmq管理后台创建商品上架交换器（fanout）。使用分列模式的交换器是考虑商品上架会有很多种逻辑需要处理，导入索引库只是其中一项，另外还有商品详细页静态化等操作。这样我们可以创建导入索引库的队列和商品详细页静态化队列并与商品上架交换器进行绑定。 （3）搜索微服务从rabbitmq的导入索引库的队列中提取spu的id，通过feign调用商品微服务得到sku的列表，并且通过调用elasticsearch的高级restAPI 将sku列表导入到索引库。</p>`,14),U=["src"],R=t('<h3 id="_3-3-代码实现" tabindex="-1"><a class="header-anchor" href="#_3-3-代码实现" aria-hidden="true">#</a> 3.3 代码实现</h3><h4 id="_3-3-1-发送消息到mq" tabindex="-1"><a class="header-anchor" href="#_3-3-1-发送消息到mq" aria-hidden="true">#</a> 3.3.1 发送消息到mq</h4><p>（1）在rabbitmq后台创建交换器goods_up_exchange（类型为fanout），创建队列search_add_queue绑定交换器goods_up_exchange,更新rabbitmq配置类 （2）数据监控微服务新增SpuListener</p><h4 id="_3-3-2-索引库环境准备" tabindex="-1"><a class="header-anchor" href="#_3-3-2-索引库环境准备" aria-hidden="true">#</a> 3.3.2 索引库环境准备</h4><p>搭设虚拟机elasticsearch镜像</p><h4 id="_3-3-3-创建索引结构" tabindex="-1"><a class="header-anchor" href="#_3-3-3-创建索引结构" aria-hidden="true">#</a> 3.3.3 创建索引结构</h4><p>新建xxx_service_search_api模块,并添加索引库实体类</p><p>(1) 添加依赖</p><h4 id="_3-3-4-搜索微服务搭建" tabindex="-1"><a class="header-anchor" href="#_3-3-4-搜索微服务搭建" aria-hidden="true">#</a> 3.3.4 搜索微服务搭建</h4><p>（1）创建xxx_service_search模块，pom.xml引入依赖 （2）xxx_service_search的application.yml （3）创建com.xxx包，包下创建SearchApplication (4) 将rabbitmq配置类放入该模块下</p><h4 id="_3-3-5-商品服务查询商品信息" tabindex="-1"><a class="header-anchor" href="#_3-3-5-商品服务查询商品信息" aria-hidden="true">#</a> 3.3.5 商品服务查询商品信息</h4><p>(1) SkuController新增方法 (2) xxx_service_goods_api新增common依赖 (3) 定义skuFegin接口</p><h4 id="_3-3-6-搜索微服务批量导入数据逻辑" tabindex="-1"><a class="header-anchor" href="#_3-3-6-搜索微服务批量导入数据逻辑" aria-hidden="true">#</a> 3.3.6 搜索微服务批量导入数据逻辑</h4><p>(1) 创建 com.xxx.search.dao包,并新增ESManagerMapper接口 (2) 创建 com.xxx.search.service包，包下创建接口EsManagerService (3) 创建com.xxx.search.controller.定义ESManagerController</p><h4 id="_3-3-7-接收mq消息执行导入" tabindex="-1"><a class="header-anchor" href="#_3-3-7-接收mq消息执行导入" aria-hidden="true">#</a> 3.3.7 接收mq消息执行导入</h4><h4 id="_3-3-8-测试" tabindex="-1"><a class="header-anchor" href="#_3-3-8-测试" aria-hidden="true">#</a> 3.3.8 测试</h4><p>（1）启动环境 eureka 、elasticsearch 、canal服务端、canal数据监控微服务、rabbitmq （2）启动商品微服务、搜索微服务 （3）修改tb_spu某记录的is_marketable值为1，观察控制台输出，启动kibana查询记录是否导入成功</p><h2 id="_4-商品下架索引库删除数据" tabindex="-1"><a class="header-anchor" href="#_4-商品下架索引库删除数据" aria-hidden="true">#</a> 4. 商品下架索引库删除数据</h2><h3 id="_4-1-需求分析" tabindex="-1"><a class="header-anchor" href="#_4-1-需求分析" aria-hidden="true">#</a> 4.1 需求分析</h3><p>商品下架后将商品从索引库中移除。</p><h3 id="_4-2-实现思路" tabindex="-1"><a class="header-anchor" href="#_4-2-实现思路" aria-hidden="true">#</a> 4.2 实现思路</h3>',21),D=["src"],O=t('<h3 id="_4-3-代码实现" tabindex="-1"><a class="header-anchor" href="#_4-3-代码实现" aria-hidden="true">#</a> 4.3 代码实现</h3><h4 id="_4-3-1-创建交换器与队列" tabindex="-1"><a class="header-anchor" href="#_4-3-1-创建交换器与队列" aria-hidden="true">#</a> 4.3.1 创建交换器与队列</h4><p>完成商品下架交换器的创建，队列的创建与绑定，将spuId发送消息到mq 商品下架交换器：goods_down_exchange 队列名称： search_delete_queue 绑定 search_delete_queue到goods_down_exchange</p><h4 id="_4-3-2-canal监听下架" tabindex="-1"><a class="header-anchor" href="#_4-3-2-canal监听下架" aria-hidden="true">#</a> 4.3.2 canal监听下架</h4><p>修改xxx_canal的SpuListener的spuUpdate方法，添加以下代码</p><h4 id="_4-3-3-根据spuid删除索引数据" tabindex="-1"><a class="header-anchor" href="#_4-3-3-根据spuid删除索引数据" aria-hidden="true">#</a> 4.3.3 根据spuId删除索引数据</h4><p>编写业务逻辑，实现根据spuId删除索引库数据的方法。 （1）ESManagerService新增方法定义 （2）ESManagerServiceImpl实现方法</p><h4 id="_4-3-4-接收mq消息-执行索引库删除" tabindex="-1"><a class="header-anchor" href="#_4-3-4-接收mq消息-执行索引库删除" aria-hidden="true">#</a> 4.3.4 接收mq消息，执行索引库删除</h4><p>从rabbitmq中提取消息，调动根据spuId删除索引库数据的方法 xxx_service_search新增监听类 具体代码详见git仓库 xxx_canal 服务 与 xxx_service_business 服务</p>',9);function N(s,P){const e=c("ExternalLinkIcon");return o(),i("div",null,[r,n("img",{src:s.$withBase("/javaUtils/27.png"),alt:"foo"},null,8,d),k,a(),n("img",{src:s.$withBase("/javaUtils/28.png"),alt:"foo"},null,8,m),v,n("img",{src:s.$withBase("/javaUtils/29.png"),alt:"foo"},null,8,b),h,a(),n("img",{src:s.$withBase("/javaUtils/30.png"),alt:"foo"},null,8,g),a(" 修改如图所示的几个参数。 "),_,a(),n("img",{src:s.$withBase("/javaUtils/31.png"),alt:"foo"},null,8,x),a(" 这样就表示启动成功了。 "),f,n("p",null,[a("当用户执行数据库的操作的时候，binlog 日志会被canal捕获到，并解析出数据。我们就可以将解析出 来的数据进行相应的逻辑处理。 我们这里使用的一个开源的项目，它实现了springboot与canal的集成。比原生的canal更加优雅。 "),n("a",q,[a("https://github.com/chenqian56131/spring-boot-starter-canal"),l(e)]),a(" 使用前需要将starter-canal安装到本地仓库。 我们可以参照它提供的canal-test，进行代码实现。")]),y,n("p",null,[a("（1）修改数据监控微服务，监控tb_ad表，当发生增删改操作时，提取position值（广告位置key），发送到rabbitmq （2）从rabbitmq中提取消息，通过OkHttpClient调用ad_update来实现对广告缓存数据的更新。 "),n("img",{src:s.$withBase("/javaUtils/32.png"),alt:"foo"},null,8,w)]),E,S,n("p",null,[C,n("img",{src:s.$withBase("/javaUtils/33.png"),alt:"foo"},null,8,I),j]),A,n("p",null,[B,n("img",{src:s.$withBase("/javaUtils/34.png"),alt:"foo"},null,8,L)]),T,n("img",{src:s.$withBase("/javaUtils/35.png"),alt:"foo"},null,8,U),R,n("p",null,[a("与商品上架的实现思路非常类似。 （1）在数据监控微服务中监控tb_spu表的数据，当tb_spu发生更改且is_marketable为0时，表示商品 下架，将spu的id发送到rabbitmq。 （2）在rabbitmq管理后台创建商品下架交换器（fanout）。使用分列模式的交换器是考虑商品下架会 有很多种逻辑需要处理，索引库删除数据只是其中一项，另外还有删除商品详细页等操作。 （3）搜索微服务从rabbitmq的的队列中提取spu的id，通过调用elasticsearch的高级restAPI 将相关的 sku列表从索引库删除。 "),n("img",{src:s.$withBase("/javaUtils/36.png"),alt:"foo"},null,8,D)]),O])}const V=p(u,[["render",N],["__file","数据同步解决方案-canal.html.vue"]]);export{V as default};
