import{_ as o,M as c,p as l,q as i,R as n,t as s,N as p,a1 as e}from"./framework-5866ffd3.js";const r={},u=n("h1",{id:"用户认证",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#用户认证","aria-hidden":"true"},"#"),s(" 用户认证")],-1),d=n("h2",{id:"_1-用户认证分析",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-用户认证分析","aria-hidden":"true"},"#"),s(" 1 用户认证分析")],-1),k=["src"],v=e('<h3 id="_1-1-单点登录" tabindex="-1"><a class="header-anchor" href="#_1-1-单点登录" aria-hidden="true">#</a> 1.1 单点登录</h3><p>一处登录，处处登录 用户访问的项目中，至少有3个微服务需要识别用户身份，如果用户访问每个微服务都登录一次就太麻烦了，为了提高用户的体验，我们需要实现让用户在一个系统中登录，其他任意受信任的系统都可以访问，这个功能就叫单点登录。 单点登录（Single Sign On），简称为 SSO，是目前比较流行的企业业务整合的解决方案之一。 SSO的定义是在多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统</p><h3 id="_1-2-第三方账号登录" tabindex="-1"><a class="header-anchor" href="#_1-2-第三方账号登录" aria-hidden="true">#</a> 1.2 第三方账号登录</h3><p>随着国内及国外巨头们的平台开放战略以及移动互联网的发展，第三方登录已经不是一个陌生的产品设计概念了。 所谓的第三方登录，是说基于用户在第三方平台上已有的账号和密码来快速完成己方应用的登录或者注册的功能。而这里的第三方平台，一般是已经拥有大量用户的平台，国外的比如Facebook，Twitter等，国内的比如微博、微信、QQ等。</p><h2 id="_2-认证解决方案" tabindex="-1"><a class="header-anchor" href="#_2-认证解决方案" aria-hidden="true">#</a> 2 认证解决方案</h2><h3 id="_2-1-单点登录技术方案" tabindex="-1"><a class="header-anchor" href="#_2-1-单点登录技术方案" aria-hidden="true">#</a> 2.1 单点登录技术方案</h3>',6),m=["src"],h=n("h3",{id:"_2-2-第三方登录技术方案",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-2-第三方登录技术方案","aria-hidden":"true"},"#"),s(" 2.2 第三方登录技术方案")],-1),b=n("h4",{id:"_2-2-1-oauth2认证流程",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-2-1-oauth2认证流程","aria-hidden":"true"},"#"),s(" 2.2.1 Oauth2认证流程")],-1),g={href:"https://baike.baidu.com/item/oAuth/7153134?fr=aladdin",target:"_blank",rel:"noopener noreferrer"},_={href:"https://tools.ietf.org/ht",target:"_blank",rel:"noopener noreferrer"},f=["src"],y=n("ol",null,[n("li",null,"客户端请求第三方授权"),n("li",null,"资源拥有者同意给客户端授权"),n("li",null,"客户端获取到授权码，请求认证服务器申请令牌 此过程用户看不到，客户端应用程序请求认证服务器，请求携带授权码。"),n("li",null,"认证服务器向客户端响应令牌认证服务器验证了客户端请求的授权码，如果合法则给客户端颁发令牌，令牌是客户端访问资源的通行证。此交互过程用户看不到，当客户端拿到令牌后，用户在网站看到已经登录成功。"),n("li",null,"客户端请求资源服务器的资源客户端携带令牌访问资源服务器的资源。网站携带令牌请求访问微信服务器获取用户的基本信息。"),n("li",null,"资源服务器返回受保护资源资源服务器校验令牌的合法性，如果合法则向用户响应资源信息内容。注意：资源服务器和认证服务器可以是一个服务也可以分开的服务，如果是分开的服务资源服务器通常要请求认证服务器来校验令牌的合法性。")],-1),w={href:"https://tools.ietf.org/html/rfc6749",target:"_blank",rel:"noopener noreferrer"},S=["src"],j=e('<ul><li>Oauth2包括以下角色：</li></ul><ol><li>客户端 本身不存储资源，需要通过资源拥有者的授权去请求资源服务器的资源，比如：Android客户端、Web客户端（浏览器端）、微信客户端等。</li><li>资源拥有者 通常为用户，也可以是应用程序，即该资源的拥有者。</li><li>授权服务器（也称认证服务器） 用来对资源拥有的身份进行认证、对访问资源进行授权。客户端要想访问资源需要通过认证服务器由资源拥有者授 权后方可访问。</li><li>资源服务器 存储资源的服务器，比如，畅购用户管理服务器存储了畅购的用户信息，微信的资源服务存储了微信的用户信息等。客户端最终访问资源服务器获取资源信息。</li></ol><h4 id="oauth2在项目的应用" tabindex="-1"><a class="header-anchor" href="#oauth2在项目的应用" aria-hidden="true">#</a> Oauth2在项目的应用</h4><p>Oauth2是一个标准的开放的授权协议，应用程序可以根据自己的要求去使用Oauth2，项目中使用Oauth2可以实现实现如下功能：</p><ol><li>本系统访问第三方系统的资源</li><li>外部系统访问本系统的资源</li><li>本系统前端（客户端） 访问本系统后端微服务的资源</li><li>本系统微服务之间访问资源，例如：微服务A访问微服务B的资源，B访问A的资源</li></ol><h3 id="_2-3-spring-security-oauth2认证解决方案" tabindex="-1"><a class="header-anchor" href="#_2-3-spring-security-oauth2认证解决方案" aria-hidden="true">#</a> 2.3 Spring security Oauth2认证解决方案</h3>',6),A=["src"],x=e(`<h2 id="_3-jwt" tabindex="-1"><a class="header-anchor" href="#_3-jwt" aria-hidden="true">#</a> 3 Jwt</h2><p>JSON Web Token（JWT）是一个开放的行业标准（RFC 7519），它定义了一种简介的、自包含的协议格式，用于 在通信双方传递json对象，传递的信息经过数字签名可以被验证和信任。JWT可以使用HMAC算法或使用RSA的公 钥/私钥对来签名，防止被篡改。</p><p>JWT令牌的优点： 1、jwt基于json，非常方便解析。 2、可以在令牌中自定义丰富的内容，易扩展。 3、通过非对称加密算法及数字签名技术，JWT防止篡改，安全性高。 4、资源服务使用JWT可不依赖认证服务即可完成授权。</p><p>缺点： 1、JWT令牌较长，占存储空间比较大。</p><h3 id="_3-1-生成私钥公钥" tabindex="-1"><a class="header-anchor" href="#_3-1-生成私钥公钥" aria-hidden="true">#</a> 3.1 生成私钥公钥</h3><p>JWT令牌生成采用非对称加密算法</p><ol><li>生成密钥证书 下边命令生成密钥证书，采用RSA 算法每个证书包含公钥和私钥</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>keytool <span class="token parameter variable">-genkeypair</span> <span class="token parameter variable">-alias</span> changgou <span class="token parameter variable">-keyalg</span> RSA <span class="token parameter variable">-keypass</span> changgou <span class="token parameter variable">-keystore</span> changgou.jks <span class="token parameter variable">-storepass</span> changgou
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Keytool 是一个java提供的证书管理工具</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>-alias：密钥的别名 
-keyalg：使用的hash算法 
-keypass：密钥的访问密码 
-keystore：密钥库文件名，changgou.jks保存了生成的证书 -storepass：密钥库的访问密码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查询证书信息：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>keytool <span class="token parameter variable">-list</span> <span class="token parameter variable">-keystore</span> changgou.jks
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,12),T={start:"2"},O={href:"http://slproweb.com/products/Win32OpenSSL.html",target:"_blank",rel:"noopener noreferrer"},B=e(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>keytool <span class="token parameter variable">-list</span> <span class="token parameter variable">-rfc</span> <span class="token parameter variable">--keystore</span> changgou.jks <span class="token operator">|</span> openssl x509 <span class="token parameter variable">-inform</span> pem <span class="token parameter variable">-pubkey</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),I=["src"],J=e(`<h3 id="_3-2-基于私钥生成jwt令牌" tabindex="-1"><a class="header-anchor" href="#_3-2-基于私钥生成jwt令牌" aria-hidden="true">#</a> 3.2 基于私钥生成jwt令牌</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CreateJwtTest</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/***
  *创建令牌测试
  */</span>
  <span class="token annotation punctuation">@Test</span>
  <span class="token function">publicvoidtestCreateToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//基于私钥生成jwt</span>
    <span class="token comment">//1. 创建一个秘钥工厂</span>
    <span class="token comment">//1: 指定私钥的位置</span>
    <span class="token class-name">ClassPathResource</span> classPathResource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">&quot;changgou.jks&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//2: 指定秘钥库的密码</span>
    <span class="token class-name">String</span> keyPass <span class="token operator">=</span> <span class="token string">&quot;changgou&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">KeyStoreKeyFactory</span> keyStoreKeyFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KeyStoreKeyFactory</span><span class="token punctuation">(</span>classPathResource<span class="token punctuation">,</span>keyPass<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//2. 基于工厂获取私钥</span>
    <span class="token class-name">String</span> alias <span class="token operator">=</span> <span class="token string">&quot;changgou&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token string">&quot;changgou&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">KeyPair</span> keyPair <span class="token operator">=</span> keyStoreKeyFactory<span class="token punctuation">.</span><span class="token function">getKeyPair</span><span class="token punctuation">(</span>alias<span class="token punctuation">,</span> password<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//将当前的私钥转换为rsa私钥</span>
    <span class="token class-name">RSAPrivateKey</span> rsaPrivateKey <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RSAPrivateKey</span><span class="token punctuation">)</span> keyPair<span class="token punctuation">.</span><span class="token function">getPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//3.生成jwt</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;company&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;ahana&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;address&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;beijing&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Jwt</span> jwt <span class="token operator">=</span> <span class="token class-name">JwtHelper</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RsaSigner</span><span class="token punctuation">(</span>rsaPrivateKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 获取jwt令牌</span>
    <span class="token class-name">String</span> jwtEncoded <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jwtEncoded<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-基于公钥解析jwt令牌" tabindex="-1"><a class="header-anchor" href="#_3-4-基于公钥解析jwt令牌" aria-hidden="true">#</a> 3.4 基于公钥解析jwt令牌</h3><p>上面创建令牌后，我们可以对JWT令牌进行解析，这里解析需要用到公钥，我们可以将之前生成的公钥public.key拷贝出来用字符串变量token存储，然后通过公钥解密。 在xxx-user-oauth创建测试类com.xxx.token.ParseJwtTest实现解析校验令牌数据，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ParseJwtTest</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/***
  *校验令牌
  */</span>
  <span class="token annotation punctuation">@Test</span>
  <span class="token function">publicvoidtestParseToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//令牌</span>
    <span class="token class-name">String</span> token <span class="token operator">=</span>
&quot;eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9<span class="token punctuation">.</span>eyJyb2xlcyI6IlJPTEVfVklQLFJPTEVfVVNFUiIsIm <span class="token number">5</span>hbWUiOiJpdGhlaW1hIiwiaWQiOiIxIn0<span class="token punctuation">.</span>IR9Qu9ZqYZ2gU2qgAziyT38UhEeL4Oi69ko<span class="token operator">-</span>dzC_P9<span class="token operator">-</span>
<span class="token class-name">Vjz40hwZDqxl8wZ</span><span class="token operator">-</span><span class="token class-name">W2WAw1eWGIHV1EYDjg0</span><span class="token operator">-</span>eilogJZ5UikyWw1bewXCpvlM<span class="token operator">-</span>
<span class="token class-name">ZRtYQQqHFTlfDiVcFetyTayaskwa</span><span class="token operator">-</span>x_BVS4pTWAskiaIKbKR4KcME2E5o1rEek<span class="token operator">-</span>
<span class="token number">3</span>YPkqAiZ6WP1UOmpaCJDaaFSdninqG0gzSCuGvLuG40x0Ngpfk7mPOecsIi5cbJElpdYUsCr9oXc53RO yfvYpHjzV7c2D5eIZu3leUPXRvvVAPJFEcSBiisxUSEeiGpmuQhaFZd1g<span class="token operator">-</span>
yJ1WQrixFvehMeLX2XU6W1nlL5ARTpQf_Jjiw&quot;<span class="token punctuation">;</span>

    <span class="token comment">//公钥</span>
    <span class="token class-name">String</span> publickey <span class="token operator">=</span> &quot;<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token constant">BEGINPUBLICKEY</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
<span class="token class-name">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvFsEiaLvij9C1Mz</span><span class="token operator">+</span>oyAmt47whAaRkRu<span class="token operator">/</span><span class="token number">8</span>keP <span class="token class-name">M</span><span class="token operator">+</span><span class="token class-name">X8760UGU0RMwGti6Z9y3LQ0RvK6I0brXmbGB</span><span class="token operator">/</span><span class="token class-name">RsN38PVnhcP8ZfxGUH26kX0RK</span><span class="token operator">+</span>tlrxcrG<span class="token operator">+</span><span class="token class-name">HkPYOH4</span> <span class="token class-name">XPAL8Q1lu1n9x3tLcIPxq8ZZtuIyKYEmoLKyMsvTviG5flTpDprT25unWgE4md1kthRWXOnfWHATVY7Y</span> <span class="token operator">/</span>r4obiOL1mS5bEa<span class="token operator">/</span>iNKotQNnvIAKtjBM4RlIDWMa6dmz<span class="token operator">+</span>lHtLtqDD2LF1qwoiSIHI75LQZ<span class="token operator">/</span><span class="token class-name">CNYaHCfZS</span> xtOydpNKq8eb1<span class="token operator">/</span><span class="token class-name">PGiLNolD4La2zf0</span><span class="token operator">/</span><span class="token number">1d</span>lcr5mkesV570NxRmU1tFm8Zd3MZlZmyv9QIDAQAB<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token constant">END</span> <span class="token constant">PUBLICKEY</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>&quot;<span class="token punctuation">;</span>

    <span class="token comment">//校验Jwt</span>
    <span class="token class-name">Jwt</span> jwt <span class="token operator">=</span> <span class="token class-name">JwtHelper</span><span class="token punctuation">.</span><span class="token function">decodeAndVerify</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span><span class="token function">newRsaVerifier</span><span class="token punctuation">(</span>publickey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//获取Jwt原始内容</span>
    <span class="token class-name">String</span> claims <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">getClaims</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//jwt令牌</span>
    <span class="token class-name">String</span> encoded <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>encoded<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-oauth2-0入门" tabindex="-1"><a class="header-anchor" href="#_4-oauth2-0入门" aria-hidden="true">#</a> 4. Oauth2.0入门</h2><h3 id="_1-oauth2授权模式介绍" tabindex="-1"><a class="header-anchor" href="#_1-oauth2授权模式介绍" aria-hidden="true">#</a> 1. Oauth2授权模式介绍</h3><ul><li>Oauth2有以下授权模式： <ol><li>授权码模式（Authorization Code）</li><li>隐式授权模式（Implicit）</li><li>密码模式（Resource Owner Password Credentials）</li><li>客户端模式（Client Credentials）</li></ol></li></ul><p>其中授权码模式和密码模式应用较多，本小节介绍授权码模式。</p><h4 id="_4-1-1-授权码模式" tabindex="-1"><a class="header-anchor" href="#_4-1-1-授权码模式" aria-hidden="true">#</a> 4.1.1 授权码模式</h4><h4 id="_4-2-1-1-授权码授权流程" tabindex="-1"><a class="header-anchor" href="#_4-2-1-1-授权码授权流程" aria-hidden="true">#</a> 4.2.1.1 授权码授权流程</h4><p>1、客户端请求第三方授权 2、用户同意给客户端授权 3、客户端获取到授权码，请求认证服务器申请 令牌 4、认证服务器向客户端响应令牌 5、客户端请求资源服务器的资源，资源服务校验令牌合法性，完成授权 6、资源服务器返回受保护资源</p><p>请求认证服务获取授权码：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Get请求： http://localhost:9200/oauth/authorize?client_id<span class="token operator">=</span>changgou<span class="token operator">&amp;</span><span class="token assign-left variable">response_type</span><span class="token operator">=</span>code<span class="token operator">&amp;</span><span class="token assign-left variable">scop</span><span class="token operator">=</span>app<span class="token operator">&amp;</span><span class="token assign-left variable">redirect_uri</span><span class="token operator">=</span>http://localhost
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数列表如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>client_id：客户端id，和授权配置类中设置的客户端id一致。
response_type：授权码模式固定为code
scop：客户端范围，和授权配置类中设置的scop一致。
redirect_uri：跳转uri，当授权码申请成功后会跳转到此地址，并在后边带上code参数（授权码）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),q=n("p",null,"首先跳转到登录页面：",-1),C=["src"],P=["src"],U=["src"],R=e(`<h4 id="_4-2-1-2-申请令牌" tabindex="-1"><a class="header-anchor" href="#_4-2-1-2-申请令牌" aria-hidden="true">#</a> 4.2.1.2 申请令牌</h4><p>拿到授权码后，申请令牌。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Post请求： http://localhost:9200/oauth/token

grant_type：授权类型，填写authorization_code，表示授权码模式
code：授权码，就是刚刚获取的授权码，注意：授权码只使用一次就无效了，需要重新申请。redirect_uri：申请授权码时的跳转url，一定和申请授权码时用的redirect_uri一致。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此链接需要使用 http Basic认证。 什么是http Basic认证？ http协议定义的一种认证方式，将客户端id和客户端密码按照“客户端ID:客户端密码”的格式拼接，并用base64编码，放在header中请求服务端，一个例子： Authorization：Basic WGNXZWJBcHA6WGNXZWJBcHA=WGNXZWJBcHA6WGNXZWJBcHA= 是用户名:密码的base64编码。认证失败服务端返回 401 Unauthorized。 以上测试使用postman完成： http basic认证：</p>`,4),W=["src"],E=n("p",null,"客户端Id和客户端密码会匹配数据库oauth_client_details表中的客户端id及客户端密码。",-1),K=["src"],H=e(`<p>返回信如下:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>access_token：访问令牌，携带此令牌访问资源
token_type：有MACToken与BearerToken两种类型，两种的校验算法不同，RFC6750建议Oauth2采用BearerToken（http://www.rfcreader.com/<span class="token comment">#rfc6750）。</span>
refresh_token：刷新令牌，使用此令牌可以延长访问令牌的过期时间。
expires_in：过期时间，单位为秒。
scope：范围，与定义的客户端范围一致。  
jti：当前token的唯一标识
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-2-1-3-令牌校验" tabindex="-1"><a class="header-anchor" href="#_4-2-1-3-令牌校验" aria-hidden="true">#</a> 4.2.1.3 令牌校验</h4><p>Spring Security Oauth2提供校验令牌的端点，如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Get: http://localhost:9200/oauth/check_token?token<span class="token operator">=</span> <span class="token punctuation">[</span>access_token<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数： token：令牌</p>`,6),L=["src"],N=["src"],G=["src"],V=e(`<h4 id="_4-2-1-4-刷新令牌" tabindex="-1"><a class="header-anchor" href="#_4-2-1-4-刷新令牌" aria-hidden="true">#</a> 4.2.1.4 刷新令牌</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>测试如下： Post：http://localhost:9200/oauth/token
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),Z=["src"],z=n("h3",{id:"_4-3-资源服务授权",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-3-资源服务授权","aria-hidden":"true"},"#"),s(" 4.3 资源服务授权")],-1),F=["src"],M=e(`<p>上图的业务流程如下:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">1</span>、客户端请求认证服务申请令牌
<span class="token number">2</span>、认证服务生成令牌认证服务采用非对称加密算法，使用私钥生成令牌。
<span class="token number">3</span>、客户端携带令牌访问资源服务客户端在Http header 中添加： Authorization：Bearer令牌。 <span class="token number">4</span>、资源服务请求认证服务校验令牌的有效性资源服务接收到令牌，使用公钥校验令牌的合法性。
<span class="token number">5</span>、令牌有效，资源服务向客户端响应资源信息
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-3-1-用户服务对接oauth2" tabindex="-1"><a class="header-anchor" href="#_4-3-1-用户服务对接oauth2" aria-hidden="true">#</a> 4.3.1 用户服务对接Oauth2</h4><p>基本上所有微服务都是资源服务，这里我们在课程管理服务上配置授权控制，当配置了授权控制后如要 访问服务则必须提供令牌。</p><ol><li>配置公钥，将 xxx_user_auth 项目中public.key复制到xxx_service_user中</li><li>添加依赖</li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-oauth2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>配置每个系统的Http请求路径安全控制策略以及读取公钥信息识别令牌，如下：</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableResourceServer</span>
<span class="token annotation punctuation">@EnableGlobalMethodSecurity</span><span class="token punctuation">(</span>prePostEnabled<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">,</span>securedEnabled<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment">//激活方法上的PreAuthorize注解</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResourceServerConfig</span> <span class="token keyword">extends</span> <span class="token class-name">ResourceServerConfigurerAdapter</span> <span class="token punctuation">{</span>
    <span class="token comment">//公钥</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">PUBLIC_KEY</span> <span class="token operator">=</span> <span class="token string">&quot;public.key&quot;</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/***
       *定义JwtTokenStore
       *@paramjwtAccessTokenConverter
       *@return
       */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">TokenStore</span> <span class="token function">tokenStore</span><span class="token punctuation">(</span><span class="token class-name">JwtAccessTokenConverter</span> jwtAccessTokenConverter<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JwtTokenStore</span><span class="token punctuation">(</span>jwtAccessTokenConverter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/***
       *定义JJwtAccessTokenConverter
       *@return
       */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">JwtAccessTokenConverter</span> <span class="token function">jwtAccessTokenConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">JwtAccessTokenConverter</span> converter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JwtAccessTokenConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        converter<span class="token punctuation">.</span><span class="token function">setVerifierKey</span><span class="token punctuation">(</span><span class="token function">getPubKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> converter<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
   *获取非对称加密公钥Key
   *@return公钥Key
   */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getPubKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Resource</span> resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token constant">PUBLIC_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">InputStreamReader</span> inputStreamReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>inputStreamReader<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> br<span class="token punctuation">.</span><span class="token function">lines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ioe<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                ioe<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/***
       *Http安全配置，对每个到达系统的http请求链接进行校验
       *@paramhttp
       *@throwsException
      */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">//所有请求必须认证通过</span>
        http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">//下边的路径放行</span>
                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">&quot;/user/add&quot;</span><span class="token punctuation">)</span> <span class="token comment">//配置地址放行</span>
                <span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//其他地址需要认证授权</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-3-2-资源服务授权测试" tabindex="-1"><a class="header-anchor" href="#_4-3-2-资源服务授权测试" aria-hidden="true">#</a> 4.3.2 资源服务授权测试</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>不携带令牌访问 http://localhost:9005/user
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>由于该地址受访问限制，需要授权，所以出现如下错误：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span> <span class="token property">&quot;error&quot;</span><span class="token operator">:</span> <span class="token string">&quot;unauthorized&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;error_description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Full authentication is required to access this resource&quot;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>携带令牌访问 http://localhost:9005/user
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,13),Q=["src"],Y=n("h2",{id:"认证开发",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#认证开发","aria-hidden":"true"},"#"),s(" 认证开发")],-1);function $(a,D){const t=c("ExternalLinkIcon");return l(),i("div",null,[u,d,n("img",{src:a.$withBase("/javaUtils/37.png"),alt:"foo"},null,8,k),s(" 上面流程图描述了用户要操作的各个微服务，用户查看个人信息需要访问客户微服务，下单需要访问订单微服务，秒杀抢购商品需要访问秒杀微服务。每个服务都需要认证用户的身份，身份认证成功后，需要识别用户的角色然后授权访问对应的功能。 "),v,n("img",{src:a.$withBase("/javaUtils/38.png"),alt:"foo"},null,8,m),s(" Java中有很多用户认证的框架都可以实现单点登录： ```bash 1、Apache Shiro. 2、CAS 3、Spring security ``` "),h,b,n("p",null,[s("第三方认证技术方案最主要是解决认证协议的通用标准问题，因为要实现跨系统认证，各系统之间要遵循一定的 接口协议。 OAUTH协议为用户资源的授权提供了一个安全的、开放而又简易的标准。同时，任何第三方都可以使用OAUTH认 证服务，任何服务提供商都可以实现自身的OAUTH认证服务，因而OAUTH是开放的。业界提供了OAUTH的多种实现如PHP、JavaScript，Java，Ruby等各种语言开发包，大大节约了程序员的时间，因而OAUTH是简易的。互联网很多服务如Open API，很多大公司如Google，Yahoo，Microsoft等都提供了OAUTH认证服务，这些都足以说明OAUTH标准逐渐成为开放资源授权的标准。 Oauth协议目前发展到2.0版本，1.0版本过于复杂，2.0版本已得到广泛应用。 参考："),n("a",g,[s("https://baike.baidu.com/item/oAuth/7153134?fr=aladdin"),p(t)]),s(" Oauth协议："),n("a",_,[s("https://tools.ietf.org/ht"),p(t)]),s("ml/rfc6749 下边分析一个Oauth2认证的例子，网站使用微信认证的过程： "),n("img",{src:a.$withBase("/javaUtils/39.png"),alt:"foo"},null,8,f)]),y,n("p",null,[s("Oauth2.0认证流程如下：引自Oauth2.0协议rfc6749 "),n("a",w,[s("https://tools.ietf.org/html/rfc6749"),p(t)]),n("img",{src:a.$withBase("/javaUtils/40.png"),alt:"foo"},null,8,S)]),j,n("p",null,[s("采用 Spring security + Oauth2+JWT完成用户认证及用户授权，Spring security 是一个强大的和高度可定制的身份验证和访问控制框架，Spring security 框架集成了Oauth2协议，下图是项目认证架 "),n("img",{src:a.$withBase("/javaUtils/41.png"),alt:"foo"},null,8,A)]),x,n("ol",T,[n("li",null,[s("导出公钥 openssl是一个加解密工具包，这里使用openssl来导出公钥信息。 安装 openssl："),n("a",O,[s("http://slproweb.com/products/Win32OpenSSL.html"),p(t)]),s(" 安装资料目录下的Win64OpenSSL-1_1_1b.exe 配置openssl的path环境变量 cmd进入changgou.jks文件所在目录执行如下命令：")])]),B,s(),n("img",{src:a.$withBase("/javaUtils/42.png"),alt:"foo"},null,8,I),s(" 将上边的公钥拷贝到文本public.key文件中，合并为一行,可以将它放到需要实现授权认证的工程中。 "),J,n("ul",null,[n("li",null,[q,n("img",{src:a.$withBase("/javaUtils/43.png"),alt:"foo"},null,8,C),s(" 输入账号和密码，点击Login。 Spring Security接收到请求会调用UserDetailsService接口的 loadUserByUsername方法查询用户正确的密码。 当前导入的基础工程中客户端ID为changgou，秘钥 也为changgou即可认证通过。 ")]),n("li",null,[n("p",null,[s("接下来进入授权页面： "),n("img",{src:a.$withBase("/javaUtils/44.png"),alt:"foo"},null,8,P),s(" 点击Authorize,接下来返回授权码： 认证服务携带授权码跳转redirect_uri,code=k45iLY就是返回的授权码, 每一个授权码只能使用一次 "),n("img",{src:a.$withBase("/javaUtils/45.png"),alt:"foo"},null,8,U)])])]),R,n("img",{src:a.$withBase("/javaUtils/46.png"),alt:"foo"},null,8,W),E,n("p",null,[s("点击发送： 申请令牌成功 "),n("img",{src:a.$withBase("/javaUtils/47.png"),alt:"foo"},null,8,K)]),H,n("p",null,[s("使用postman测试如下: "),n("img",{src:a.$withBase("/javaUtils/48.png"),alt:"foo"},null,8,L)]),n("p",null,[s("如果令牌校验失败，会出现如下结果： "),n("img",{src:a.$withBase("/javaUtils/49.png"),alt:"foo"},null,8,N)]),n("p",null,[s("如果令牌过期了，会如下如下结果： "),n("img",{src:a.$withBase("/javaUtils/50.png"),alt:"foo"},null,8,G)]),V,n("p",null,[s("参数： grant_type： 固定为 refresh_token refresh_token：刷新令牌（注意不是access_token，而是refresh_token） "),n("img",{src:a.$withBase("/javaUtils/51.png"),alt:"foo"},null,8,Z)]),z,n("p",null,[s("资源服务拥有要访问的受保护资源，客户端携带令牌访问资源服务，如果令牌合法则可成功访问资源服 务中的资源，如下图: "),n("img",{src:a.$withBase("/javaUtils/53.png"),alt:"foo"},null,8,F)]),M,n("p",null,[s("在http header中添加 Authorization： Bearer 令牌 "),n("img",{src:a.$withBase("/javaUtils/52.png"),alt:"foo"},null,8,Q),s(" 当输入错误的令牌也无法正常访问资源。")]),Y])}const nn=o(r,[["render",$],["__file","用户认证.html.vue"]]);export{nn as default};
