import{_ as e,o as p,c as o,b as n,a,d as t}from"./app-fdb0ca41.js";const c={},i=a(`<h1 id="shiro" tabindex="-1"><a class="header-anchor" href="#shiro" aria-hidden="true">#</a> Shiro</h1><h2 id="_0-shiro在springboot工程的应用" tabindex="-1"><a class="header-anchor" href="#_0-shiro在springboot工程的应用" aria-hidden="true">#</a> 0 Shiro在SpringBoot工程的应用</h2><p>Apache Shiro是一个功能强大、灵活的，开源的安全框架。它可以干净利落地处理身份验证、授权、企业会话管理</p><p>和加密。越来越多的企业使用Shiro作为项目的安全框架，保证项目的平稳运行。</p><h2 id="_1-整合shiro" tabindex="-1"><a class="header-anchor" href="#_1-整合shiro" aria-hidden="true">#</a> 1 整合Shiro</h2><h3 id="_1-1-spring和shiro的整合依赖" tabindex="-1"><a class="header-anchor" href="#_1-1-spring和shiro的整合依赖" aria-hidden="true">#</a> 1.1 spring和shiro的整合依赖</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>shiro-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>shiro-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-修改登录方法" tabindex="-1"><a class="header-anchor" href="#_1-2-修改登录方法" aria-hidden="true">#</a> 1.2 修改登录方法</h3><p>认证：身份认证/登录，验证用户是不是拥有相应的身份。基于shiro的认证，shiro需要采集到用户登录数据使用</p><p>subject的login方法进入realm完成认证工作。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">&quot;/login&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span><span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span><span class="token punctuation">{</span>
            <span class="token class-name">Subject</span> subject <span class="token operator">=</span> <span class="token class-name">SecurityUtils</span><span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">UsernamePasswordToken</span> uptoken <span class="token operator">=</span> <span class="token keyword">new</span>
<span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>
            subject<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>uptoken<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token string">&quot;登录成功&quot;</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&quot;用户名或密码错误&quot;</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-自定义realm" tabindex="-1"><a class="header-anchor" href="#_1-3-自定义realm" aria-hidden="true">#</a> 1.3 自定义realm</h3><p>Realm域：Shiro从Realm获取安全数据（如用户、角色、权限），就是说SecurityManager要验证用户身份，那么</p><p>它需要从Realm获取相应的用户进行比较以确定用户身份是否合法；也需要从Realm得到用户相应的角色/权限进行</p><p>验证用户是否能进行操作；可以把Realm看成DataSource，即安全数据源</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomRealm</span> <span class="token keyword">extends</span> <span class="token class-name">AuthorizingRealm</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;customRealm&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 构造授权方法
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">AuthorizationInfo</span> <span class="token function">doGetAuthorizationInfo</span><span class="token punctuation">(</span><span class="token class-name">PrincipalCollection</span>
principalCollection<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token comment">//1.获取认证的用户数据</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span>principalCollection<span class="token punctuation">.</span><span class="token function">getPrimaryPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2.构造认证数据</span>
        <span class="token class-name">SimpleAuthorizationInfo</span> info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthorizationInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Role</span><span class="token punctuation">&gt;</span></span> roles <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getRoles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Role</span> role <span class="token operator">:</span> roles<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//添加角色信息</span>
            info<span class="token punctuation">.</span><span class="token function">addRole</span><span class="token punctuation">(</span>role<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Permission</span> permission<span class="token operator">:</span>role<span class="token punctuation">.</span><span class="token function">getPermissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//添加权限信息</span>
                info<span class="token punctuation">.</span><span class="token function">addStringPermission</span><span class="token punctuation">(</span>permission<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">}</span>
       <span class="token punctuation">}</span>
        <span class="token keyword">return</span> info<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/**
     * 认证方法
     */</span>
    <span class="token keyword">protected</span> <span class="token class-name">AuthenticationInfo</span> <span class="token function">doGetAuthenticationInfo</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationToken</span>
authenticationToken<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AuthenticationException</span> <span class="token punctuation">{</span>
        <span class="token comment">//1.获取登录的upToken</span>
        <span class="token class-name">UsernamePasswordToken</span> upToken <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">)</span>authenticationToken<span class="token punctuation">;</span>
        <span class="token comment">//2.获取输入的用户名密码</span>
        <span class="token class-name">String</span> username <span class="token operator">=</span> upToken<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>upToken<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//3.数据库查询用户</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">findByName</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//4.用户存在并且密码匹配存储用户数据</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>user <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span>
<span class="token class-name">SimpleAuthenticationInfo</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">//返回null会抛出异常，表明用户不存在或密码不匹配</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-shiro的配置" tabindex="-1"><a class="header-anchor" href="#_2-shiro的配置" aria-hidden="true">#</a> 2 Shiro的配置</h2><p>SecurityManager 是 Shiro 架构的心脏，用于协调内部的多个组件完成全部认证授权的过程。例如通过调用realm完成认证与登录。使用基于springboot的配置方式完成SecurityManager，Realm的装配</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShiroConfiguration</span> <span class="token punctuation">{</span>
    <span class="token comment">//配置自定义的Realm</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">CustomRealm</span> <span class="token function">getRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CustomRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

 <span class="token comment">//配置安全管理器</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">SecurityManager</span> <span class="token function">securityManager</span><span class="token punctuation">(</span><span class="token class-name">CustomRealm</span> realm<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//使用默认的安全管理器</span>
        <span class="token class-name">DefaultWebSecurityManager</span> securityManager <span class="token operator">=</span> <span class="token keyword">new</span>
<span class="token class-name">DefaultWebSecurityManager</span><span class="token punctuation">(</span>realm<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//将自定义的realm交给安全管理器统一调度管理</span>
        securityManager<span class="token punctuation">.</span><span class="token function">setRealm</span><span class="token punctuation">(</span>realm<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> securityManager<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
    <span class="token comment">//Filter工厂，设置对应的过滤条件和跳转条件</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ShiroFilterFactoryBean</span> <span class="token function">shirFilter</span><span class="token punctuation">(</span><span class="token class-name">SecurityManager</span> securityManager<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//1.创建shiro过滤器工厂</span>
        <span class="token class-name">ShiroFilterFactoryBean</span> filterFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShiroFilterFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2.设置安全管理器</span>
        filterFactory<span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>securityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//3.通用配置（配置登录页面，登录成功页面，验证未成功页面）</span>
        filterFactory<span class="token punctuation">.</span><span class="token function">setLoginUrl</span><span class="token punctuation">(</span><span class="token string">&quot;/autherror?code=1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置登录页面</span>
        filterFactory<span class="token punctuation">.</span><span class="token function">setUnauthorizedUrl</span><span class="token punctuation">(</span><span class="token string">&quot;/autherror?code=2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//授权失败跳转页面</span>
        <span class="token comment">//4.配置过滤器集合</span>
        <span class="token doc-comment comment">/**
         * key ：访问连接
         *     支持通配符的形式
         * value：过滤器类型
         *     shiro常用过滤器
         *         anno   ：匿名访问（表明此链接所有人可以访问）
         *         authc   ：认证后访问（表明此链接需登录认证成功之后可以访问）
         */</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> filterMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 配置不会被拦截的链接 顺序判断</span>
        filterMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;/user/home&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;anon&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        filterMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;/user/**&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;authc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//5.设置过滤器</span>
        filterFactory<span class="token punctuation">.</span><span class="token function">setFilterChainDefinitionMap</span><span class="token punctuation">(</span>filterMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> filterFactory<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
    <span class="token comment">//配置shiro注解支持</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">AuthorizationAttributeSourceAdvisor</span>
<span class="token function">authorizationAttributeSourceAdvisor</span><span class="token punctuation">(</span><span class="token class-name">SecurityManager</span> securityManager<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">AuthorizationAttributeSourceAdvisor</span> advisor <span class="token operator">=</span> <span class="token keyword">new</span>
<span class="token class-name">AuthorizationAttributeSourceAdvisor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        advisor<span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>securityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> advisor<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-shiro中的过滤器" tabindex="-1"><a class="header-anchor" href="#_3-shiro中的过滤器" aria-hidden="true">#</a> 3 shiro中的过滤器</h2><table><thead><tr><th style="text-align:left;">Filter</th><th style="text-align:left;">解释</th></tr></thead><tbody><tr><td style="text-align:left;">anon</td><td style="text-align:left;">无参，开放权限，可以理解为匿名用户或游客</td></tr><tr><td style="text-align:left;">authc</td><td style="text-align:left;">无参，需要认证</td></tr><tr><td style="text-align:left;">logout</td><td style="text-align:left;">无参，注销，执行后会直接跳转到 shiroFilterFactoryBean.setLoginUrl(); 设置的url</td></tr><tr><td style="text-align:left;">authcBasic</td><td style="text-align:left;">无参，表示 httpBasic 认证</td></tr><tr><td style="text-align:left;">user</td><td style="text-align:left;">无参，表示必须存在用户，当登入操作时不做检查</td></tr><tr><td style="text-align:left;">ssl</td><td style="text-align:left;">无参，表示安全的URL请求，协议为 https</td></tr><tr><td style="text-align:left;">perms[user]</td><td style="text-align:left;">参数可写多个，表示需要某个或某些权限才能通过，多个参数时写 perms[“user,</td></tr><tr><td style="text-align:left;"><br>admin”]，当有多个参数时必须每个参数都通过才算通过</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">roles[admin]</td><td style="text-align:left;">参数可写多个，表示是某个或某些角色才能通过，多个参数时写 roles[“admin，user”]，</td></tr><tr><td style="text-align:left;"><br>当有多个参数时必须每个参数都通过才算通过</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">rest[user]</td><td style="text-align:left;">根据请求的方法，相当于 perms[user:method]，其中 method 为 post，get，delete 等</td></tr><tr><td style="text-align:left;">port[8081]</td><td style="text-align:left;">当请求的URL端口不是8081时，跳转到当前访问主机HOST的8081端口</td></tr></tbody></table><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>注意：anon, authc, authcBasic, user 是第一组认证过滤器，perms, port, rest, roles, ssl 是第二组授权过滤</p><p>器，要通过授权过滤器，就先要完成登陆认证操作（即先要完成认证才能前去寻找授权) 才能走第二组授权器</p><p>（例如访问需要 roles 权限的 url，如果还没有登陆的话，会直接跳转到</p><p>shiroFilterFactoryBean.setLoginUrl(); 设置的 url ）</p></div><h2 id="_4-授权" tabindex="-1"><a class="header-anchor" href="#_4-授权" aria-hidden="true">#</a> 4 授权</h2><p>授权：即权限验证，验证某个已认证的用户是否拥有某个权限；即判断用户是否能做事情</p><p>shiro支持基于过滤器的授权方式也支持注解的授权方式</p><h3 id="_4-1-基于配置的授权" tabindex="-1"><a class="header-anchor" href="#_4-1-基于配置的授权" aria-hidden="true">#</a> 4.1 基于配置的授权</h3><p>在shiro中可以使用过滤器的方式配置目标地址的请求权限</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//配置请求连接过滤器配置</span>
        <span class="token comment">//匿名访问（所有人员可以使用）</span>
        filterMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;/user/home&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;anon&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//具有指定权限访问</span>
        filterMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;/user/find&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;perms[user-find]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//认证之后访问（登录之后可以访问）</span>
        filterMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;/user/**&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;authc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//具有指定角色可以访问</span>
        filterMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;/user/**&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;roles[系统管理员]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>::: info</p><p>基于配置的方式进行授权，一旦操作用户不具备操作权限，目标地址不会被执行。会跳转到指定的url连接地</p><p>址。所以需要在连接地址中更加友好的处理未授权的信息提示</p><p>:::</p><h3 id="_4-2-基于注解的授权" tabindex="-1"><a class="header-anchor" href="#_4-2-基于注解的授权" aria-hidden="true">#</a> 4.2 基于注解的授权</h3><ol><li><p>RequiresPermissions</p><p>配置到方法上，表明执行此方法必须具有指定的权限</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//查询</span>
    <span class="token annotation punctuation">@RequiresPermissions</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;user-find&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;查询用户成功&quot;</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>RequiresRoles</p><p>配置到方法上，表明执行此方法必须具有指定的角色</p><p>::: info</p><p>基于注解的配置方式进行授权，一旦操作用户不具备操作权限，目标方法不会被执行，而且会抛出</p><p>AuthorizationException 异常。所以需要做好统一异常处理完成未授权处理</p><p>:::</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token comment">//查询</span>
    <span class="token annotation punctuation">@RequiresRoles</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;系统管理员&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;查询用户成功&quot;</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="_4-2-shiro中的会话管理" tabindex="-1"><a class="header-anchor" href="#_4-2-shiro中的会话管理" aria-hidden="true">#</a> 4.2 Shiro中的会话管理</h3><p>在shiro里所有的用户的会话信息都会由Shiro来进行控制，shiro提供的会话可以用于JavaSE/JavaEE环境，不依赖于任何底层容器，可以独立使用，是完整的会话模块。通过Shiro的会话管理器（SessionManager）进行统一的会话管理</p><h4 id="_4-2-1-什么是shiro的会话管理" tabindex="-1"><a class="header-anchor" href="#_4-2-1-什么是shiro的会话管理" aria-hidden="true">#</a> 4.2.1 什么是shiro的会话管理</h4><p>SessionManager（会话管理器）：管理所有Subject的session包括创建、维护、删除、失效、验证等工作。SessionManager是顶层组件，由SecurityManager管理</p><p>shiro提供了三个默认实现：</p><ol><li><p>DefaultSessionManager：用于JavaSE环境</p></li><li><p>ServletContainerSessionManager：用于Web环境，直接使用servlet容器的会话。</p></li><li><p>DefaultWebSessionManager：用于web环境，自己维护会话（自己维护着会话，直接废弃了Servlet容器的会话管理）。</p></li></ol><p>在web程序中，通过shiro的Subject.login()方法登录成功后，用户的认证信息实际上是保存在HttpSession中的通过如下代码验证。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token comment">//登录成功后，打印所有session内容</span>
 <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">&quot;/show&quot;</span><span class="token punctuation">)</span>
 <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取session中所有的键值</span>
        <span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> enumeration <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getAttributeNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 遍历enumeration中的</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>enumeration<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 获取session键值</span>
            <span class="token class-name">String</span> name <span class="token operator">=</span> enumeration<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 根据键值取session中的值</span>
            <span class="token class-name">Object</span> value <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 打印结果</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;B&gt;&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;&lt;/B&gt;=&quot;</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token string">&quot;&lt;br&gt;/n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token string">&quot;查看session成功&quot;</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-2-2-应用场景分析" tabindex="-1"><a class="header-anchor" href="#_4-2-2-应用场景分析" aria-hidden="true">#</a> 4.2.2 应用场景分析</h4><p>在分布式系统或者微服务架构下，都是通过统一的认证中心进行用户认证。如果使用默认会话管理，用户信息只会保存到一台服务器上。那么其他服务就需要进行会话的同步。</p>`,44),l=["src"],u=n("p",null,"会话管理器可以指定sessionId的生成以及获取方式。",-1),r=n("p",null,"通过sessionDao完成模拟session存入，取出等操作",-1),d=n("h4",{id:"_4-2-3-shiro结合redis的统一会话管理",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-2-3-shiro结合redis的统一会话管理","aria-hidden":"true"},"#"),t(" 4.2.3 Shiro结合redis的统一会话管理")],-1),k=n("h5",{id:"_4-2-3-1-步骤分析",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-2-3-1-步骤分析","aria-hidden":"true"},"#"),t(" 4.2.3.1 步骤分析")],-1),v=["src"],m=a(`<h5 id="_4-2-3-2-构建环境" tabindex="-1"><a class="header-anchor" href="#_4-2-3-2-构建环境" aria-hidden="true">#</a> 4.2.3.2 构建环境</h5><ol><li>使用开源组件Shiro-Redis可以方便的构建shiro与redis的整合工程。<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>
        <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>crazycake<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
        <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>shiro<span class="token operator">-</span>redis<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
        <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">3.0</span><span class="token number">.0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>在springboot配置文件中添加redis配置<div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>    <span class="token key atrule">redis</span><span class="token punctuation">:</span>
      host<span class="token punctuation">:</span> 127.0.0.1
      port<span class="token punctuation">:</span> <span class="token number">6379</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h5 id="_4-2-3-3-自定义shiro会话管理器" tabindex="-1"><a class="header-anchor" href="#_4-2-3-3-自定义shiro会话管理器" aria-hidden="true">#</a> 4.2.3.3 自定义shiro会话管理器</h5><pre><code>\`\`\`java
    /**
    * 自定义的sessionManager
    */
    public class CustomSessionManager extends DefaultWebSessionManager {
       /**
        * 头信息中具有sessionid
        *     请求头：Authorization： sessionid
        *
        * 指定sessionId的获取方式
        */
     protected Serializable getSessionId(ServletRequest request, ServletResponse
    response) {
           //获取请求头Authorization中的数据
           String id = WebUtils.toHttp(request).getHeader(&quot;Authorization&quot;);
           if(StringUtils.isEmpty(id)) {
               //如果没有携带，生成新的sessionId
               return super.getSessionId(request,response);
          }else{
               //返回sessionId；
               request.setAttribute(ShiroHttpServletRequest.REFERENCED_SESSION_ID_SOURCE, 
    &quot;header&quot;);
               request.setAttribute(ShiroHttpServletRequest.REFERENCED_SESSION_ID, id);
              
    request.setAttribute(ShiroHttpServletRequest.REFERENCED_SESSION_ID_IS_VALID, 
    Boolean.TRUE);
               return id;
          }
      }
    }
\`\`\`
</code></pre><h5 id="_4-2-3-4-配置shiro基于redis的会话管理" tabindex="-1"><a class="header-anchor" href="#_4-2-3-4-配置shiro基于redis的会话管理" aria-hidden="true">#</a> 4.2.3.4 配置Shiro基于redis的会话管理</h5><p>在Shiro配置类 cn.xxx.shiro.ShiroConfiguration 配置</p><ol><li>配置shiro的RedisManager，通过shiro-redis包提供的RedisManager统一对redis操作<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${spring.redis.host}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> host<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${spring.redis.port}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> port<span class="token punctuation">;</span>
    <span class="token comment">//配置shiro redisManager</span>
    <span class="token keyword">public</span> <span class="token class-name">RedisManager</span> <span class="token function">redisManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token class-name">RedisManager</span> redisManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       redisManager<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>
       redisManager<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">return</span> redisManager<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>Shiro内部有自己的本地缓存机制，为了更加统一方便管理，全部替换redis实现<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token comment">//配置Shiro的缓存管理器</span>
    <span class="token comment">//使用redis实现</span>
    <span class="token keyword">public</span> <span class="token class-name">RedisCacheManager</span> <span class="token function">cacheManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">RedisCacheManager</span> redisCacheManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisCacheManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    redisCacheManager<span class="token punctuation">.</span><span class="token function">setRedisManager</span><span class="token punctuation">(</span><span class="token function">redisManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> redisCacheManager<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>配置SessionDao，使用shiro-redis实现的基于redis的sessionDao<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
    * RedisSessionDAO shiro sessionDao层的实现 通过redis
    * 使用的是shiro-redis开源插件
    */</span>
    <span class="token keyword">public</span> <span class="token class-name">RedisSessionDAO</span> <span class="token function">redisSessionDAO</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token class-name">RedisSessionDAO</span> redisSessionDAO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisSessionDAO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       redisSessionDAO<span class="token punctuation">.</span><span class="token function">setRedisManager</span><span class="token punctuation">(</span><span class="token function">redisManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">return</span> redisSessionDAO<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>配置会话管理器，指定sessionDao的依赖关系<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
    * 3.会话管理器
    */</span>
   <span class="token keyword">public</span> <span class="token class-name">DefaultWebSessionManager</span> <span class="token function">sessionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token class-name">CustomSessionManager</span> sessionManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomSessionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       sessionManager<span class="token punctuation">.</span><span class="token function">setSessionDAO</span><span class="token punctuation">(</span><span class="token function">redisSessionDAO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">return</span> sessionManager<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>统一交给SecurityManager管理<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token comment">//配置安全管理器</span>
   <span class="token annotation punctuation">@Bean</span>
   <span class="token keyword">public</span> <span class="token class-name">SecurityManager</span> <span class="token function">securityManager</span><span class="token punctuation">(</span><span class="token class-name">CustomRealm</span> realm<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token comment">//使用默认的安全管理器</span>
       <span class="token class-name">DefaultWebSecurityManager</span> securityManager <span class="token operator">=</span> <span class="token keyword">new</span>
<span class="token class-name">DefaultWebSecurityManager</span><span class="token punctuation">(</span>realm<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token comment">// 自定义session管理 使用redis</span>
       securityManager<span class="token punctuation">.</span><span class="token function">setSessionManager</span><span class="token punctuation">(</span><span class="token function">sessionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token comment">// 自定义缓存实现 使用redis</span>
       securityManager<span class="token punctuation">.</span><span class="token function">setCacheManager</span><span class="token punctuation">(</span><span class="token function">cacheManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token comment">//将自定义的realm交给安全管理器统一调度管理</span>
       securityManager<span class="token punctuation">.</span><span class="token function">setRealm</span><span class="token punctuation">(</span>realm<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">return</span> securityManager<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,7);function g(s,b){return p(),o("div",null,[i,n("img",{src:s.$withBase("/shiro/1.png"),alt:"foo"},null,8,l),u,r,d,k,n("img",{src:s.$withBase("/shiro/2.png"),alt:"foo"},null,8,v),m])}const f=e(c,[["render",g],["__file","Shiro.html.vue"]]);export{f as default};
