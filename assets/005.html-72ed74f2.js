import{_ as a,o as i,c as l,a as n}from"./app-9d6e6088.js";const e="/ahana-docs/webgl/webgl/004-008.jpg",s="/ahana-docs/webgl/webgl/005-001.jpg",t="/ahana-docs/webgl/webgl/005-002.jpg",r="/ahana-docs/webgl/webgl/005-003.jpg",c={},u=n('<h1 id="_005-opengl-es" tabindex="-1"><a class="header-anchor" href="#_005-opengl-es" aria-hidden="true">#</a> 005-OpenGL ES</h1><h2 id="_1-opengl-es语言基础" tabindex="-1"><a class="header-anchor" href="#_1-opengl-es语言基础" aria-hidden="true">#</a> 1. OpenGL ES语言基础</h2><ul><li>大小写敏感</li><li>强制分号</li><li>着色器语言通过 main 函数作为程序入口，且没有任何返回值<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li>单行注释 //</li><li>多行注释 /**/</li><li>强类型语言 <ul><li>变量的使用和赋值必须是相同类型，需要时刻注意变量的类型 <ul><li>基本类型 <ul><li>float : 单精度浮点数</li><li>int ：整型</li><li>boolean ： 布尔值</li></ul></li></ul></li></ul></li><li>变量声明 <ul><li>`&lt;类型&gt;&lt;变量名称&gt; float f <ul><li>数字字母下划线</li><li>不能是关键字或保留字</li><li>不能以数字开头</li><li>不能以 gl_、 webgl_、<em>webgl</em> 作为开头</li></ul></li></ul></li><li>类型和类型转换 <ul><li>int() 此方法将数据转换为整型</li><li>float() 转为浮点型</li><li>bool() 转为布尔值</li></ul></li><li>运算符 <img src="'+e+`" alt="004-008"></li></ul><h2 id="_2-矢量和矩阵" tabindex="-1"><a class="header-anchor" href="#_2-矢量和矩阵" aria-hidden="true">#</a> 2. 矢量和矩阵</h2><h3 id="_2-1-矢量" tabindex="-1"><a class="header-anchor" href="#_2-1-矢量" aria-hidden="true">#</a> 2.1 矢量</h3><ul><li>vec2、vec3、vec4 具有 2，3，4 个浮点数元素的矢量</li><li>ivec2、ivec3、ivec4 具有 2，3，4 个整型元素的矢量</li><li>bvec2、bvec3、bvec4 具有 2，3，4 个布尔值元素的矢量</li></ul><h3 id="_2-2-赋值" tabindex="-1"><a class="header-anchor" href="#_2-2-赋值" aria-hidden="true">#</a> 2.2 赋值</h3><ul><li>需要通过 构造函数 来进⾏赋值 vec4 position = vec4(0.0,0.0,0.0,1.0); vec4就是矢量的构造函数</li></ul><h3 id="_2-3-访问矢量里的分量" tabindex="-1"><a class="header-anchor" href="#_2-3-访问矢量里的分量" aria-hidden="true">#</a> 2.3 访问矢量里的分量</h3><ul><li>访问分量 <ul><li>x, y, z, w 访问顶点坐标的分量</li><li>s, t, p, q 访问纹理坐标分量<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    vec4 position <span class="token operator">=</span> <span class="token function">vec4</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">,</span><span class="token number">0.2</span><span class="token punctuation">,</span><span class="token number">0.3</span><span class="token punctuation">,</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    position<span class="token punctuation">.</span>x <span class="token comment">// 0.1</span>
    position<span class="token punctuation">.</span>y <span class="token comment">// 0.2</span>
    position<span class="token punctuation">.</span>z <span class="token comment">// 0.3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>也可以通过混合的方式获取多个值，获取到的是⼀个新的矢量内容 <ul><li>vec4 position = vec4(0.1,0.2,0.3,1.0 );</li><li>position.xy // vec2(0.1，0.2)</li><li>position.zyx // vec3(0.3，0.2，0.1)</li><li>position.zyx // vec3(0.3，0.2，0.1)</li></ul></li></ul></li></ul><h3 id="_2-4-矩阵" tabindex="-1"><a class="header-anchor" href="#_2-4-矩阵" aria-hidden="true">#</a> 2.4 矩阵</h3><ul><li>mat2、mat3、mat4 2 * 2， 3 * 3， 4 * 4 的浮点数元素矩阵</li><li>矩阵入参，注意：矩阵参数是列主序的<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  mat4 m <span class="token operator">=</span> <span class="token function">mat4</span><span class="token punctuation">(</span>
      <span class="token number">1.0</span>，<span class="token number">5.0</span>，<span class="token number">9.0</span>，<span class="token number">13.0</span><span class="token punctuation">,</span>
      <span class="token number">2.0</span>，<span class="token number">6.0</span>，<span class="token number">10.0</span>，<span class="token number">14.0</span><span class="token punctuation">,</span>
      <span class="token number">3.0</span>，<span class="token number">7.0</span>，<span class="token number">12.0</span>，<span class="token number">15.0</span><span class="token punctuation">,</span>
      <span class="token number">4.0</span><span class="token punctuation">,</span><span class="token number">8.0</span>，<span class="token number">13.0</span>，<span class="token number">16.0</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_3-纹理取样器" tabindex="-1"><a class="header-anchor" href="#_3-纹理取样器" aria-hidden="true">#</a> 3. 纹理取样器</h2><h3 id="_3-1-取样器介绍" tabindex="-1"><a class="header-anchor" href="#_3-1-取样器介绍" aria-hidden="true">#</a> 3.1 取样器介绍</h3><ul><li>取样器有两种: sampler2D 和 samplerCube</li><li>只能声明为 uniform 变量</li></ul><h3 id="_3-2-声明" tabindex="-1"><a class="header-anchor" href="#_3-2-声明" aria-hidden="true">#</a> 3.2 声明</h3><ul><li>声明二维纹理 <ul><li>uniform sampler2D uSampler;</li></ul></li><li>立方体纹理 <ul><li>uniform samplerCube uSamplerCube;</li></ul></li></ul><h3 id="_3-3-二维纹理使用" tabindex="-1"><a class="header-anchor" href="#_3-3-二维纹理使用" aria-hidden="true">#</a> 3.3 二维纹理使用</h3><p><img src="`+s+'" alt="005-001"></p><h3 id="_3-4-立方体纹理使用" tabindex="-1"><a class="header-anchor" href="#_3-4-立方体纹理使用" aria-hidden="true">#</a> 3.4 立方体纹理使用</h3><p><img src="'+t+'" alt="005-002"></p><h2 id="_4-分支和循环" tabindex="-1"><a class="header-anchor" href="#_4-分支和循环" aria-hidden="true">#</a> 4. 分支和循环</h2><h3 id="_4-1-分支逻辑" tabindex="-1"><a class="header-anchor" href="#_4-1-分支逻辑" aria-hidden="true">#</a> 4.1 分支逻辑</h3><ul><li>if() {} 和 if (){} else{}</li><li>if () {} else if () {} else {}</li><li>switch……case</li></ul><h3 id="_4-2-循环语句" tabindex="-1"><a class="header-anchor" href="#_4-2-循环语句" aria-hidden="true">#</a> 4.2 循环语句</h3><ul><li>for() {}</li><li>while(){}</li><li>do {} while()</li></ul><h3 id="_4-3-跳出循环" tabindex="-1"><a class="header-anchor" href="#_4-3-跳出循环" aria-hidden="true">#</a> 4.3 跳出循环</h3><ul><li>continue</li><li>break</li><li>discard continue、break的使用方法和JavaScript中相同 discard只能在片元着色器中使用，表示放弃当前片元直接处理下一个片元</li></ul><h2 id="_5-函数" tabindex="-1"><a class="header-anchor" href="#_5-函数" aria-hidden="true">#</a> 5. 函数</h2><p>GLSL ES 中的函数声明类似于 c 语言 <img src="'+r+'" alt="005-003"></p><h2 id="_6-内置函数介绍" tabindex="-1"><a class="header-anchor" href="#_6-内置函数介绍" aria-hidden="true">#</a> 6. 内置函数介绍</h2><p>GLSL ES 里提供了较多的内置函数，可以直接使用</p><h3 id="_6-1-内置函数" tabindex="-1"><a class="header-anchor" href="#_6-1-内置函数" aria-hidden="true">#</a> 6.1 内置函数</h3><ul><li>角度函数 <ul><li>radians 角度转弧度</li><li>degress 弧度转角度</li></ul></li><li>三角函数 <ul><li>sin 正弦</li><li>cos 余弦</li><li>tan 正切</li><li>asin 反正弦</li><li>acos 反余弦</li><li>atan 反正切</li></ul></li><li>指数函数 <ul><li>pow 次方</li><li>exp 自然质数</li><li>log 对数</li><li>sqrt 开平方</li><li>inversesqrt 开平方的倒数</li></ul></li><li>通用函数 <ul><li>abs 绝对值</li><li>min 最小值</li><li>max 最大值</li><li>mod 取余数</li><li>sign 取符号</li><li>floor 向下取整</li><li>ceil 向上取整</li><li>clamp 限定范围</li><li>fract 获取小数部分</li></ul></li><li>几何函数 <ul><li>length(x) 计算向量 x 的长度</li><li>distance(x,y) 计算向量xy之间的距离</li><li>dot(x,y) 计算向量 xy 的点积</li><li>cross(x,y) 计算向量 xy 的差积</li><li>normalize(x) 返回方向同x，长度为1的向量</li></ul></li><li>矢量函数 <ul><li>any 矢量的任意⼀个元素为true</li><li>all 矢量所有元素为true</li><li>not 逐元素取补</li></ul></li></ul><h2 id="_7-存储限定词" tabindex="-1"><a class="header-anchor" href="#_7-存储限定词" aria-hidden="true">#</a> 7. 存储限定词</h2><h3 id="_7-1-const" tabindex="-1"><a class="header-anchor" href="#_7-1-const" aria-hidden="true">#</a> 7.1 const</h3><ul><li>声明一个常量，定义之后不能被改变</li></ul><h3 id="_7-2-attribute" tabindex="-1"><a class="header-anchor" href="#_7-2-attribute" aria-hidden="true">#</a> 7.2 attribute</h3><p>只能出现在顶点着色器中，只能声明为全局变量，表示逐顶点信息。单个顶点的信息</p><h3 id="_7-3-uniform" tabindex="-1"><a class="header-anchor" href="#_7-3-uniform" aria-hidden="true">#</a> 7.3 uniform</h3><ul><li>可同时出现在 顶点着色器 和 片元着⾊器中。</li><li>只读类型，强调一致性 。</li><li>用来存储的是影响所有顶点的数据。如变换矩阵。</li></ul><h3 id="_7-4-varying" tabindex="-1"><a class="header-anchor" href="#_7-4-varying" aria-hidden="true">#</a> 7.4 varying</h3><ul><li>从顶点着色器向片元着色器传递数据</li></ul><h3 id="_7-5-精度限定" tabindex="-1"><a class="header-anchor" href="#_7-5-精度限定" aria-hidden="true">#</a> 7.5 精度限定</h3><ul><li><p>作用是提升运行效率，削减内存开⽀</p></li><li><p>可以单独针对某个变量声明精度</p><ul><li>mediump float f;</li></ul></li><li><p>劣势：会出现精度歧义，也不利于后期维护</p></li><li><p>第二种方法：通过 precision 关键字来修改着色器的默认精度</p><ul><li>precision mediump float;</li></ul></li><li><p>精度枚举</p><ul><li>高精度： highp</li><li>中精度： mediump</li><li>低精度： lowp</li></ul></li><li><p>什么时候使用精度限定</p><ul><li>片元着色器中的 float 类型没有默认精度，所以如果需要在片元着色器中使用浮点型数据的时候，需要修改默认精度</li></ul></li></ul>',45),d=[u];function o(p,h){return i(),l("div",null,d)}const b=a(c,[["render",o],["__file","005.html.vue"]]);export{b as default};
