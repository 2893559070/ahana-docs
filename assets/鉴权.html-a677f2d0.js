import{_ as n,p as s,q as a,a1 as e}from"./framework-5866ffd3.js";const p={},t=e(`<h1 id="鉴权" tabindex="-1"><a class="header-anchor" href="#鉴权" aria-hidden="true">#</a> 鉴权</h1><h2 id="常⻅鉴权方式" tabindex="-1"><a class="header-anchor" href="#常⻅鉴权方式" aria-hidden="true">#</a> 常⻅鉴权⽅式</h2><ul><li>Session/Cookie</li><li>Token</li><li>OAuth</li><li>SSO</li></ul><h2 id="session-cookie" tabindex="-1"><a class="header-anchor" href="#session-cookie" aria-hidden="true">#</a> session-cookie</h2><p>session会话机制是⼀种服务器端机制，它使⽤类似于哈希表（可能还有哈希表）的结构来保存信息。</p><ul><li>实现原理 <ol><li>服务器在接受客户端⾸次访问时在服务器端创建seesion，然后保存seesion(我们可以将seesion保存在内存中，也可以保存在redis中，推荐使⽤后者)，然后给这个session⽣成⼀个唯⼀的标识字符串,然后在响应头中种下这个唯⼀标识字符串。</li><li>签名。这⼀步通过秘钥对sid进⾏签名处理，避免客户端修改sid。（⾮必需步骤）</li><li>浏览器中收到请求响应的时候会解析响应头，然后将sid保存在本地cookie中，浏览器在下次http请求的请求头中会带上该域名下的cookie信息</li><li>服务器在接受客户端请求时会去解析请求头cookie中的sid，然后根据这个sid去找服务器端保存的该客户端的session，然后判断该请求是否合法。</li></ol></li></ul><h3 id="koa中的session使用" tabindex="-1"><a class="header-anchor" href="#koa中的session使用" aria-hidden="true">#</a> koa中的session使⽤</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>  <span class="token function">npm</span> i koa-session <span class="token parameter variable">-S</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>示例</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// app.js</span>
<span class="token keyword">const</span> koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> session <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa-session&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 签名key keys作⽤ ⽤来对cookie进⾏签名</span>
app<span class="token punctuation">.</span>keys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;some secret&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 配置项</span>
<span class="token keyword">const</span> <span class="token constant">SESS_CONFIG</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
 <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;kkb:sess&#39;</span><span class="token punctuation">,</span> <span class="token comment">// cookie键名</span>
 <span class="token literal-property property">maxAge</span><span class="token operator">:</span> <span class="token number">86400000</span><span class="token punctuation">,</span> <span class="token comment">// 有效期，默认⼀天</span>
 <span class="token literal-property property">httpOnly</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 仅服务器修改</span>
 <span class="token literal-property property">signed</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 签名cookie</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 注册</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token constant">SESS_CONFIG</span><span class="token punctuation">,</span> app<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 测试</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">&#39;/favicon.ico&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
 <span class="token comment">// 获取</span>
 <span class="token keyword">let</span> n <span class="token operator">=</span> ctx<span class="token punctuation">.</span>session<span class="token punctuation">.</span>count <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span>
 <span class="token comment">// 设置</span>
 ctx<span class="token punctuation">.</span>session<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token operator">++</span>n<span class="token punctuation">;</span>
 ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">&#39;第&#39;</span> <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token string">&#39;次访问&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用redis存储session" tabindex="-1"><a class="header-anchor" href="#使用redis存储session" aria-hidden="true">#</a> 使⽤redis存储session</h3><p>redis介绍</p><ul><li>是⼀个⾼性能的key-value数据库。</li></ul><h4 id="redis与其他key-value缓存产品有以下三个特点" tabindex="-1"><a class="header-anchor" href="#redis与其他key-value缓存产品有以下三个特点" aria-hidden="true">#</a> Redis与其他key-value缓存产品有以下三个特点</h4><ul><li>Redis⽀持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进⾏使⽤。</li><li>Redis不仅仅⽀持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构 的存储。</li><li>Redis⽀持数据的备份，即master-slave模式的数据备份。</li></ul><h5 id="redis-优势" tabindex="-1"><a class="header-anchor" href="#redis-优势" aria-hidden="true">#</a> Redis 优势</h5><ul><li><p>性能极⾼ – Redis能读的速度是110000次/s,写的速度是81000次/s 。</p></li><li><p>丰富的数据类型 – Redis⽀持⼆进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</p></li><li><p>原⼦ – Redis的所有操作都是原⼦性的，意思就是要么成功执⾏要么失败完全不执⾏。单个操作是原 ⼦性的。多个操作也⽀持事务，即原⼦性，通过MULTI和EXEC指令包起来。</p></li><li><p>丰富的特性 – Redis还⽀持 publish/subscribe, 通知, key 过期等等特性。</p></li><li><p>示例</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token comment">// redis.js</span>
 <span class="token keyword">const</span> redis <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;redis&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
 <span class="token keyword">const</span> client <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">createClient</span><span class="token punctuation">(</span><span class="token number">6379</span><span class="token punctuation">,</span><span class="token string">&#39;localhost&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
 client<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;This is a value&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
 client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;redis get &quot;</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>  <span class="token function">npm</span> i <span class="token parameter variable">-S</span> koa-redis
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="配置使用" tabindex="-1"><a class="header-anchor" href="#配置使用" aria-hidden="true">#</a> 配置使⽤</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// koa-redis</span>
<span class="token keyword">const</span> redisStore <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa-redis&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> redis <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;redis&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> redisClient <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">createClient</span><span class="token punctuation">(</span><span class="token number">6379</span><span class="token punctuation">,</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;co-redis&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token function">wrapper</span><span class="token punctuation">(</span>redisClient<span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
 <span class="token literal-property property">key</span><span class="token operator">:</span><span class="token string">&#39;kkb:sess&#39;</span><span class="token punctuation">,</span>
 <span class="token literal-property property">store</span><span class="token operator">:</span> <span class="token function">redisStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>client<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 此处可以不必指定client</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> app<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
 <span class="token keyword">const</span> keys <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
 keys<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token parameter">key</span> <span class="token operator">=&gt;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token punctuation">)</span>
 <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22),o=[t];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","鉴权.html.vue"]]);export{r as default};
