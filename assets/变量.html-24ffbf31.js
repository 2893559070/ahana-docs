import{_ as n,o as a,c as s,a as t}from"./app-fdb0ca41.js";const e={},l=t(`<h1 id="变量-修饰符" tabindex="-1"><a class="header-anchor" href="#变量-修饰符" aria-hidden="true">#</a> 变量 &amp;&amp; 修饰符</h1><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>type identifier <span class="token url">[<span class="token content"> = value</span>][<span class="token variable">, identifier [= value</span>]</span> ...] ;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>格式说明：type为Java数据类型。identifier是变量名。可以使用逗号隔开来声明多个同类型变量。</p><h2 id="变量类型" tabindex="-1"><a class="header-anchor" href="#变量类型" aria-hidden="true">#</a> 变量类型</h2><ul><li><p>类变量（静态变量）：独立于方法之外的变量，用 static 修饰。</p></li><li><p>实例变量：独立于方法之外的变量，不过没有 static 修饰。</p></li><li><p>局部变量：类的方法中的变量。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Variable</span><span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> allClicks<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 类变量（静态变量） 很少使用</span>
    <span class="token class-name">String</span> str<span class="token operator">=</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">;</span>  <span class="token comment">// 实例变量</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 局部变量</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="修饰符" tabindex="-1"><a class="header-anchor" href="#修饰符" aria-hidden="true">#</a> 修饰符</h2><p>Java语言提供了很多修饰符，主要分为以下两类：</p><ul><li>访问修饰符</li><li>非访问修饰符</li></ul><h3 id="访问控制修饰符" tabindex="-1"><a class="header-anchor" href="#访问控制修饰符" aria-hidden="true">#</a> 访问控制修饰符</h3><p>Java中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。Java 支持 4 种不同的访问权限。</p><ul><li><strong>default</strong> (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。</li><li><strong>private</strong> : 在同一类内可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong></li><li><strong>public</strong> : 对所有类可见。使用对象：类、接口、变量、方法</li><li><strong>protected</strong> : 对同一包内的类和所有子类可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong>。</li></ul><table><thead><tr><th style="text-align:left;">修饰符</th><th style="text-align:left;">当前类</th><th style="text-align:left;">同一包内</th><th style="text-align:left;">子孙类(同一包)</th><th style="text-align:left;">子孙类(不同包)</th><th style="text-align:left;">其他包</th></tr></thead><tbody><tr><td style="text-align:left;"><code>public</code></td><td style="text-align:left;">Y</td><td style="text-align:left;">Y</td><td style="text-align:left;">Y</td><td style="text-align:left;">Y</td><td style="text-align:left;">Y</td></tr><tr><td style="text-align:left;"><code>protected</code></td><td style="text-align:left;">Y</td><td style="text-align:left;">Y</td><td style="text-align:left;">Y</td><td style="text-align:left;">Y/N</td><td style="text-align:left;">N</td></tr><tr><td style="text-align:left;"><code>default</code></td><td style="text-align:left;">Y</td><td style="text-align:left;">Y</td><td style="text-align:left;">Y</td><td style="text-align:left;">N</td><td style="text-align:left;">N</td></tr><tr><td style="text-align:left;"><code>private</code></td><td style="text-align:left;">Y</td><td style="text-align:left;">N</td><td style="text-align:left;">N</td><td style="text-align:left;">N</td><td style="text-align:left;">N</td></tr></tbody></table><h3 id="访问控制和继承" tabindex="-1"><a class="header-anchor" href="#访问控制和继承" aria-hidden="true">#</a> 访问控制和继承</h3><p>请注意以下方法继承的规则：</p><ul><li>父类中声明为 public 的方法在子类中也必须为 public。</li><li>父类中声明为 protected 的方法在子类中要么声明为 protected，要么声明为 public，不能声明为 private。</li><li>父类中声明为 private 的方法，不能够被子类继承。</li></ul><h3 id="非访问修饰符" tabindex="-1"><a class="header-anchor" href="#非访问修饰符" aria-hidden="true">#</a> 非访问修饰符</h3><p>为了实现一些其他的功能，Java 也提供了许多非访问修饰符。</p><ul><li><p>static 修饰符，用来修饰类方法和类变量。</p><ul><li><strong>静态变量：</strong><ul><li>static 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。 静态变量也被称为类变量。局部变量不能被声明为 static 变量。</li></ul></li><li><strong>静态方法：</strong><ul><li>static 关键字用来声明独立于对象的静态方法。静态方法不能使用类的非静态变量。静态方法从参数列表得到数据，然后计算这些数据。</li></ul></li></ul></li><li><p>final 修饰符，用来修饰类、方法和变量，final 修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。 (一处改 处处用)</p><ul><li><p><strong>final 变量：</strong></p><ul><li>final 表示&quot;最后的、最终的&quot;含义，变量一旦赋值后，不能被重新赋值。被 final 修饰的实例变量必须显式指定初始值。</li><li>final 修饰符通常和 static 修饰符一起使用来创建类常量。</li></ul></li><li><p><strong>final 方法</strong></p><ul><li><p>父类中的 final 方法可以被子类继承，但是不能被子类重写。</p></li><li><p>声明 final 方法的主要目的是防止该方法的内容被修改。</p></li></ul></li><li><p><strong>final 类</strong></p><ul><li>final 类不能被继承，没有类能够继承 final 类的任何特性。</li></ul></li></ul></li><li><p>abstract 修饰符，用来创建抽象类和抽象方法。</p><ul><li><p><strong>抽象类</strong></p><ul><li><p>抽象类不能用来实例化对象，声明抽象类的唯一目的是为了将来对该类进行扩充。</p></li><li><p>一个类不能同时被 abstract 和 final 修饰。如果一个类包含抽象方法，那么该类一定要声明为抽象类，否则将出现编译错误。</p></li><li><p>抽象类可以包含抽象方法和非抽象方法。</p></li></ul></li><li><p><strong>抽象方法</strong></p><ul><li><p>抽象方法是一种没有任何实现的方法，该方法的具体实现由子类提供。</p></li><li><p>抽象方法不能被声明成 final 和 static。</p></li><li><p>任何继承抽象类的子类必须实现父类的所有抽象方法，除非该子类也是抽象类。</p></li><li><p>如果一个类包含若干个抽象方法，那么该类必须声明为抽象类。抽象类可以不包含抽象方法。</p></li><li><p>抽象方法的声明以分号结尾，例如：<strong>public abstract sample();</strong>。</p></li></ul></li></ul></li><li><p>synchronized 和 volatile 修饰符，主要用于线程的编程。</p><ul><li><p>synchronized 关键字声明的方法同一时间只能被一个线程访问。synchronized 修饰符可以应用于四个访问修饰符。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">showDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>volatile 修饰的成员变量在每次被线程访问时，都强制从共享内存中重新读取该成员变量的值。而且，当成员变量发生变化时，会强制线程将变化值回写到共享内存。这样在任何时刻，两个不同的线程总是看到某个成员变量的同一个值。</p><p>一个 volatile 对象引用可能是 null。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> active<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        active <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>active<span class="token punctuation">)</span> <span class="token comment">// 第一行</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// 代码</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        active <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 第二行</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>transient 修饰符</p><ul><li><p>序列化的对象包含被 transient 修饰的实例变量时，java 虚拟机(JVM)跳过该特定的变量。</p></li><li><p>该修饰符包含在定义变量的语句中，用来预处理类和变量的数据类型。</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">transient</span> <span class="token keyword">int</span> limit <span class="token operator">=</span> <span class="token number">55</span><span class="token punctuation">;</span>   <span class="token comment">// 不会持久化</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> b<span class="token punctuation">;</span> <span class="token comment">// 持久化</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,18),i=[l];function p(o,c){return a(),s("div",null,i)}const r=n(e,[["render",p],["__file","变量.html.vue"]]);export{r as default};
