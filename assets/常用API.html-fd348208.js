import{_ as e,o as p,c,b as n,d as a,a as t}from"./app-fdb0ca41.js";const l={},o=t(`<h1 id="常用api" tabindex="-1"><a class="header-anchor" href="#常用api" aria-hidden="true">#</a> 常用API</h1><p>应用程序接口</p><p>clrt + alt + t 快捷生成方法</p><h2 id="api的基本使用" tabindex="-1"><a class="header-anchor" href="#api的基本使用" aria-hidden="true">#</a> API的基本使用</h2><ul><li><p>Math 数学运算法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//返回绝对值</span>
    <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//向上取整</span>
    <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//向下取整</span>
    <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//四舍五入</span>
    <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//返回最大值</span>
    <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//返回最小值</span>
    <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token comment">//返回a的b次幂</span>
    <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//随机数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>System 系统</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//停止jvm虚拟机</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTomeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//返回当前时间（毫秒）</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>数据源数组，起始索引，目的地索引，起始索引，拷贝个数<span class="token punctuation">)</span> <span class="token comment">//拷贝数组</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="object类" tabindex="-1"><a class="header-anchor" href="#object类" aria-hidden="true">#</a> Object类</h2><p>是所有类的直接或者间接的父类</p><ul><li><p>toString Object的toString是累的地址值，一般都会在类中把toString重写</p></li><li><p>equals Object类中equals是比较地址值，重写可以比较内容</p></li><li><p>StringBuilder StringBuilder类中没有 equals 方法</p></li><li><p>Objects类</p><ul><li>toString(obj) Objects.toString(obj) 类似 toString的重写</li><li>toString(obj, 默认字符串) Objects.toString(obj, &quot;obj如果是空，就显示我&quot;)</li><li>inNull Objects.inNull(obj) 是空返回true，否则false</li><li>noNull Objects.inNull(obj) 是空返回false，否则true</li></ul></li></ul><h2 id="bigdecimal类" tabindex="-1"><a class="header-anchor" href="#bigdecimal类" aria-hidden="true">#</a> BigDecimal类</h2><p>精确计算 字符串可以精确运算，数值会出现浮点</p><ul><li>add 加</li><li>subtract 减</li><li>multiply 乘法</li><li>divide 除法 <ul><li>舍入模式 <ol><li>进一法 BigDeciMal.ROUND_UP</li><li>去尾法 BigDeciMal.ROUND_FLOOR</li><li>四舍五入法 BigDeciMal.ROUND_HALF_UP</li></ol></li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token comment">// BigDecimal(字符串 | 数值);</span>

    <span class="token class-name">BigDecimal</span> nbd1 <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BigDecimal</span> nbd2 <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    nbd1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nbd2<span class="token punctuation">)</span> <span class="token comment">// 和 会出现浮点</span>

    <span class="token class-name">BigDecimal</span> bd1 <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">&quot;0.1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BigDecimal</span> bd2 <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">&quot;0.3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    bd1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bd2<span class="token punctuation">)</span> <span class="token comment">// 精确计算</span>

    bd1<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>bd2<span class="token punctuation">,</span> <span class="token class-name">BigDeciMal</span><span class="token punctuation">.</span><span class="token constant">ROUND_UP</span><span class="token punctuation">)</span> <span class="token comment">// 除法舍入模式</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="基本类型包装类" tabindex="-1"><a class="header-anchor" href="#基本类型包装类" aria-hidden="true">#</a> 基本类型包装类</h2><ul><li>Integer <ul><li>MAX_VALUE 最大值</li><li>MIN_VALUE 最小值</li><li>Integer.valueOf()</li><li>Integer.parseInt() 字符串 转换成 int类型的整数</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">// 自动装箱 底层自动调用 Integer.valueOf() 方法</span>

    <span class="token comment">// String -&gt; int</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;100&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// int -&gt; String</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> <span class="token class-name">Stra</span> <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> <span class="token class-name">Strb</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>装箱拆箱 <ul><li>装箱：把一个基本数据类型 变量对象包装类</li><li>拆箱：把一个包装类型 变成对应的基本数据类型</li><li>注意: 包装类型 null 无法转换成基本数据类型 需要做一下非空判断</li></ul></li></ul><h2 id="数组的高级操作" tabindex="-1"><a class="header-anchor" href="#数组的高级操作" aria-hidden="true">#</a> 数组的高级操作</h2>`,15),i=["src"],u=["src"],k=t(`<h2 id="时间" tabindex="-1"><a class="header-anchor" href="#时间" aria-hidden="true">#</a> 时间</h2><p>Date</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token class-name">Date</span> d1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 当前时间</span>
    <span class="token class-name">Date</span> d2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1970年 原点时间</span>

    <span class="token class-name">Date</span> d3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    d3<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span><span class="token number">0L</span><span class="token punctuation">)</span> <span class="token comment">// 设置时间</span>
    <span class="token keyword">long</span> time <span class="token operator">=</span> d3<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 当前时间的毫秒值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>SimpleDateFormat 对Date对象，进行格式化和解析</p><ul><li>格式 yyyy MM dd HH:mm:ss</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token class-name">Date</span> d1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 当前时间</span>
    <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy MM dd HH:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 定义时间格式</span>
    <span class="token class-name">String</span> resDate <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取格式后的时间</span>

    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;2022-01-01&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 定义时间</span>
    <span class="token class-name">SimpleDateFormat</span> sdf1 <span class="token operator">=</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 定义时间格式</span>
    <span class="token class-name">Date</span> time <span class="token operator">=</span> sdf1<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment">// 将字符时间转换成时间对象 需要捕获异常</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>DateTimeFormatter</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;2022-01-01&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 定义时间</span>
    <span class="token class-name">DateTimeFormatter</span> pattern <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofpattern</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy MM dd HH:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 定义时间格式</span>
    <span class="token class-name">LocalDateTime</span> time <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> pattern<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 解析时间格式</span>
    <span class="token class-name">LocalDateTime</span> newTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">plusDays</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 增加一天时间</span>
    <span class="token class-name">String</span> resTime <span class="token operator">=</span> newTime<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获得增加后的时间</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>JDK8新增的日期类</p><ul><li>localDateTime <ul><li>localDateTime.getYear() 获取年</li><li>localDateTime.getMonthValue() 获取月</li><li>localDateTime.getDayOfMonth() 月中多少天</li><li>localDateTime.getDayOfYear() 年中多少天</li><li>localDateTime.getDayOfWeek() 获取星期</li><li>localDateTime.getMinute() 获取分钟</li><li>localDateTime.getHour() 获取小时</li></ul></li><li>LocalDate 年月日</li><li>LocalTime 时分秒 <ul><li>format</li><li>parse</li></ul></li><li>计算时间 <ul><li>Period （开始时间， 结束时间） <ul><li>年，月，天，总数月</li></ul></li><li>Duration （开始时间， 结束时间） <ul><li>秒，毫秒，纳秒</li></ul></li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    localDateTime time1 <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取当前系统时间</span>
    localDateTime time2 <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取指定时间的localDateTime对象</span>

    <span class="token class-name">LocalDate</span> <span class="token class-name">LocalDate</span> <span class="token operator">=</span> time2<span class="token punctuation">.</span><span class="token function">toLocalDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 转换成 LocalDate 对象 年月日</span>
    <span class="token class-name">LocalTime</span> <span class="token class-name">LocalTime</span> <span class="token operator">=</span> time2<span class="token punctuation">.</span><span class="token function">toLocalTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 转换成 LocalTime 对象 时分秒</span>

    <span class="token comment">// LocalTime format</span>
    localDateTime time3 <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取指定时间的localDateTime对象</span>
    <span class="token class-name">DateTimeFormatter</span> pattern <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofpattern</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy MM dd HH:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 定义时间格式</span>
    <span class="token class-name">String</span> s3 <span class="token operator">=</span> time2<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// LocalTime parse</span>
    <span class="token class-name">String</span> sTime <span class="token operator">=</span> <span class="token string">&quot;2022-01-01&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 定义时间</span>
    <span class="token class-name">DateTimeFormatter</span> pattern2 <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofpattern</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy MM dd HH:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 定义时间格式</span>
    <span class="token class-name">LocalTime</span> s3 time2<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>sTime<span class="token punctuation">,</span> pattern2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="异常处理" tabindex="-1"><a class="header-anchor" href="#异常处理" aria-hidden="true">#</a> 异常处理</h2><ul><li>throws <ul><li>异常申明 用在方法名后面，跟的是异常类名 告诉方法可能会出现这样的异常<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
        给方法处理或者给虚拟机处理
        运行时异常可以忽略不写
        编译时异常需要申明
    */</span> 
    
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> 异常名称 <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li>throw <ul><li>抛出异常 用在方法里面 跟的是异常对象名 手动抛出异常 让方法里面处理<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>err <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li>try...catch <ul><li>自己处理异常 不交给虚拟机 可以让程序继续执行</li><li>存在异常子父类关系 父类异常一定要写在下面<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span><span class="token punctuation">{</span>
            <span class="token function">method</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 正常执行区域</span>
        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 处理异常区域一</span>
        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 处理异常区域二</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>   
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>err <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><ul><li>getMessage 异常的信息</li><li>toString 异常的简短描述</li><li>printStackTrace 把异常的错误信息输出在控制台 红色字体<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">try</span><span class="token punctuation">{</span>
        <span class="token function">method</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 正常执行区域</span>
    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> message <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> string <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul>`,6);function r(s,d){return p(),c("div",null,[o,n("ul",null,[n("li",null,[a("二分查找 "),n("img",{src:s.$withBase("/java/二分查找.png"),alt:"foo"},null,8,i)]),n("li",null,[a("递归 "),n("img",{src:s.$withBase("/java/递归.png"),alt:"foo"},null,8,u)])]),k])}const v=e(l,[["render",r],["__file","常用API.html.vue"]]);export{v as default};
