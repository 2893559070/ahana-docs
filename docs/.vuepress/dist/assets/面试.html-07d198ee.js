import{_ as n,o as a,c as s,a as t}from"./app-9d6e6088.js";const e={},p=t(`<h1 id="react面试" tabindex="-1"><a class="header-anchor" href="#react面试" aria-hidden="true">#</a> React面试</h1><h2 id="key是什么-有什么作用" tabindex="-1"><a class="header-anchor" href="#key是什么-有什么作用" aria-hidden="true">#</a> Key是什么，有什么作用</h2><ul><li>标识唯一性</li><li>参考vue中的描述</li></ul><h2 id="refs是什么-如何来使用的" tabindex="-1"><a class="header-anchor" href="#refs是什么-如何来使用的" aria-hidden="true">#</a> Refs是什么，如何来使用的</h2><ul><li>Refs 提供了一种方式，允许我们访问 DOM 节点或在 render 方法中创建的 React 元素。</li><li>何时适合使用 Refs？ <ul><li>管理焦点，文本选择或媒体播放。</li><li>触发强制动画</li><li>集成第三方 DOM 库。</li></ul></li><li>Refs有哪些使用方式？ <ul><li>原生DOM元素上使用Ref</li><li>类组件上使用Ref</li><li>函数组件上使用Ref</li><li>高阶组件上使用Ref</li><li>函数组件使用HOOK useRef</li></ul></li></ul><h2 id="forwardref" tabindex="-1"><a class="header-anchor" href="#forwardref" aria-hidden="true">#</a> forwardRef</h2><p>转发ref, 引用传递（Ref forwading）是一种通过组件向子组件自动传递 引用ref 的技术。对于应用者的大多数组件来说没什么作用。但是对于有些重复使用的组件，可能有用。例如某些input组件，需要控制其focus，本来是可以使用ref来控制，但是因为该input已被包裹在组件中，这时就需要使用Ref forward来透过组件获得该input的引用。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">//子组件</span>
<span class="token keyword">let</span> <span class="token function-variable function">Component</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span>refInstance<span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>
    <span class="token comment">//  只要是实例都行useForm和useRef创建的都可以</span>
    <span class="token keyword">const</span> <span class="token punctuation">[</span>form<span class="token punctuation">]</span> <span class="token operator">=</span> Form<span class="token punctuation">.</span><span class="token function">useForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">useImperativeHandle</span><span class="token punctuation">(</span>refInstance<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
       <span class="token function-variable function">submit</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
          form<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">xxx</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>；
Component <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token parameter">xxx<span class="token punctuation">,</span> xxx</span><span class="token punctuation">)</span><span class="token punctuation">{</span>Component<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//注意：这里不要在Component上使用ref;换个属性名字比如refInstance；不然会导致覆盖</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> React<span class="token punctuation">.</span><span class="token function">forwardRef</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span>ref</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span></span>  <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span>  <span class="token attr-name">refInstance</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>ref<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="事件系统" tabindex="-1"><a class="header-anchor" href="#事件系统" aria-hidden="true">#</a> 事件系统</h2><h2 id="setstate" tabindex="-1"><a class="header-anchor" href="#setstate" aria-hidden="true">#</a> setState</h2><ul><li><p>使用方式</p><ul><li>Object</li><li>function</li></ul></li><li><p>同步异步区别</p><ul><li>在定时器与原生事件中为同步事件</li><li>在合成事件中为异步</li></ul></li></ul><h2 id="组件通信" tabindex="-1"><a class="header-anchor" href="#组件通信" aria-hidden="true">#</a> 组件通信</h2><h2 id="class组件与函数式组件" tabindex="-1"><a class="header-anchor" href="#class组件与函数式组件" aria-hidden="true">#</a> Class组件与函数式组件</h2><ol><li>hook之气的函数组件是什么样子</li></ol><ul><li>无状态，无副作用，只能做单纯的展示组件</li></ul><ol start="2"><li>class组件有什么弊端，为什么要引入hook</li></ol><ul><li>在组件之间复用状态逻辑很难</li><li>复杂组件变得难以理解</li><li>难以理解的class</li></ul><ol start="3"><li>引入了hook之后的函数组件发生了那些变化</li></ol><ul><li>函数组件可以存储和改变状态值（useState、useReducer），可以执行副作用（userEffect、useLayoutEffect）</li><li>可以复用状态逻辑（自定义hook）</li></ul><ol start="4"><li>函数组件与class组件如何选择</li></ol><ul><li>出现以上缺点的情况下都适合使用函数组件</li></ul><h2 id="react性能优化方案" tabindex="-1"><a class="header-anchor" href="#react性能优化方案" aria-hidden="true">#</a> React性能优化方案</h2><ol><li>减少不必要渲染</li></ol><ul><li>shouldComponentUpdate、PureComponent、React.memo 实现</li></ul><ol start="2"><li>数据缓存</li></ol><ul><li>useMemo缓存参数、useCallback缓存函数</li><li>函数、对象尽量不要使用内联形式（如context的value object、refsfunction）</li><li>Router中的内联函数渲染时候使用render或者children，不要使用component。</li></ul><ol start="3"><li>不要滥用功能项，如conext、props等</li><li>懒加载，对于长页列表分页加载</li><li>减少http请求</li></ol><p>总结：减少计算、渲染和请求</p>`,28),l=[p];function o(i,c){return a(),s("div",null,l)}const r=n(e,[["render",o],["__file","面试.html.vue"]]);export{r as default};
