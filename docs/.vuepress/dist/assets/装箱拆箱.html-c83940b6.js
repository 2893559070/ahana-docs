import{_ as t,o as e,c as p,b as n,d as s,a as c}from"./app-9d6e6088.js";const o={},l=n("h1",{id:"装箱拆箱",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#装箱拆箱","aria-hidden":"true"},"#"),s(" 装箱拆箱")],-1),i=n("h2",{id:"概念",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#概念","aria-hidden":"true"},"#"),s(" 概念")],-1),u=n("ul",null,[n("li",null,"装箱就是 自动将基本数据类型转换为包装器类型；"),n("li",null,"拆箱就是 自动将包装器类型转换为基本数据类型。")],-1),r=["src"],k=n("h2",{id:"基本类型包装类的产生",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#基本类型包装类的产生","aria-hidden":"true"},"#"),s(" 基本类型包装类的产生")],-1),d=n("p",null,"在实际程序使用中，程序界面上用户输入的数据都是以字符串类型进行存储的。而程序开发中，我们需要把字符串数据，根据需求转换成指定的基本数据类型。",-1),m=n("p",null,[s("概述："),n("strong",null,"将基本的数据类型封装成对象的好处在于可以在对象中定义更多的功能方法操作该数据")],-1),v=n("p",null,"常见操作： 用于基本数据类型与字符串之间的转换",-1),b=["src"],g=c(`<h2 id="int-类型-和string类型的相互转换" tabindex="-1"><a class="header-anchor" href="#int-类型-和string类型的相互转换" aria-hidden="true">#</a> int 类型 和String类型的相互转换</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Democrat</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//int --&gt;String</span>
        <span class="token keyword">int</span> number <span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>
 
        <span class="token comment">//方式1：字符串拼接</span>
        <span class="token class-name">String</span> s1<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token operator">+</span>number<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        <span class="token comment">//推荐方式2</span>
        <span class="token comment">//方式2：String的方法:可以把任意类型的转换成字符串</span>
        <span class="token class-name">String</span> s2 <span class="token operator">=</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;s2 = &quot;</span> <span class="token operator">+</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        <span class="token comment">//方式3</span>
        <span class="token class-name">Integer</span> i<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        <span class="token comment">//方式4：</span>
        <span class="token class-name">String</span> s4<span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;-------------------------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        <span class="token comment">//String --&gt;int</span>
        <span class="token class-name">String</span> s<span class="token operator">=</span><span class="token string">&quot;100&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">//方式1：</span>
        <span class="token comment">//String--Integer---int</span>
        <span class="token class-name">Integer</span> ii <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把String类型转成Integer类型</span>
        <span class="token keyword">int</span> x<span class="token operator">=</span>ii<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把Integer类型转成int类型</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        <span class="token comment">//方式2：很重要，同理，类似float</span>
        <span class="token comment">//public static int parseInt(String s)</span>
        <span class="token keyword">int</span> y<span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
      
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="装箱和拆箱的原理" tabindex="-1"><a class="header-anchor" href="#装箱和拆箱的原理" aria-hidden="true">#</a> 装箱和拆箱的原理</h2><p>装箱过程是通过调用 包装器的**<code>valueOf方法</code>**实现的，而拆箱过程是通过调用包装器的 **<code>xxxValue方法</code>**实现的。</p><p>自动装箱,拆箱的 好处: 基本类型和引用类直接运算</p><p>【注意】：建议判断是否为null，然后再使用</p><p>自动装箱：</p><ul><li>使用<code>Integer.valueOf</code>（整数值）返回一个封装了该整数值的Integer对象</li><li>即把基本类型转为引用类型</li></ul><p>自动拆箱：</p><ul><li>使用 Integer 对象 <code>.intValue（）</code>返回 Integer 对象中封装的整数值</li><li>把引用类型转为基本数据类型</li></ul><h2 id="带入题目解释" tabindex="-1"><a class="header-anchor" href="#带入题目解释" aria-hidden="true">#</a> 带入题目解释</h2><ol><li><p>进行比较前会自动拆箱</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">AutoUnboxingTest</span> <span class="token punctuation">{</span>
 
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Integer</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>                  <span class="token comment">// 将3自动装箱成Integer类型</span>
        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// false 两个引用没有引用同一对象</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// true a自动拆箱成int类型再和c比较</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>输出的结果</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test03</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Integer</span> f1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> f2 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> f3 <span class="token operator">=</span> <span class="token number">150</span><span class="token punctuation">,</span> f4 <span class="token operator">=</span> <span class="token number">150</span><span class="token punctuation">;</span>
 
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f1 <span class="token operator">==</span> f2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f3 <span class="token operator">==</span> f4<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
这四个变量都是 Integer 对象引用，所以下面的 == 运算比较的不是值而是引用。装箱的本质是什么呢？当我们给一个 Integer 对象赋一个 int 值的时候，会调用 Integer 类的静态方法 valueOf。所以整形字面量的值 在 -128 到127 之间，那么不会new 新的Integer 对象，而是直接引用常量池中的 Integer 对象，所以

f1==f2 的true ；f3==f4 的值是false。
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,12);function f(a,h){return e(),p("div",null,[l,i,u,n("img",{src:a.$withBase("/java/zscs.jpg"),alt:"foo"},null,8,r),k,d,m,v,n("img",{src:a.$withBase("/java/jbsjzhzfc.jpg"),alt:"foo"},null,8,b),g])}const _=t(o,[["render",f],["__file","装箱拆箱.html.vue"]]);export{_ as default};
