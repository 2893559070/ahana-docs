import{_ as c,r as o,o as l,c as i,b as n,d as s,e as p,a}from"./app-676abf65.js";const u={},r=a('<h1 id="微服务网关限流-鉴权" tabindex="-1"><a class="header-anchor" href="#微服务网关限流-鉴权" aria-hidden="true">#</a> 微服务网关限流&amp;鉴权</h1><p>微服务网关Gateway的系统搭建 网关限流的实现 使用BCrypt实现对密码的加密与验证 了解加密算法 使用JWT实现微服务鉴权</p><h2 id="_1-微服务网关gateway" tabindex="-1"><a class="header-anchor" href="#_1-微服务网关gateway" aria-hidden="true">#</a> 1. 微服务网关Gateway</h2><h3 id="_1-1-微服务网关概述" tabindex="-1"><a class="header-anchor" href="#_1-1-微服务网关概述" aria-hidden="true">#</a> 1.1 微服务网关概述</h3><p>不同的微服务一般会有不同的网络地址，而外部客户端可能需要调用多个服务的接 口才能完成一个业务需求，如果让客户端直接与各个微服务通信，会有以下的问题：</p><ul><li>客户端会多次请求不同的微服务，增加了客户端的复杂性</li><li>存在跨域请求，在一定场景下处理相对复杂</li><li>认证复杂，每个服务都需要独立认证</li><li>难以重构，随着项目的迭代，可能需要重新划分微服务。例如，可能将多个服务合并 成一个或者将一个服务拆分成多个。如果客户端直接与微服务通信，那么重构将会很 难实施 以上这些问题可以借助网关解决。</li></ul>',6),k=["src"],d=n("p",null,"优点如下：",-1),m=n("ul",null,[n("li",null,"安全 ，只有网关系统对外进行暴露，微服务可以隐藏在内网，通过防火墙保护。"),n("li",null,"易于监控。可以在网关收集监控数据并将其推送到外部系统进行分析。"),n("li",null,"易于统一认证授权。可以在网关上进行认证，然后再将请求转发到后端的微服务，而 无须在每个微服务中进行认证。"),n("li",null,"减少了客户端与各个微服务之间的交互次数")],-1),v=n("p",null,"总结：微服务网关就是一个系统，通过暴露该微服务网关系统，方便我们进行相关的鉴 权，安全控制，日志统一处理，易于监控的相关功能。",-1),b=n("p",null,"实现微服务网关的技术有很多",-1),g={href:"https://baike.baidu.com/item/HTTP",target:"_blank",rel:"noopener noreferrer"},h={href:"https://baike.baidu.com/item/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/7793488",target:"_blank",rel:"noopener noreferrer"},y=n("li",null,"zuul ,Zuul 是 Netflix 出品的一个基于 JVM 路由和服务端的负载均衡器。",-1),f=n("li",null,"spring-cloud-gateway, 是spring 出品的 基于spring 的网关项目，集成断路器，路 径重写，性能比Zuul好。",-1),w={href:"https://spring.io/projects/spring-cloud-gateway",target:"_blank",rel:"noopener noreferrer"},_=n("h3",{id:"_1-2-微服务网关微服务搭建",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-2-微服务网关微服务搭建","aria-hidden":"true"},"#"),s(" 1.2 微服务网关微服务搭建")],-1),x=["src"],q=a(`<ul><li><p>搭建步骤</p><ol><li>在xxx_gateway工程中，创建xxx_gateway_system工程，pom.xml:</li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><p>创建包com.changgou.system, 创建引导类：GatewayApplication</p></li><li><p>在resources下创建application.yml</p></li></ol><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>  <span class="token key atrule">spring</span><span class="token punctuation">:</span>
    <span class="token key atrule">application</span><span class="token punctuation">:</span>
      <span class="token key atrule">name</span><span class="token punctuation">:</span> sysgateway
    <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
      <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
        <span class="token key atrule">routes</span><span class="token punctuation">:</span>
          <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> goods
            <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//goods
            <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
              <span class="token punctuation">-</span> Path=/goods/<span class="token important">**</span>
            <span class="token key atrule">filters</span><span class="token punctuation">:</span>
              <span class="token punctuation">-</span> StripPrefix=1
          <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> system
            <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//system
            <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
              <span class="token punctuation">-</span> Path=/system/<span class="token important">**</span>
            <span class="token key atrule">filters</span><span class="token punctuation">:</span>
              <span class="token punctuation">-</span> StripPrefix=1
        <span class="token key atrule">globalcors</span><span class="token punctuation">:</span>
          <span class="token key atrule">cors-configurations</span><span class="token punctuation">:</span>
            <span class="token key atrule">&#39;[/**]&#39;</span><span class="token punctuation">:</span> <span class="token comment"># 匹配所有请求</span>
              <span class="token key atrule">allowedOrigins</span><span class="token punctuation">:</span> <span class="token string">&quot;*&quot;</span> <span class="token comment">#跨域处理 允许所有的域</span>
              <span class="token key atrule">allowedMethods</span><span class="token punctuation">:</span> <span class="token comment"># 支持的方法</span>
                <span class="token punctuation">-</span> GET
                <span class="token punctuation">-</span> POST
                <span class="token punctuation">-</span> PUT
                <span class="token punctuation">-</span> DELETE

  <span class="token key atrule">server</span><span class="token punctuation">:</span>
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9101</span>

  <span class="token key atrule">eureka</span><span class="token punctuation">:</span>
    <span class="token key atrule">client</span><span class="token punctuation">:</span>
      <span class="token key atrule">service-url</span><span class="token punctuation">:</span>
        <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>6868/eureka
    <span class="token key atrule">instance</span><span class="token punctuation">:</span>
      <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,1),J={href:"https://cloud.spring.io/spring-cloud-gateway/spring-cloud-gateway.html#_stripprefix_gatewayfilter_factory",target:"_blank",rel:"noopener noreferrer"},I=a(`<h3 id="_1-3-微服务网关跨域" tabindex="-1"><a class="header-anchor" href="#_1-3-微服务网关跨域" aria-hidden="true">#</a> 1.3 微服务网关跨域</h3><p>修改application.yml ,在spring.cloud.gateway节点添加配置</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>  <span class="token key atrule">spring</span><span class="token punctuation">:</span>
    <span class="token key atrule">application</span><span class="token punctuation">:</span>
      <span class="token key atrule">name</span><span class="token punctuation">:</span> sysgateway
    <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
      <span class="token key atrule">globalcors</span><span class="token punctuation">:</span>
        <span class="token key atrule">cors-configurations</span><span class="token punctuation">:</span>
          <span class="token key atrule">&#39;[/**]&#39;</span><span class="token punctuation">:</span> <span class="token comment"># 匹配所有请求</span>
            <span class="token key atrule">allowedOrigins</span><span class="token punctuation">:</span> <span class="token string">&quot;*&quot;</span> <span class="token comment">#跨域处理 允许所有的域</span>
            <span class="token key atrule">allowedMethods</span><span class="token punctuation">:</span> <span class="token comment"># 支持的方法</span>
              <span class="token punctuation">-</span> GET
              <span class="token punctuation">-</span> POST
              <span class="token punctuation">-</span> PUT
              <span class="token punctuation">-</span> DELETE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4-微服务网关过滤器" tabindex="-1"><a class="header-anchor" href="#_1-4-微服务网关过滤器" aria-hidden="true">#</a> 1.4 微服务网关过滤器</h3><p>我们可以通过网关过滤器，实现一些逻辑的处理，比如ip黑白名单拦截、特定地址的拦截 等。下面的代码中做了两个过滤器，并且设定的先后顺序</p><ol><li>xxx_gateway_system创建IpFilter</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>changgou<span class="token punctuation">.</span>system<span class="token punctuation">.</span>filter</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span><span class="token class-name">GatewayFilterChain</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span><span class="token class-name">GlobalFilter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">Ordered</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ServerWebExchange</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Mono</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">InetSocketAddress</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 获取客户端的访问ip
 * */</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IpFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GlobalFilter</span><span class="token punctuation">,</span> <span class="token class-name">Ordered</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 具体业务逻辑
     * */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取客户端的访问ip</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;经过了第一个过滤器&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">InetSocketAddress</span> remoteAddress <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRemoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;当前ip：&quot;</span> <span class="token operator">+</span> remoteAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 放行</span>
        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 过滤器的执行优先级
     *  值越小，执行优先级就越高
     * */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>xxx_gateway_system创建UrlFilter</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>changgou<span class="token punctuation">.</span>system<span class="token punctuation">.</span>filter</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span><span class="token class-name">GatewayFilterChain</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span><span class="token class-name">GlobalFilter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">Ordered</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">RequestPath</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ServerWebExchange</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Mono</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 获取客户端的url
 * */</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UrlFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GlobalFilter</span><span class="token punctuation">,</span> <span class="token class-name">Ordered</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;经过了第二个过滤器&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">RequestPath</span> path <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;path：&quot;</span> <span class="token operator">+</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-网关限流" tabindex="-1"><a class="header-anchor" href="#_2-网关限流" aria-hidden="true">#</a> 2. 网关限流</h2><p>网关可以做很多的事情，比如，限流，当我们的系统被频繁的请求 的时候，就有可能将系统压垮，所以为了解决这个问题，需要在每一个微服务中做限流 操作，但是如果有了网关，那么就可以在网关系统做限流，因为所有的请求都需要先通 过网关系统才能路由到微服务中。</p><h3 id="_2-1-思路分析" tabindex="-1"><a class="header-anchor" href="#_2-1-思路分析" aria-hidden="true">#</a> 2.1 思路分析</h3>`,12),j=["src"],S=n("h3",{id:"_2-2-令牌桶算法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-2-令牌桶算法","aria-hidden":"true"},"#"),s(" 2.2 令牌桶算法")],-1),T=n("p",null,"令牌桶算法是比较常见的限流算法之一，大概描述如下： 1）所有的请求在处理之前都需要拿到一个可用的令牌才会被处理； 2）根据限流大小，设置按照一定的速率往桶里添加令牌； 3）桶设置最大的放置令牌限制，当桶满时、新添加的令牌就被丢弃或者拒绝； 4）请求达到后首先要获取令牌桶中的令牌，拿着令牌才可以进行其他的业务逻辑，处理 完业务逻辑之后，将令牌直接删除； 5）令牌桶有最低限额，当桶中的令牌达到最低限额的时候，请求处理完之后将不会删除 令牌，以此保证足够的限流",-1),O=["src"],C=a(`<p>这个算法的实现，有很多技术，Guava(读音: 瓜哇)是其中之一，redis客户端也有其实 现。</p><h3 id="_2-3-网关限流代码实现-redis" tabindex="-1"><a class="header-anchor" href="#_2-3-网关限流代码实现-redis" aria-hidden="true">#</a> 2.3 网关限流代码实现 （Redis）</h3><p>需求：每个ip地址1秒内只能发送1次请求，多出来的请求返回429错误。</p><p>（1）spring cloud gateway 默认使用redis的RateLimter限流算法来实现。所以我们要 使用首先需要引入redis的依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis-reactive<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）定义KeyResolver</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableEurekaClient</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GateWayApplication</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">GateWayApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
    * 生成Bean 给令牌桶使用
    * */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">KeyResolver</span> <span class="token function">ipKeyResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">KeyResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> just <span class="token operator">=</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRemoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> just<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（3）修改application.yml中配置项，指定限制流量的配置以及REDIS的配置，修改后最 终配置如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> sysgateway
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> 192.168.200.128
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> goods
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//goods
          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> Path=/goods/<span class="token important">**</span>
          <span class="token key atrule">filters</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> StripPrefix=1
            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> RequestRateLimiter <span class="token comment">#请求数限流 名字不能随便写</span>
              <span class="token key atrule">args</span><span class="token punctuation">:</span>
                <span class="token key atrule">key-resolver</span><span class="token punctuation">:</span> <span class="token string">&quot;#{@ipKeyResolver}&quot;</span> <span class="token comment">#生成Bean ipKeyResolver</span>
                <span class="token key atrule">redis-rate-limiter.replenishRate</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token comment">#令牌桶每秒填充平均速率</span>
                <span class="token key atrule">redis-rate-limiter.burstCapacity</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token comment">#令牌桶总容量</span>
        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> system
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//system
          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> Path=/system/<span class="token important">**</span>
          <span class="token key atrule">filters</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> StripPrefix=1
      <span class="token key atrule">globalcors</span><span class="token punctuation">:</span>
        <span class="token key atrule">cors-configurations</span><span class="token punctuation">:</span>
          <span class="token key atrule">&#39;[/**]&#39;</span><span class="token punctuation">:</span> <span class="token comment"># 匹配所有请求</span>
            <span class="token key atrule">allowedOrigins</span><span class="token punctuation">:</span> <span class="token string">&quot;*&quot;</span> <span class="token comment">#跨域处理 允许所有的域</span>
            <span class="token key atrule">allowedMethods</span><span class="token punctuation">:</span> <span class="token comment"># 支持的方法</span>
              <span class="token punctuation">-</span> GET
              <span class="token punctuation">-</span> POST
              <span class="token punctuation">-</span> PUT
              <span class="token punctuation">-</span> DELETE

<span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9101</span>

<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>6868/eureka
  <span class="token key atrule">instance</span><span class="token punctuation">:</span>
    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解释：</p><ul><li>burstCapacity：令牌桶总容量。</li><li>replenishRate：令牌桶每秒填充平均速率。</li><li>key-resolver：用于限流的键的解析器的 Bean 对象的名字。它使用 SpEL 表达式根 据#{@beanName}从 Spring 容器中获取 Bean 对象。</li></ul><p>通过在 replenishRate 和中设置相同的值来实现稳定的速率 burstCapacity 。设 置 burstCapacity 高于时，可以允许临时突发 replenishRate 。在这种情况下，需要在 突发之间允许速率限制器一段时间（根据 replenishRate ），因为2次连续突发将导致请 求被丢弃（ HTTP 429 ‐ Too Many Requests ）</p><p>key-resolver: &quot;#{@userKeyResolver}&quot; 用于通过SPEL表达式来指定使用哪一个 KeyResolver.</p><p>如上配置： 表示 一秒内，允许 一个请求通过，令牌桶的填充速率也是一秒钟添加一个令牌。 最大突发状况 也只允许 一秒内有一次请求，可以根据业务来调整。</p><h2 id="_3-bcrypt密码加密" tabindex="-1"><a class="header-anchor" href="#_3-bcrypt密码加密" aria-hidden="true">#</a> 3. BCrypt密码加密</h2><h3 id="_3-1-bcrypt快速入门" tabindex="-1"><a class="header-anchor" href="#_3-1-bcrypt快速入门" aria-hidden="true">#</a> 3.1 BCrypt快速入门</h3><p>在用户模块，对于用户密码的保护，通常都会进行加密。我们通常对密码进行加 密，然后存放在数据库中，在用户进行登录的时候，将其输入的密码进行加密然后与数 据库中存放的密文进行比较，以验证用户密码是否正确。 目前，MD5和BCrypt比较流 行。相对来说，BCrypt比MD5更安全。因为其内部引入的加盐机制</p>`,17),E={href:"http://www.mindrot.org/projects/jBCrypt/",target:"_blank",rel:"noopener noreferrer"},M=a(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token annotation punctuation">@Test</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token doc-comment comment">/***
      * 得到盐
      * 盐是一个随机生成的含有29个字符的字符串,并且会与密码一起合并进行最终 的密文生成
      * 并且每一次生成的盐的值都是不同的
      * */</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 获取盐</span>
          <span class="token class-name">String</span> gensalt <span class="token operator">=</span> <span class="token class-name">BCrypt</span><span class="token punctuation">.</span><span class="token function">gensalt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">// 基于当前的盐对密码进行加密</span>
          <span class="token class-name">String</span> hashpw <span class="token operator">=</span> <span class="token class-name">BCrypt</span><span class="token punctuation">.</span><span class="token function">hashpw</span><span class="token punctuation">(</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">,</span> gensalt<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;盐：&quot;</span> <span class="token operator">+</span> gensalt<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;密文：&quot;</span> <span class="token operator">+</span> hashpw<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">// 解密</span>
          <span class="token keyword">boolean</span> checkpw <span class="token operator">=</span> <span class="token class-name">BCrypt</span><span class="token punctuation">.</span><span class="token function">checkpw</span><span class="token punctuation">(</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">,</span> hashpw<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>checkpw <span class="token operator">?</span> <span class="token string">&quot;解密成功&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;解密失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-加密算法" tabindex="-1"><a class="header-anchor" href="#_4-加密算法" aria-hidden="true">#</a> 4. 加密算法</h2><h3 id="_4-1-可逆加密算法" tabindex="-1"><a class="header-anchor" href="#_4-1-可逆加密算法" aria-hidden="true">#</a> 4.1.可逆加密算法</h3><p>解释: 加密后, 密文可以反向解密得到密码原文.</p><h3 id="_4-1-1-对称加密" tabindex="-1"><a class="header-anchor" href="#_4-1-1-对称加密" aria-hidden="true">#</a> 4.1.1. 对称加密</h3><p>【文件加密和解密使用相同的密钥，即加密密钥也可以用作解密密钥】 解释: 在对称加密算法中，数据发信方将明文和加密密钥一起经过特殊的加密算法处理 后，使其变成复杂的加密密文发送出去，收信方收到密文后，若想解读出原文，则需要 使用加密时用的密钥以及相同加密算法的逆算法对密文进行解密，才能使其回复成可读 明文。在对称加密算法中，使用的密钥只有一个，收发双方都使用这个密钥，这就需要 解密方事先知道加密密钥。 优点: 对称加密算法的优点是算法公开、计算量小、加密速度快、加密效率高。 缺点: 没有非对称加密安全</p><p>用途： 一般用于保存用户手机号、身份证等敏感但能解密的信息。 常见的对称加密算法有: AES、DES、3DES、Blowfish、IDEA、RC4、RC5、RC6、HS256</p><h3 id="_4-1-2-非对称加密" tabindex="-1"><a class="header-anchor" href="#_4-1-2-非对称加密" aria-hidden="true">#</a> 4.1.2. 非对称加密</h3><p>【两个密钥：公开密钥（publickey）和私有密钥，公有密钥加密，私有密钥解密】 <em>解释:</em> 同时生成两把密钥：私钥和公钥，私钥隐秘保存，公钥可以下发给信任客户端. 加密与解密:</p><ul><li>私钥加密，持有私钥或公钥才可以解密</li><li>公钥加密，持有私钥才可解密</li></ul><p>签名: 私钥签名, 持有公钥进行验证是否被篡改过</p><p><em>优点:</em> 非对称加密与对称加密相比，其安全性更好； 缺点: 非对称加密的缺点是加密和解密花费时间长、速度慢，只适合对少量数据进行加 密。 用途： 一般用于签名和认证。私钥服务器保存, 用来加密, 公钥客户拿着用于对于令牌或 者签名的解密或者校验使用. 常见的非对称加密算法有： RSA、DSA（数字签名用）、ECC（移动设备用）、RS256 (采用 SHA‐256 的 RSA 签名)</p><h3 id="_4-2-不可逆加密算法" tabindex="-1"><a class="header-anchor" href="#_4-2-不可逆加密算法" aria-hidden="true">#</a> 4.2.不可逆加密算法</h3><p>解释: 一旦加密就不能反向解密得到密码原文</p><p>种类: Hash加密算法, 散列算法, 摘要算法等</p><p>用途：一般用于效验下载文件正确性，一般在网站上下载文件都能见到；存储用户敏感 信息，如密码、 卡号等不可解密的信息。</p><p>常见的不可逆加密算法有： MD5、SHA、HMAC</p><h3 id="_4-3-base64编码" tabindex="-1"><a class="header-anchor" href="#_4-3-base64编码" aria-hidden="true">#</a> 4.3.Base64编码</h3><p>Base64是网络上最常见的用于传输8Bit字节代码的编码方式之一。Base64编码可用于在 HTTP环境下传递较长的标识信息。采用Base64编码解码具有不可读性，即所编码的数据 不会被人用肉眼所直接看到。注意：Base64只是一种编码方式，不算加密方法。</p>`,19),B={href:"http://www.jsons.cn/img2base64/",target:"_blank",rel:"noopener noreferrer"},R=n("h2",{id:"_5-jwt-实现微服务鉴权",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-jwt-实现微服务鉴权","aria-hidden":"true"},"#"),s(" 5. JWT 实现微服务鉴权")],-1),W=n("h3",{id:"_5-1-什么是微服务鉴权",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-1-什么是微服务鉴权","aria-hidden":"true"},"#"),s(" 5.1 什么是微服务鉴权")],-1),N=n("p",null,"我们之前已经搭建过了网关，使用网关在系统中比较适合进行权限校验。",-1),D=["src"],A=n("p",null,"那么我们可以采用JWT的方式来实现鉴权校验。",-1),G=n("h3",{id:"_5-2-jwt",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-2-jwt","aria-hidden":"true"},"#"),s(" 5.2 JWT")],-1),U=n("p",null,"JSON Web Token（JWT）是一个非常轻巧的规范。这个规范允许我们使用JWT在用户和 服务器之间传递安全可靠的信息。 一个JWT实际上就是一个字符串，它由三部分组成，头部、载荷与签名。",-1),P=a(`<p>头部（Header） 头部用于描述关于该JWT的最基本的信息，例如其类型以及签名所用的算法等。这也可以 被表示成一个JSON对象。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>  <span class="token punctuation">{</span><span class="token property">&quot;typ&quot;</span><span class="token operator">:</span><span class="token string">&quot;JWT&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;alg&quot;</span><span class="token operator">:</span><span class="token string">&quot;HS256&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),L={href:"http://base64.xpcha.com/",target:"_blank",rel:"noopener noreferrer"},H=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,`  eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),F=a(`<li><p>载荷（playload） 载荷就是存放有效信息的地方。 定义一个payload:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>  <span class="token punctuation">{</span><span class="token property">&quot;sub&quot;</span><span class="token operator">:</span><span class="token string">&quot;1234567890&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;John Doe&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;admin&quot;</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后将其进行base64加密，得到Jwt的第二部分。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>  eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>签证（signature） jwt的第三部分是一个签证信息，这个签证信息由三部分组成：</p><ul><li>header (base64后的)</li><li>payload (base64后的)</li><li>secret</li></ul><p>这个部分需要base64加密后的header和base64加密后的payload使用.连接组成的字符 串，然后通过header中声明的加密方式进行加盐secret组合加密，然后就构成了jwt的第 三部分。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>  TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将这三部分用.连接成一个完整的字符串,构成了最终的jwt:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>  eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li>`,2),K=n("h3",{id:"_5-3-jjwt签发与验证token",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-3-jjwt签发与验证token","aria-hidden":"true"},"#"),s(" 5.3 JJWT签发与验证token")],-1),z={href:"https://github.com/jwtk/jjwt",target:"_blank",rel:"noopener noreferrer"},X=a(`<h4 id="_5-3-1-创建token" tabindex="-1"><a class="header-anchor" href="#_5-3-1-创建token" aria-hidden="true">#</a> 5.3.1 创建token</h4><p><strong>（1）新建项目jwtTest中的pom.xml中添加依赖：</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.jsonwebtoken<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jjwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>(2)创建测试类，代码如下</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token class-name">JwtBuilder</span> builder<span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">&quot;888&quot;</span><span class="token punctuation">)</span>   <span class="token comment">//设置唯一编号</span>
    <span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">&quot;小白&quot;</span><span class="token punctuation">)</span><span class="token comment">//设置主题  可以是JSON数据</span>
    <span class="token punctuation">.</span><span class="token function">setIssuedAt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//设置签发日期</span>
    <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span><span class="token class-name">SignatureAlgorithm</span><span class="token punctuation">.</span><span class="token constant">HS256</span><span class="token punctuation">,</span><span class="token string">&quot;ahana&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置签名 使用HS256算法，并设置SecretKey(字符串)</span>
<span class="token comment">//构建 并返回一个字符串 </span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> builder<span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行打印结果：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiI4ODgiLCJzdWIiOiLlsI_nmb0iLCJpYXQiOjE1NTc5M DQxODF9.ThecMfgYjtoys3JX7dpx3hu6pUm0piZ0tXXreFU_u3Y
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>再次运行，会发现每次运行的结果是不一样的，因为我们的载荷中包含了时间。</p><h4 id="_5-3-2解析token" tabindex="-1"><a class="header-anchor" href="#_5-3-2解析token" aria-hidden="true">#</a> 5.3.2解析token</h4><p>我们刚才已经创建了token，在web应用中这个操作是由服务端进行然后发给客户端，客户端在下次向服务端发送请求时需要携带这个token（这就好像是拿着一张门票一样），那服务端接到这个token应该解析出token中的信息（例如用户id）,根据这些信息查询数据库返回相应的结果。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token class-name">String</span> compactJwt <span class="token operator">=</span><span class="token string">&quot;eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiI4ODgiLCJzdWIiOiLlsI_nmb0iLCJpYXQiOjE1NTc5MDQxODF9.ThecMfgYjtoys3JX7dpx3hu6pUm0piZ0tXXreFU_u3Y&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">Claims</span> claims <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span><span class="token string">&quot;ahana&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>compactJwt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行打印效果：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">{</span>jti<span class="token operator">=</span><span class="token number">888</span>, <span class="token assign-left variable">sub</span><span class="token operator">=</span>小白, <span class="token assign-left variable">iat</span><span class="token operator">=</span><span class="token number">1557904181</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>试着将token或签名秘钥篡改一下，会发现运行时就会报错，所以解析token也就是验证token</p><h4 id="_5-3-3设置过期时间" tabindex="-1"><a class="header-anchor" href="#_5-3-3设置过期时间" aria-hidden="true">#</a> 5.3.3设置过期时间</h4><p>有很多时候，我们并不希望签发的token是永久生效的，所以我们可以为token添加一个过期时间。</p><p><strong>（1）创建token 并设置过期时间</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token comment">//当前时间</span>
<span class="token keyword">long</span> currentTimeMillis <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>currentTimeMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">JwtBuilder</span> builder<span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">&quot;888&quot;</span><span class="token punctuation">)</span>   <span class="token comment">//设置唯一编号</span>
    <span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">&quot;小白&quot;</span><span class="token punctuation">)</span><span class="token comment">//设置主题  可以是JSON数据</span>
    <span class="token punctuation">.</span><span class="token function">setIssuedAt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//设置签发日期</span>
    <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span><span class="token class-name">SignatureAlgorithm</span><span class="token punctuation">.</span><span class="token constant">HS256</span><span class="token punctuation">,</span><span class="token string">&quot;itcast&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置签名 使用HS256算法，并设置SecretKey(字符串)</span>
<span class="token comment">//构建 并返回一个字符串</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> builder<span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解释： .setExpiration(date)//用于设置过期时间 ，参数为Date类型数据</p><p><strong>（2）解析TOKEN</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token class-name">String</span> compactJwt<span class="token operator">=</span><span class="token string">&quot;eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiI4ODgiLCJzdWIiOiLlsI_nmb0iLCJpYXQiOjE1NTc5MDUzMDgsImV4cCI6MTU1NzkwNTMwOH0.4q5AaTyBRf8SB9B3Tl‐I53PrILGyicJC3fgR3gWbvUI&quot;</span><span class="token punctuation">;</span>

<span class="token class-name">Claims</span> claims <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span><span class="token string">&quot;itcast&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>compactJwt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打印效果：</p>`,22),Y=["src"],Q=a(`<p>当前时间超过过期时间，则会报错。</p><h4 id="_5-3-4-自定义claims" tabindex="-1"><a class="header-anchor" href="#_5-3-4-自定义claims" aria-hidden="true">#</a> 5.3.4 自定义claims</h4><p>我们刚才的例子只是存储了id和subject两个信息，如果你想存储更多的信息（例如角 色）可以定义自定义claims。</p><p>创建测试类，并设置测试方法：</p><p>创建token:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createJWT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//当前时间</span>
    <span class="token keyword">long</span> currentTimeMillis <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    currentTimeMillis<span class="token operator">+=</span><span class="token number">1000000L</span><span class="token punctuation">;</span>
    <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>currentTimeMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">JwtBuilder</span> builder<span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">&quot;888&quot;</span><span class="token punctuation">)</span>   <span class="token comment">//设置唯一编号</span>
        <span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">&quot;小白&quot;</span><span class="token punctuation">)</span><span class="token comment">//设置主题  可以是JSON数据</span>
        <span class="token punctuation">.</span><span class="token function">setIssuedAt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//设置签发日期</span>
        <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token comment">//设置过期时间</span>
        <span class="token punctuation">.</span><span class="token function">claim</span><span class="token punctuation">(</span><span class="token string">&quot;roles&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span><span class="token comment">//设置角色</span>
        <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span><span class="token class-name">SignatureAlgorithm</span><span class="token punctuation">.</span><span class="token constant">HS256</span><span class="token punctuation">,</span><span class="token string">&quot;itcast&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置签名 使用HS256算法，并设置SecretKey(字符串)</span>
    <span class="token comment">//构建 并返回一个字符串</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> builder<span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行打印效果：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiI4ODgiLCJzdWIiOiLlsI_nmb0iLCJpYXQiOjE1NTc5M DU4MDIsImV4cCI6MTU1NzkwNjgwMiwicm9sZXMiOiJhZG1pbiJ9.AS5Y2fNCwUzQQxXh_QQWMp aB75YqfuK‐2P7VZiCXEJI
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>解析TOKEN:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parseJWT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">String</span> compactJwt<span class="token operator">=</span><span class="token string">&quot;eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiI4ODgiLCJzdWIiOiLlsI_nmb0iLCJpYXQiOjE1NTc5MDU4MDIsImV4cCI6MTU1NzkwNjgwMiwicm9sZXMiOiJhZG1pbiJ9.AS5Y2fNCwUzQQxXh_QQWMpaB75YqfuK‐2P7VZiCXEJI&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">Claims</span> claims <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span><span class="token string">&quot;itcast&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>compactJwt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),V=["src"],Z=n("strong",null,"鉴权逻辑图",-1),$=["src"],nn=n("ol",null,[n("li",null,"用户进入网关开始登陆，网关过滤器进行判断，如果是登录，则路由到后台管理微服务进行登录"),n("li",null,"用户登录成功，后台管理微服务签发JWT TOKEN信息返回给用户"),n("li",null,"用户再次进入网关开始访问，网关过滤器接收用户携带的TOKEN"),n("li",null,"网关过滤器解析TOKEN ，判断是否有权限，如果有，则放行，如果没有则返回未认证错误")],-1);function sn(t,an){const e=o("ExternalLinkIcon");return l(),i("div",null,[r,n("p",null,[s("网关是介于客户端和服务器端之间的中间层，所有的外部请求都会先经过 网关这一层。 也就是说，API 的实现方面更多的考虑业务逻辑，而安全、性能、监控可以交由 网关来 做，这样既提高业务灵活性又不缺安全性，典型的架构图如图所示： "),n("img",{src:t.$withBase("/javaUtils/04.png"),alt:"foo"},null,8,k)]),d,m,v,b,n("ul",null,[n("li",null,[s("nginx Nginx (engine x) 是一个高性能的"),n("a",g,[s("HTTP"),p(e)]),s("和"),n("a",h,[s("反向代理"),p(e)]),s("web服务器，同时也提供 了IMAP/POP3/SMTP服务")]),y,f]),n("p",null,[n("a",w,[s("gateway官网"),p(e)])]),_,n("p",null,[s("由于我们开发的系统 有包括前台系统和后台系统，后台的系统给管理员使用。那么 也需要调用各种微服务，所以我们针对管理后台搭建一个网关微服务。分析如下： "),n("img",{src:t.$withBase("/javaUtils/05.png"),alt:"foo"},null,8,x)]),q,n("p",null,[n("a",J,[s("微服务网关参考手册"),p(e)])]),I,n("img",{src:t.$withBase("/javaUtils/06.png"),alt:"foo"},null,8,j),S,T,n("img",{src:t.$withBase("/javaUtils/07.png"),alt:"foo"},null,8,O),C,n("p",null,[n("a",E,[s("BCrypt 官网"),p(e)])]),M,n("p",null,[n("a",B,[s("在线编码工具"),p(e)])]),R,W,N,n("img",{src:t.$withBase("/javaUtils/08.png"),alt:"foo"},null,8,D),A,G,U,n("ul",null,[n("li",null,[P,n("p",null,[s("在头部指明了签名算法是HS256算法。 我们进行BASE64编码"),n("a",L,[s("http://base64.xpcha.com/"),p(e)]),s("，编码后的字符串如下：")]),H]),F]),K,n("p",null,[s("JJWT是一个提供端到端的JWT创建和验证的Java库。永远免费和开源(Apache License， 版本2.0)，JJWT很容易使用和理解。它被设计成一个以建筑为中心的流畅界面，隐藏了它 的大部分复杂性。 官方文档： "),n("a",z,[s("https://github.com/jwtk/jjwt"),p(e)])]),X,n("img",{src:t.$withBase("/javaUtils/09.png"),alt:"foo"},null,8,Y),Q,n("p",null,[s("运行效果： "),n("img",{src:t.$withBase("/javaUtils/10.png"),alt:"foo"},null,8,V)]),n("p",null,[Z,n("img",{src:t.$withBase("/javaUtils/11.png"),alt:"foo"},null,8,$)]),nn])}const en=c(u,[["render",sn],["__file","微服务网关限流_鉴权.html.vue"]]);export{en as default};
