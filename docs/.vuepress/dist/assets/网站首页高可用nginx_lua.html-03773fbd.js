import{_ as o,M as l,p,q as c,R as n,t as s,N as i,a1 as e}from"./framework-5866ffd3.js";const u={},r=e('<h1 id="网站首页高可用nginx-lua" tabindex="-1"><a class="header-anchor" href="#网站首页高可用nginx-lua" aria-hidden="true">#</a> 网站首页高可用nginx+lua</h1><h2 id="_1-lua介绍" tabindex="-1"><a class="header-anchor" href="#_1-lua介绍" aria-hidden="true">#</a> 1 Lua介绍</h2><h3 id="_1-1-lua是什么" tabindex="-1"><a class="header-anchor" href="#_1-1-lua是什么" aria-hidden="true">#</a> 1.1 lua是什么</h3>',3),d={href:"https://baike.baidu.com/item/%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80",target:"_blank",rel:"noopener noreferrer"},v=e(`<p>Lua 是一种轻量小巧的脚本语言，用标准C语言编写并以源代码形式开放， 其设计目 的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。</p><p><strong>lua 语言具有以下特性</strong></p><ul><li>支持面向过程(procedure-oriented)编程和函数式编程(functional programming)；</li><li>自动内存管理；只提供了一种通用类型的表（table），用它可以实现数组，哈希 表，集合，对象；</li><li>语言内置模式匹配；闭包(closure)；函数也可以看做一个值；提供多线程（协同进 程，并非操作系统所支持的线程）支持；</li><li>通过闭包和table可以很方便地支持面向对象编程所需要的一些关键机制，比如数据 抽象，虚函数，继承和重载等。</li></ul><p><strong>应用场景</strong></p><ul><li>游戏开发</li><li>独立应用脚本</li><li>Web 应用脚本</li><li>扩展和数据库插件如：MySQL Proxy 和 MySQL WorkBench</li><li>安全系统，如入侵检测系统</li><li>redis中嵌套调用实现类似事务的功能</li><li>web容器中应用处理一些过滤 缓存等等的逻辑，例如nginx。</li></ul><h3 id="_1-2-lua的安装" tabindex="-1"><a class="header-anchor" href="#_1-2-lua的安装" aria-hidden="true">#</a> 1.2 lua的安装</h3><p>有linux版本的安装也有mac版本的安装。。我们采用linux版本的安装，首先我们准备一 个linux虚拟机。 安装步骤,在linux系统中执行下面的命令。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> ‐y gcc
yum <span class="token function">install</span> libtermcap‐devel ncurses‐devel libevent‐devel readline‐devel <span class="token function">curl</span> ‐R ‐O http://www.lua.org/ftp/lua‐5.3.5.tar.gz
<span class="token function">tar</span> ‐zxf lua‐5.3.5.tar.gz
<span class="token builtin class-name">cd</span> lua‐5.3.5
<span class="token function">make</span> linux <span class="token builtin class-name">test</span>
<span class="token function">make</span> <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-快速入门" tabindex="-1"><a class="header-anchor" href="#_1-3-快速入门" aria-hidden="true">#</a> 1.3 快速入门</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>lua

print<span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment"># 输出为 hello</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4-lua的基本语法" tabindex="-1"><a class="header-anchor" href="#_1-4-lua的基本语法" aria-hidden="true">#</a> 1.4 LUA的基本语法</h3><ul><li>lua有交互式编程和脚本式编程。</li><li>交互式编程就是直接输入语法，就能执行。</li><li>脚本式编程需要编写脚本文件，然后再执行。</li></ul><p>一般采用脚本式编程。（例如：编写一个hello.lua的文件，输入文件内容，并执行lua hell.lua即可）</p><h4 id="_1-4-1-注释" tabindex="-1"><a class="header-anchor" href="#_1-4-1-注释" aria-hidden="true">#</a> 1.4.1 注释</h4><ul><li>单行注释：两个减号是单行注释:</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>  ‐‐
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>多行注释：</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>‐‐<span class="token string">[[ 
  多行注释 多行注释 
‐‐]]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-4-2-关键字" tabindex="-1"><a class="header-anchor" href="#_1-4-2-关键字" aria-hidden="true">#</a> 1.4.2 关键字</h4><p>关键字就好比java中的 break if else等等一样的效果。lua的关键字如下：</p>`,20),k=["src"],m=e(`<h4 id="_1-4-3-定义变量" tabindex="-1"><a class="header-anchor" href="#_1-4-3-定义变量" aria-hidden="true">#</a> 1.4.3 定义变量</h4><p>全局变量，默认的情况下，定义一个变量都是全局变量， 如果要用局部变量 需要声明为local.例如：</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>‐‐ 全局变量赋值
a<span class="token operator">=</span><span class="token number">1</span> 
‐‐ 局部变量赋值
<span class="token keyword">local</span> b<span class="token operator">=</span><span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果变量没有初始化：则 它的值为nil 这和java中的null不同。</p><h4 id="_1-4-4-lua中的数据类型" tabindex="-1"><a class="header-anchor" href="#_1-4-4-lua中的数据类型" aria-hidden="true">#</a> 1.4.4 Lua中的数据类型</h4><p>Lua 是动态类型语言，变量不要类型定义,只需要为变量赋值。 值可以存储在变量中，作 为参数传递或结果返回。 Lua 中有 8 个基本类型分别为：nil、boolean、number、string、userdata、 function、thread 和 table。</p>`,6),b=["src"],h=e(`<h4 id="_1-4-5-流程控制" tabindex="-1"><a class="header-anchor" href="#_1-4-5-流程控制" aria-hidden="true">#</a> 1.4.5 流程控制</h4><p>如下：类似于if else</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>‐‐<span class="token punctuation">[</span> <span class="token number">0</span> 为 <span class="token keyword">true</span> <span class="token punctuation">]</span> 
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">then</span> 
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;0 为 true&quot;</span><span class="token punctuation">)</span> 
<span class="token keyword">else</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;0 不为true&quot;</span><span class="token punctuation">)</span> 
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-4-6-函数" tabindex="-1"><a class="header-anchor" href="#_1-4-6-函数" aria-hidden="true">#</a> 1.4.6 函数</h4><p>lua中也可以定义函数，类似于java中的方法。例如：</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code> ‐‐<span class="token string">[[ 函数返回两个值的最大值 ‐‐]]</span>
<span class="token keyword">function</span> <span class="token function">max</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>num1 <span class="token operator">&gt;</span> num2<span class="token punctuation">)</span> <span class="token keyword">then</span>
      result <span class="token operator">=</span> num1<span class="token punctuation">;</span>
   <span class="token keyword">else</span>
      result <span class="token operator">=</span> num2<span class="token punctuation">;</span>
   <span class="token keyword">end</span>
   <span class="token keyword">return</span> result<span class="token punctuation">;</span> 
<span class="token keyword">end</span>
‐‐ 调用函数
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;两值比较最大值为 &quot;</span><span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;两值比较最大值为 &quot;</span><span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行之后的结果：</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>两值比较最大值为 <span class="token number">10</span>
两值比较最大值为 <span class="token number">6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-4-7-require-函数" tabindex="-1"><a class="header-anchor" href="#_1-4-7-require-函数" aria-hidden="true">#</a> 1.4.7 require 函数</h4><p>require 用于 引入其他的模块，类似于java中的类要引用别的类的效果。 用法：</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>  require <span class="token string">&quot;&lt;模块名&gt;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_2-nginx-lua-redis实现广告缓存" tabindex="-1"><a class="header-anchor" href="#_2-nginx-lua-redis实现广告缓存" aria-hidden="true">#</a> 2.nginx+lua+redis实现广告缓存</h2><h3 id="_2-2-openresty" tabindex="-1"><a class="header-anchor" href="#_2-2-openresty" aria-hidden="true">#</a> 2.2 OpenResty</h3><h4 id="_2-2-1-openresty介绍" tabindex="-1"><a class="header-anchor" href="#_2-2-1-openresty介绍" aria-hidden="true">#</a> 2.2.1 OpenResty介绍</h4><p>OpenResty(又称：ngx_openresty) 是一个基于 NGINX 的可伸缩的 Web 平台，由中国 人章亦春发起，提供了很多高质量的第三方模块。 OpenResty 是一个强大的 Web 应用服务器，Web 开发人员可以使用 Lua 脚本语言调动 Nginx 支持的各种 C 以及 Lua 模块,更主要的是在性能方面，OpenResty可以 快速构造出 足以胜任 10K 乃至1000K以上并发连接响应的超高性能 Web 应用系统。 360，UPYUN，阿里云，新浪，腾讯网，去哪儿网，酷狗音乐等都是 OpenResty 的深度 用户。 OpenResty 简单理解，就相当于封装了nginx,并且集成了LUA脚本，开发人员只需要简 单的其提供了模块就可以实现相关的逻辑，而不再像之前，还需要在nginx中自己编写 lua的脚本，再进行调用了。</p><h4 id="_2-2-2-openresty安装" tabindex="-1"><a class="header-anchor" href="#_2-2-2-openresty安装" aria-hidden="true">#</a> 2.2.2 OpenResty安装</h4><p>linux安装openresty:</p><ul><li>1.添加仓库执行命令</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> yum‐utils
yum‐config‐manager ‐‐add‐repo https://openresty.org/package/centos/openresty.repo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>2.执行安装</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> openresty
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>3.安装成功后会在默认的目录如下：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> /usr/local/openresty
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-2-3安装nginx" tabindex="-1"><a class="header-anchor" href="#_2-2-3安装nginx" aria-hidden="true">#</a> 2.2.3安装nginx</h4><p>默认已经安装好了nginx,在目录：/usr/local/openresty/nginx下。 修改/usr/local/openresty/nginx/conf/nginx.conf,将配置文件使用的根设置为root,目的就是将来要使用lua脚本的时候，直接可以加载在root下的lua脚本。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#user nobody; 配置文件第一行原来为这样, 现改为下面的配置</span>
user root root<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,26),g={href:"http://192.168.200.128",target:"_blank",rel:"noopener noreferrer"},_=["src"],f=n("h3",{id:"_2-3-实现思路",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-3-实现思路","aria-hidden":"true"},"#"),s(" 2.3 实现思路")],-1),y=n("h4",{id:"_2-3-1-表结构分析",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-3-1-表结构分析","aria-hidden":"true"},"#"),s(" 2.3.1 表结构分析")],-1),x=["src"],q=n("h4",{id:"_2-3-2-缓存预热与二级缓存查询",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-3-2-缓存预热与二级缓存查询","aria-hidden":"true"},"#"),s(" 2.3.2 缓存预热与二级缓存查询")],-1),w=["src"],j=["src"],L=e(`<h3 id="_2-4-代码实现" tabindex="-1"><a class="header-anchor" href="#_2-4-代码实现" aria-hidden="true">#</a> 2.4 代码实现</h3><h4 id="_2-4-1缓存预热" tabindex="-1"><a class="header-anchor" href="#_2-4-1缓存预热" aria-hidden="true">#</a> 2.4.1缓存预热</h4><p>实现思路： 定义请求：用于查询数据库中的数据更新到redis中。 （1）连接mysql ，按照广告分类ID读取广告列表，转换为json字符串。 （2）连接redis，将广告列表json字符串存入redis 。</p><p>定义请求：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>请求： /ad_update 
参数： position ‐‐指定广告位置 
返回值： json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在/root/lua目录下创建ad_load.lua ，实现连接mysql 查询数据 并存储到redis中。</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>ngx<span class="token punctuation">.</span>header<span class="token punctuation">.</span>content_type<span class="token operator">=</span><span class="token string">&quot;application/json;charset=utf8&quot;</span>
<span class="token keyword">local</span> cjson <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;cjson&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">local</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;resty.mysql&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">local</span> uri_args <span class="token operator">=</span> ngx<span class="token punctuation">.</span>req<span class="token punctuation">.</span><span class="token function">get_uri_args</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">local</span> position <span class="token operator">=</span> uri_args<span class="token punctuation">[</span><span class="token string">&quot;position&quot;</span><span class="token punctuation">]</span>

<span class="token keyword">local</span> db <span class="token operator">=</span> mysql<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
db<span class="token punctuation">:</span><span class="token function">set_timeout</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>  
<span class="token keyword">local</span> props <span class="token operator">=</span> <span class="token punctuation">{</span>
    host <span class="token operator">=</span> <span class="token string">&quot;192.168.200.128&quot;</span><span class="token punctuation">,</span>
    port <span class="token operator">=</span> <span class="token number">3306</span><span class="token punctuation">,</span>
    database <span class="token operator">=</span> <span class="token string">&quot;changgou_business&quot;</span><span class="token punctuation">,</span>
    user <span class="token operator">=</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span>
    password <span class="token operator">=</span> <span class="token string">&quot;root&quot;</span>
<span class="token punctuation">}</span>

<span class="token keyword">local</span> res <span class="token operator">=</span> db<span class="token punctuation">:</span><span class="token function">connect</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>  
<span class="token keyword">local</span> select_sql <span class="token operator">=</span> <span class="token string">&quot;select url,image from tb_ad where status =&#39;1&#39; and position=&#39;&quot;</span><span class="token operator">..</span>position<span class="token operator">..</span><span class="token string">&quot;&#39; and start_time&lt;= NOW() AND end_time&gt;= NOW()&quot;</span>  
res <span class="token operator">=</span> db<span class="token punctuation">:</span><span class="token function">query</span><span class="token punctuation">(</span>select_sql<span class="token punctuation">)</span>  
db<span class="token punctuation">:</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">local</span> redis <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;resty.redis&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">local</span> red <span class="token operator">=</span> redis<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
red<span class="token punctuation">:</span><span class="token function">set_timeout</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span>

<span class="token keyword">local</span> ip <span class="token operator">=</span><span class="token string">&quot;192.168.200.128&quot;</span>
<span class="token keyword">local</span> port <span class="token operator">=</span> <span class="token number">6379</span>
red<span class="token punctuation">:</span><span class="token function">connect</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span>port<span class="token punctuation">)</span>

red<span class="token punctuation">:</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;ad_&quot;</span><span class="token operator">..</span>position<span class="token punctuation">,</span>cjson<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>
red<span class="token punctuation">:</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

ngx<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">&quot;{flag:true}&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改/usr/local/openresty/nginx/conf/nginx.conf文件： 代码如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#user  nobody;</span>
user root root<span class="token punctuation">;</span>
worker_processes  <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token comment">#error_log  logs/error.log;</span>
<span class="token comment">#error_log  logs/error.log  notice;#error_log  logs/error.log  info;</span>
<span class="token comment">#pid        logs/nginx.pid;</span>

events <span class="token punctuation">{</span>
    worker_connections  <span class="token number">1024</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

http <span class="token punctuation">{</span>
    include       mime.types<span class="token punctuation">;</span>
    default_type  application/octet‐stream<span class="token punctuation">;</span>    sendfile        on<span class="token punctuation">;</span>
    <span class="token comment">#tcp_nopush     on;</span>
    <span class="token comment">#keepalive_timeout  0;</span>
    keepalive_timeout  <span class="token number">65</span><span class="token punctuation">;</span>
    <span class="token comment">#gzip  on;</span>
    server <span class="token punctuation">{</span>
        listen       <span class="token number">80</span><span class="token punctuation">;</span>
        server_name  localhost<span class="token punctuation">;</span>
        charset utf‐8<span class="token punctuation">;</span>
        <span class="token comment">#access_log  logs/host.access.log  main;</span>
        <span class="token comment"># 添加</span>
        location /ad_update <span class="token punctuation">{</span>
            content_by_lua_file /root/lua/ad_update.lua<span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        
        <span class="token comment"># redirect server error pages to the static page /50x.html         #</span>
        error_page   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  /50x.html<span class="token punctuation">;</span>
        location <span class="token operator">=</span> /50x.html <span class="token punctuation">{</span>
              root   html<span class="token punctuation">;</span>
          <span class="token punctuation">}</span>            
      <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),$={href:"http://192.168.200.128/ad_update?position=web_index_lb",target:"_blank",rel:"noopener noreferrer"},R=e(`<h4 id="_2-4-2广告缓存读取" tabindex="-1"><a class="header-anchor" href="#_2-4-2广告缓存读取" aria-hidden="true">#</a> 2.4.2广告缓存读取</h4><p>实现思路： 通过lua脚本直接从redis中获取数据即可。 定义请求：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>请求:/ad_read
参数：position
返回值：json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在/root/lua目录下创建ad_read.lua</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>ngx<span class="token punctuation">.</span>header<span class="token punctuation">.</span>content_type<span class="token operator">=</span><span class="token string">&quot;application/json;charset=utf8&quot;</span>
<span class="token keyword">local</span> uri_args <span class="token operator">=</span> ngx<span class="token punctuation">.</span>req<span class="token punctuation">.</span><span class="token function">get_uri_args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">local</span> position <span class="token operator">=</span> uri_args<span class="token punctuation">[</span><span class="token string">&quot;position&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">local</span> redis <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;resty.redis&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">local</span> red <span class="token operator">=</span> redis<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
red<span class="token punctuation">:</span><span class="token function">set_timeout</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span>
<span class="token keyword">local</span> ok<span class="token punctuation">,</span> err <span class="token operator">=</span> red<span class="token punctuation">:</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">&quot;192.168.200.128&quot;</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span>
<span class="token keyword">local</span> rescontent<span class="token operator">=</span>red<span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;ad_&quot;</span><span class="token operator">..</span>position<span class="token punctuation">)</span>
ngx<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span>rescontent<span class="token punctuation">)</span>
red<span class="token punctuation">:</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在/usr/local/openresty/nginx/conf/nginx.conf中server下添加配置</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>location /ad_read <span class="token punctuation">{</span>
  content_by_lua_file /root/lua/ad_read.lua<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),z={href:"http://192.168.200.128/ad_read?position=web_index_lb",target:"_blank",rel:"noopener noreferrer"},B=e(`<div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token property">&quot;url&quot;</span><span class="token operator">:</span><span class="token string">&quot;img\\/banner1.jpg&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;image&quot;</span><span class="token operator">:</span><span class="token string">&quot;img\\/banner1.jpg&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">{</span><span class="token property">&quot;url&quot;</span><span class="token operator">:</span><span class="token string">&quot;img\\/banner2.jpg&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;image&quot;</span><span class="token operator">:</span><span class="token string">&quot;img\\/banner2.jpg&quot;</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-4-3二级缓存-加入openresty本地缓存" tabindex="-1"><a class="header-anchor" href="#_2-4-3二级缓存-加入openresty本地缓存" aria-hidden="true">#</a> 2.4.3二级缓存-加入openresty本地缓存</h4><p>如上的方式没有问题，但是如果请求都到redis，redis压力也很大，所以我们一般采用多级缓存的方式来减少下游系统的服务压力。 先查询openresty本地缓存如果没有再查询redis中的数据</p><ul><li>修改/root/lua目录下ad_read文件,内容如下:</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>ngx<span class="token punctuation">.</span>header<span class="token punctuation">.</span>content_type<span class="token operator">=</span><span class="token string">&quot;application/json;charset=utf8&quot;</span>
<span class="token keyword">local</span> uri_args <span class="token operator">=</span> ngx<span class="token punctuation">.</span>req<span class="token punctuation">.</span><span class="token function">get_uri_args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">local</span> position <span class="token operator">=</span> uri_args<span class="token punctuation">[</span><span class="token string">&quot;position&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">local</span> cache_ngx <span class="token operator">=</span> ngx<span class="token punctuation">.</span>shared<span class="token punctuation">.</span>dis_cache<span class="token punctuation">;</span>
<span class="token keyword">local</span> adCache <span class="token operator">=</span> cache_ngx<span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;ad_cache_&#39;</span><span class="token operator">..</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> adCache <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token keyword">or</span> adCache <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">then</span>
    <span class="token keyword">local</span> redis <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;resty.redis&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">local</span> red <span class="token operator">=</span> redis<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    red<span class="token punctuation">:</span><span class="token function">set_timeout</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span>
    <span class="token keyword">local</span> ok<span class="token punctuation">,</span> err <span class="token operator">=</span> red<span class="token punctuation">:</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">&quot;192.168.200.128&quot;</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span>
    <span class="token keyword">local</span> rescontent<span class="token operator">=</span>red<span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;ad_&quot;</span><span class="token operator">..</span>position<span class="token punctuation">)</span>
    ngx<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span>rescontent<span class="token punctuation">)</span>
    red<span class="token punctuation">:</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    cache_ngx<span class="token punctuation">:</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;ad_cache_&#39;</span><span class="token operator">..</span>position<span class="token punctuation">,</span> rescontent<span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">else</span>
    ngx<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span>adCache<span class="token punctuation">)</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>修改nginx配置文件vi/usr/local/openresty/nginx/conf/nginx.conf，http节点下添加配置:</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#包含redis初始化模块</span>
lua_shared_dict dis_cache 5m<span class="token punctuation">;</span>  <span class="token comment">#共享内存开启</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-nginx限流" tabindex="-1"><a class="header-anchor" href="#_3-nginx限流" aria-hidden="true">#</a> 3. nginx限流</h2><p>一般情况下，首页的并发量是比较大的，即使有了多级缓存，如果有大量恶意的请求，也会对系统造成影响。而限流就是保护措施之一。</p><ul><li>nginx提供两种限流的方式： <ul><li>一是控制速率</li><li>二是控制并发连接数</li></ul></li></ul><h3 id="_3-1控制速率" tabindex="-1"><a class="header-anchor" href="#_3-1控制速率" aria-hidden="true">#</a> 3.1控制速率</h3><p>控制速率的方式之一就是采用漏桶算法。</p><h4 id="_3-1-1漏桶算法实现控制速率限流" tabindex="-1"><a class="header-anchor" href="#_3-1-1漏桶算法实现控制速率限流" aria-hidden="true">#</a> 3.1.1漏桶算法实现控制速率限流</h4>`,13),U=["src"],N=["src"],C=e(`<p>修改/usr/local/openresty/nginx/conf/nginx.conf:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#user  nobody;</span>
user root root<span class="token punctuation">;</span>
worker_processes  <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">#error_log  logs/error.log;</span>
<span class="token comment">#error_log  logs/error.log  notice;#error_log  logs/error.log  info;</span>
<span class="token comment">#pid        logs/nginx.pid;</span>

events <span class="token punctuation">{</span>
    worker_connections  <span class="token number">1024</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

http <span class="token punctuation">{</span>
    include       mime.types<span class="token punctuation">;</span>
    default_type  application/octet‐stream<span class="token punctuation">;</span>

    sendfile        on<span class="token punctuation">;</span>
    <span class="token comment">#tcp_nopush     on;</span>
    <span class="token comment">#keepalive_timeout  0;</span>
    keepalive_timeout  <span class="token number">65</span><span class="token punctuation">;</span>
    <span class="token comment">#gzip  on;</span>
    
    limit_req_zone <span class="token variable">$binary_remote_addr</span> <span class="token assign-left variable">zone</span><span class="token operator">=</span>myRateLimit:10m <span class="token assign-left variable">rate</span><span class="token operator">=</span>2r/s<span class="token punctuation">;</span>
    server <span class="token punctuation">{</span>  
        listen       <span class="token number">8081</span><span class="token punctuation">;</span>
        server_name  localhost<span class="token punctuation">;</span>
        charset utf‐8<span class="token punctuation">;</span>
        location / <span class="token punctuation">{</span>
            limit_req <span class="token assign-left variable">zone</span><span class="token operator">=</span>myRateLimit<span class="token punctuation">;</span>
            root   html<span class="token punctuation">;</span>
            index  index.html index.htm<span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解释：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>binary_remote_addr 是一种key，表示基于 remote_addr<span class="token punctuation">(</span>客户端IP<span class="token punctuation">)</span> 来做限流，binary_ 的目的是压缩内存占用量。 
zone：定义共享内存区来存储访问信息， myRateLimit:10m 表示一个大小为10M，名字为myRateLimit的内存区域。1M能存储16000 IP地址的访问信息，10M可以存储16W IP地址访问信息。 
rate 用于设置最大访问速率，rate<span class="token operator">=</span>10r/s 表示每秒最多处理10个请求。Nginx 实际上以毫秒为粒度来跟踪请求信息，因此 10r/s 实际上是限制：每100毫秒处理一个请求。这意味着，自上一个请求处理完后，若后续100毫秒内又有请求到达，将拒绝处理该请求.我们这里设置成2 方便测试。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试：重新加载配置文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /usr/local/openresty/nginx/sbin

./nginx ‐s reload
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),O=["src"],W=e(`<h4 id="_3-1-2处理突发流量" tabindex="-1"><a class="header-anchor" href="#_3-1-2处理突发流量" aria-hidden="true">#</a> 3.1.2处理突发流量</h4><p>上面例子限制2r/s，如果有时正常流量突然增大，超出的请求将被拒绝，无法处理突发流量，可以结合burst参数使用来解决该问题。 例如，如下配置表示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> server <span class="token punctuation">{</span>
    location / <span class="token punctuation">{</span>
        limit_req <span class="token assign-left variable">zone</span><span class="token operator">=</span>myRateLimit <span class="token assign-left variable">burst</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>        root   html<span class="token punctuation">;</span>
        index  index.html index.htm<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>burst译为突发、爆发，表示在超过设定的处理速率后能额外处理的请求数,当rate=2r/s 时，将1s拆成2份，即每500ms可处理1个请求。 此处，<em>burst=5</em>，若同时有6个请求到达，Nginx会处理第一个请求，剩余5个请求将放入队列，然后每隔500ms从队列中获取一个请求进行处理。若请求数大于6，将拒绝处理多余的请求，直接返回503. 不过，单独使用burst参数并不实用。假设burst=50，rate为10r/s，排队中的50个请求虽然每100ms会处理一个，但第50个请求却需要等待50*100ms即5s，这么长的处理时间自然难以接受。</p><p>因此，burst往往结合nodelay一起使用。</p><p>例如：如下配置：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>server <span class="token punctuation">{</span>
    location / <span class="token punctuation">{</span>
        limit_req <span class="token assign-left variable">zone</span><span class="token operator">=</span>myRateLimit <span class="token assign-left variable">burst</span><span class="token operator">=</span><span class="token number">5</span> nodelay<span class="token punctuation">;</span>        root   html<span class="token punctuation">;</span>
        index  index.html index.htm<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上表示： 处理突发5个请求的时候，没有延迟，等到完成之后，按照正常的速率处理。 如上两种配置结合就达到了速率稳定，但突然流量也能正常处理的效果。配置代码如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#user  nobody;</span>
user root root<span class="token punctuation">;</span>
worker_processes  <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">#error_log  logs/error.log;</span>
<span class="token comment">#error_log  logs/error.log  notice;#error_log  logs/error.log  info;</span>
<span class="token comment">#pid        logs/nginx.pid;</span>

events <span class="token punctuation">{</span>
    worker_connections  <span class="token number">1024</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

http <span class="token punctuation">{</span>
    include       mime.types<span class="token punctuation">;</span>
    default_type  application/octet‐stream<span class="token punctuation">;</span>
    <span class="token comment">#log_format  main  &#39;$remote_addr ‐ $remote_user [$time_local] &quot;$request&quot; &#39;</span>
    <span class="token comment">#                  &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span>
    <span class="token comment">#                  &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;</span>
    <span class="token comment">#access_log  logs/access.log  main;</span>
    sendfile        on<span class="token punctuation">;</span>
    <span class="token comment">#tcp_nopush     on;</span>
    <span class="token comment">#keepalive_timeout  0;</span>
    keepalive_timeout  <span class="token number">65</span><span class="token punctuation">;</span>
    <span class="token comment">#gzip  on;</span>
    <span class="token comment"># 设置限流配置</span>
    limit_req_zone <span class="token variable">$binary_remote_addr</span> <span class="token assign-left variable">zone</span><span class="token operator">=</span>myRateLimit:10m <span class="token assign-left variable">rate</span><span class="token operator">=</span>2r/s<span class="token punctuation">;</span>    server <span class="token punctuation">{</span>  
        listen       <span class="token number">8081</span><span class="token punctuation">;</span>
        server_name  localhost<span class="token punctuation">;</span>
        charset utf‐8<span class="token punctuation">;</span>
        location / <span class="token punctuation">{</span>
            limit_req <span class="token assign-left variable">zone</span><span class="token operator">=</span>myRateLimit burst <span class="token operator">=</span> <span class="token number">5</span> nodelay<span class="token punctuation">;</span>
            root   html<span class="token punctuation">;</span>
            index  index.html index.htm<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),I=["src"],A=["src"];function E(a,M){const t=l("ExternalLinkIcon");return p(),c("div",null,[r,n("p",null,[s("Lua 是一个小巧的"),n("a",d,[s("脚本语言"),i(t)]),s("。它是巴西里约热内卢天主教大学（Pontifical Catholic University of Rio de Janeiro）里的一个由Roberto Ierusalimschy、Waldemar Celes 和 Luiz Henrique de Figueiredo三人所组成的研究小组于1993年开发的。 其设计目的是为 了通过灵活嵌入应用程序中从而为应用程序提供灵活的扩展和定制功能。Lua由标准C编 写而成，几乎在所有操作系统和平台上都可以编译，运行。Lua并没有提供强大的库，这 是由它的定位决定的。所以Lua不适合作为开发独立应用程序的语言。Lua 有一个同时进 行的JIT项目，提供在特定平台上的即时编译功能。")]),v,n("img",{src:a.$withBase("/javaUtils/13.png"),alt:"foo"},null,8,k),m,n("img",{src:a.$withBase("/javaUtils/14.png"),alt:"foo"},null,8,b),h,n("p",null,[s("测试访问"),n("a",g,[s("http://192.168.200.128"),i(t)])]),n("img",{src:a.$withBase("/javaUtils/18.png"),alt:"foo"},null,8,_),f,y,n("p",null,[s("tb_ad （广告表） "),n("img",{src:a.$withBase("/javaUtils/19.png"),alt:"foo"},null,8,x)]),q,n("p",null,[s("步骤一：编写lua脚本实现缓存预热（将mysql里的数据查询出来存入redis） "),n("img",{src:a.$withBase("/javaUtils/20.png"),alt:"foo"},null,8,w)]),n("p",null,[s("步骤二：编写lua脚本实现二级缓存读取 "),n("img",{src:a.$withBase("/javaUtils/21.png"),alt:"foo"},null,8,j)]),L,n("p",null,[s("重新启动nginx 测试："),n("a",$,[s("http://192.168.200.128/ad_update?position=web_index_lb"),i(t)])]),R,n("p",null,[s("测试"),n("a",z,[s("http://192.168.200.128/ad_read?position=web_index_lb"),i(t)]),s("输出")]),B,n("p",null,[s("漏桶(LeakyBucket)算法思路很简单,水(请求)先进入到漏桶里,漏桶以一定的速度出水(接口有响应速率),当水流入速度过大会直接溢出(访问频率超过接口响应速率),然后就拒绝请求,可以看出漏桶算法能强行限制数据的传输速率.示意图如下: "),n("img",{src:a.$withBase("/javaUtils/22.png"),alt:"foo"},null,8,U)]),n("p",null,[s("漏桶算法实现nginx的配置 配置示意图如下： "),n("img",{src:a.$withBase("/javaUtils/23.png"),alt:"foo"},null,8,N)]),C,n("p",null,[s("访问页面：直接报错。拒绝访问。 "),n("img",{src:a.$withBase("/javaUtils/24.png"),alt:"foo"},null,8,O)]),W,n("p",null,[s("测试：如下图在1秒钟之内可以刷新5次，正常处理。 "),n("img",{src:a.$withBase("/javaUtils/25.png"),alt:"foo"},null,8,I)]),n("p",null,[s("但是超过之后，连续刷新5次，抛出异常。 "),n("img",{src:a.$withBase("/javaUtils/26.png"),alt:"foo"},null,8,A)])])}const V=o(u,[["render",E],["__file","网站首页高可用nginx_lua.html.vue"]]);export{V as default};
