import{_ as t,r as p,o as e,c as o,b as n,d as c,e as l,a as s}from"./app-676abf65.js";const i={},u=s(`<h1 id="组件" tabindex="-1"><a class="header-anchor" href="#组件" aria-hidden="true">#</a> 组件</h1><h2 id="组件通信常用方式" tabindex="-1"><a class="header-anchor" href="#组件通信常用方式" aria-hidden="true">#</a> 组件通信常用方式</h2><ul><li>props</li><li>eventbus</li><li>vuex</li><li>自定义事件</li><li>边界情况 <ul><li>$parent</li><li>$children</li><li>$root</li><li>$refs</li><li>provide/inject</li></ul></li><li>非prop特性 <ul><li>$attrs</li><li>$listeners</li></ul></li></ul><h2 id="组件通信" tabindex="-1"><a class="header-anchor" href="#组件通信" aria-hidden="true">#</a> 组件通信</h2><h3 id="props" tabindex="-1"><a class="header-anchor" href="#props" aria-hidden="true">#</a> props</h3><h4 id="父给子传值" tabindex="-1"><a class="header-anchor" href="#父给子传值" aria-hidden="true">#</a> 父给子传值</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// child </span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> String <span class="token punctuation">}</span>
 <span class="token comment">// parent </span>
 <span class="token operator">&lt;</span>HelloWorld msg<span class="token operator">=</span><span class="token string">&quot;Welcome to Your Vue.js App&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义事件-emit" tabindex="-1"><a class="header-anchor" href="#自定义事件-emit" aria-hidden="true">#</a> 自定义事件 $emit</h3><h4 id="子给父传值" tabindex="-1"><a class="header-anchor" href="#子给父传值" aria-hidden="true">#</a> 子给父传值</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token comment">// child </span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;add&#39;</span><span class="token punctuation">,</span> good<span class="token punctuation">)</span> 
  <span class="token comment">// parent </span>
  <span class="token operator">&lt;</span>Cart @add<span class="token operator">=</span><span class="token string">&quot;cartAdd($event)&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Cart<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="事件总线" tabindex="-1"><a class="header-anchor" href="#事件总线" aria-hidden="true">#</a> 事件总线</h2><h3 id="任意两个组件之间传值常用事件总线-或-vuex的方式。" tabindex="-1"><a class="header-anchor" href="#任意两个组件之间传值常用事件总线-或-vuex的方式。" aria-hidden="true">#</a> 任意两个组件之间传值常用事件总线 或 vuex的方式。</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Bus：事件派发、监听和回调管理</span>
<span class="token keyword">class</span> <span class="token class-name">Bus</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> 
  <span class="token punctuation">}</span>
  <span class="token function">$on</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> 
     <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> 
  <span class="token punctuation">}</span>
  <span class="token function">$emit</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> args</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">cb</span> <span class="token operator">=&gt;</span> <span class="token function">cb</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span> 
    <span class="token punctuation">}</span> 
  <span class="token punctuation">}</span>

  <span class="token comment">// main.js </span>
  <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$bus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
  <span class="token comment">// child1 </span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> handle<span class="token punctuation">)</span> 
  <span class="token comment">// child2 </span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>实践中通常用Vue代替Bus，因为Vue已经实现了相应接口</p></div><h2 id="parent-root" tabindex="-1"><a class="header-anchor" href="#parent-root" aria-hidden="true">#</a> $parent/$root</h2><h3 id="兄弟组件之间通信可通过共同祖辈搭桥-parent或-root。" tabindex="-1"><a class="header-anchor" href="#兄弟组件之间通信可通过共同祖辈搭桥-parent或-root。" aria-hidden="true">#</a> 兄弟组件之间通信可通过共同祖辈搭桥，$parent或$root。</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// brother1 </span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> handle<span class="token punctuation">)</span> 
<span class="token comment">// brother2 </span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="children" tabindex="-1"><a class="header-anchor" href="#children" aria-hidden="true">#</a> $children</h2><h3 id="父组件可以通过-children访问子组件实现父子通信。" tabindex="-1"><a class="header-anchor" href="#父组件可以通过-children访问子组件实现父子通信。" aria-hidden="true">#</a> 父组件可以通过$children访问子组件实现父子通信。</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// parent </span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>xx <span class="token operator">=</span> <span class="token string">&#39;xxx&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>注意：$children不能保证子元素顺序</p></div><h2 id="attrs-listeners" tabindex="-1"><a class="header-anchor" href="#attrs-listeners" aria-hidden="true">#</a> $attrs/$listeners</h2><h3 id="包含了父作用域中不作为-prop-被识别-且获取-的特性绑定-class-和-style-除外-。当一个组件没有声明任何-prop-时-这里会包含所有父作用域的绑定-class-和-style-除外-并且可以通过-v-bind-attrs-传入内部组件——在创建高级别的组件时非常有用。" tabindex="-1"><a class="header-anchor" href="#包含了父作用域中不作为-prop-被识别-且获取-的特性绑定-class-和-style-除外-。当一个组件没有声明任何-prop-时-这里会包含所有父作用域的绑定-class-和-style-除外-并且可以通过-v-bind-attrs-传入内部组件——在创建高级别的组件时非常有用。" aria-hidden="true">#</a> 包含了父作用域中不作为 prop 被识别 (且获取) 的特性绑定 ( class 和 style 除外)。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 ( class 和 style 除外)，并且可以通过 v- bind=&quot;$attrs&quot; 传入内部组件——在创建高级别的组件时非常有用。</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// child：并未在props中声明foo </span>
<span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>$attrs<span class="token punctuation">.</span>foo<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span> 
<span class="token comment">// parent </span>
<span class="token operator">&lt;</span>HelloWorld foo<span class="token operator">=</span><span class="token string">&quot;foo&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24),r={href:"https://cn.vuejs.org/v2/api/#vm-attrs",target:"_blank",rel:"noopener noreferrer"},d=s(`<h2 id="refs" tabindex="-1"><a class="header-anchor" href="#refs" aria-hidden="true">#</a> refs</h2><h3 id="获取子节点引用" tabindex="-1"><a class="header-anchor" href="#获取子节点引用" aria-hidden="true">#</a> 获取子节点引用</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// parent </span>
<span class="token operator">&lt;</span>HelloWorld ref<span class="token operator">=</span><span class="token string">&quot;hw&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span> 
<span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>hw<span class="token punctuation">.</span>xx <span class="token operator">=</span> <span class="token string">&#39;xxx&#39;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="provide-inject" tabindex="-1"><a class="header-anchor" href="#provide-inject" aria-hidden="true">#</a> provide/inject</h2><h3 id="能够实现祖先和后代之间传值" tabindex="-1"><a class="header-anchor" href="#能够实现祖先和后代之间传值" aria-hidden="true">#</a> 能够实现祖先和后代之间传值</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ancestor </span>
<span class="token function">provide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token comment">// descendant </span>
<span class="token literal-property property">inject</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="插槽" tabindex="-1"><a class="header-anchor" href="#插槽" aria-hidden="true">#</a> 插槽</h2><h3 id="插槽语法是vue-实现的内容分发-api-用于复合组件开发。该技术在通用组件库开发中有大量应用。" tabindex="-1"><a class="header-anchor" href="#插槽语法是vue-实现的内容分发-api-用于复合组件开发。该技术在通用组件库开发中有大量应用。" aria-hidden="true">#</a> 插槽语法是Vue 实现的内容分发 API，用于复合组件开发。该技术在通用组件库开发中有大量应用。</h3><ul><li><h3 id="匿名插槽" tabindex="-1"><a class="header-anchor" href="#匿名插槽" aria-hidden="true">#</a> 匿名插槽</h3></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// comp1 </span>
<span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>slot<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span> 
<span class="token comment">// parent </span>
<span class="token operator">&lt;</span>comp<span class="token operator">&gt;</span>hello<span class="token operator">&lt;</span><span class="token operator">/</span>comp<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><h3 id="具名插槽" tabindex="-1"><a class="header-anchor" href="#具名插槽" aria-hidden="true">#</a> 具名插槽</h3></li></ul><p>将内容分发到子组件指定位置</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>// comp2 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>content<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span> 
// parent 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Comp2</span><span class="token punctuation">&gt;</span></span> 
  <span class="token comment">&lt;!-- 默认插槽用default做参数 --&gt;</span> 
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>default</span><span class="token punctuation">&gt;</span></span>具名插槽<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span> 
  <span class="token comment">&lt;!-- 具名插槽用插槽名做参数 --&gt;</span> 
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>content</span><span class="token punctuation">&gt;</span></span>内容...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Comp2</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><h3 id="作用域插槽" tabindex="-1"><a class="header-anchor" href="#作用域插槽" aria-hidden="true">#</a> 作用域插槽</h3></li></ul><p>分发内容要用到子组件中的数据</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>// comp3 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">:foo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>foo<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span> 
// parent 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Comp3</span><span class="token punctuation">&gt;</span></span> 
  <span class="token comment">&lt;!-- 把v-slot的值指定为作用域上下文对象 --&gt;</span> 
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>slotProps<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> 
    来自子组件数据：{{slotProps.foo}} 
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Comp3</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实现弹窗组件" tabindex="-1"><a class="header-anchor" href="#实现弹窗组件" aria-hidden="true">#</a> 实现弹窗组件</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 弹窗这类组件的特点是它们在当前vue实例之外独立存在，通常挂载于body；它们是通过JS动态创建的，不需要在任何组件中声明。常见使用姿势：</span>
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$create</span><span class="token punctuation">(</span>Notice<span class="token punctuation">,</span> <span class="token punctuation">{</span>
   <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;社会你杨哥喊你来搬砖&#39;</span><span class="token punctuation">,</span> 
   <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;提示信息&#39;</span><span class="token punctuation">,</span> 
   <span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token number">1000</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>create函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span> 
<span class="token comment">// 创建函数接收要创建组件定义 </span>
<span class="token keyword">function</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token parameter">Component<span class="token punctuation">,</span> props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
  <span class="token comment">// 创建一个Vue新实例 </span>
  <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">h</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token comment">// render函数将传入组件配置对象转换为虚拟dom </span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">h</span><span class="token punctuation">(</span>Component<span class="token punctuation">,</span> <span class="token punctuation">{</span> props <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span>Component<span class="token punctuation">,</span> <span class="token punctuation">{</span> props <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> 
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token comment">//执行挂载函数，但未指定挂载目标，表示只执行初始化工作 </span>
    <span class="token comment">// 将生成dom元素追加至body </span>
    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token comment">// 给组件实例添加销毁方法 </span>
    <span class="token keyword">const</span> comp <span class="token operator">=</span> vm<span class="token punctuation">.</span>$children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
    comp<span class="token punctuation">.</span><span class="token function-variable function">remove</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span> 
      vm<span class="token punctuation">.</span><span class="token function">$destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> comp<span class="token punctuation">;</span> 
  <span class="token punctuation">}</span>
  <span class="token comment">// 暴露调用接口 </span>
  <span class="token keyword">export</span> <span class="token keyword">default</span> create<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span> 
  <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">this</span><span class="token punctuation">.</span>isShow <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> 
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>hide<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>duration<span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">this</span><span class="token punctuation">.</span>isShow <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> 
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> create <span class="token keyword">from</span> <span class="token string">&quot;@/utils/create&quot;</span><span class="token punctuation">;</span> 
<span class="token keyword">import</span> Notice <span class="token keyword">from</span> <span class="token string">&quot;@/components/Notice&quot;</span><span class="token punctuation">;</span>

<span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span> 
  <span class="token function">submitForm</span><span class="token punctuation">(</span><span class="token parameter">form</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">[</span>form<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token parameter">valid</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
       <span class="token keyword">const</span> notice <span class="token operator">=</span> <span class="token function">create</span><span class="token punctuation">(</span>Notice<span class="token punctuation">,</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;社会你杨哥喊你来搬砖&quot;</span><span class="token punctuation">,</span> 
          <span class="token literal-property property">message</span><span class="token operator">:</span> valid <span class="token operator">?</span> <span class="token string">&quot;请求登录!&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;校验失败!&quot;</span><span class="token punctuation">,</span> 
          <span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token number">1000</span> 
       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
      notice<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22);function k(v,m){const a=p("ExternalLinkIcon");return e(),o("div",null,[u,n("p",null,[n("a",r,[c("文档"),l(a)])]),d])}const b=t(i,[["render",k],["__file","组件.html.vue"]]);export{b as default};
