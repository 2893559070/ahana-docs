import{_ as l,r as p,o as i,c as o,b as n,d as a,e,a as t}from"./app-9d6e6088.js";const c={},u=t(`<h1 id="spring-cloud-gateway-内置的过滤器工厂" tabindex="-1"><a class="header-anchor" href="#spring-cloud-gateway-内置的过滤器工厂" aria-hidden="true">#</a> Spring Cloud Gateway 内置的过滤器工厂</h1><h3 id="内置的过滤器工厂" tabindex="-1"><a class="header-anchor" href="#内置的过滤器工厂" aria-hidden="true">#</a> 内置的过滤器工厂</h3><p>这里简单将Spring Cloud Gateway内置的所有过滤器工厂整理成了一张表格。如下：</p><table><thead><tr><th style="text-align:left;">过滤器工厂</th><th style="text-align:left;">作用</th><th style="text-align:left;">参数</th></tr></thead><tbody><tr><td style="text-align:left;">AddRequestHeader</td><td style="text-align:left;">为原始请求添加Header</td><td style="text-align:left;">Header的名称及值</td></tr><tr><td style="text-align:left;">AddRequestParameter</td><td style="text-align:left;">为原始请求添加请求参数</td><td style="text-align:left;">参数名称及值</td></tr><tr><td style="text-align:left;">AddResponseHeader</td><td style="text-align:left;">为原始响应添加Header</td><td style="text-align:left;">Header的名称及值</td></tr><tr><td style="text-align:left;">DedupeResponseHeader</td><td style="text-align:left;">剔除响应头中重复的值</td><td style="text-align:left;">需要去重的Header名称及去重策略</td></tr><tr><td style="text-align:left;">Hystrix</td><td style="text-align:left;">为路由引入Hystrix的断路器保护</td><td style="text-align:left;"><code>HystrixCommand</code>的名称</td></tr><tr><td style="text-align:left;">FallbackHeaders</td><td style="text-align:left;">为fallbackUri的请求头中添加具体的异常信息</td><td style="text-align:left;">Header的名称</td></tr><tr><td style="text-align:left;">PrefixPath</td><td style="text-align:left;">为原始请求路径添加前缀</td><td style="text-align:left;">前缀路径</td></tr><tr><td style="text-align:left;">PreserveHostHeader</td><td style="text-align:left;">为请求添加一个preserveHostHeader=true的属性，路由过滤器会检查该属性以决定是否要发送原始的Host</td><td style="text-align:left;">无</td></tr><tr><td style="text-align:left;">RequestRateLimiter</td><td style="text-align:left;">用于对请求限流，限流算法为令牌桶</td><td style="text-align:left;">keyResolver、rateLimiter、statusCode、denyEmptyKey、emptyKeyStatus</td></tr><tr><td style="text-align:left;">RedirectTo</td><td style="text-align:left;">将原始请求重定向到指定的URL</td><td style="text-align:left;">http状态码及重定向的url</td></tr><tr><td style="text-align:left;">RemoveHopByHopHeadersFilter</td><td style="text-align:left;">为原始请求删除IETF组织规定的一系列Header</td><td style="text-align:left;">默认就会启用，可以通过配置指定仅删除哪些Header</td></tr><tr><td style="text-align:left;">RemoveRequestHeader</td><td style="text-align:left;">为原始请求删除某个Header</td><td style="text-align:left;">Header名称</td></tr><tr><td style="text-align:left;">RemoveResponseHeader</td><td style="text-align:left;">为原始响应删除某个Header</td><td style="text-align:left;">Header名称</td></tr><tr><td style="text-align:left;">RewritePath</td><td style="text-align:left;">重写原始的请求路径</td><td style="text-align:left;">原始路径正则表达式以及重写后路径的正则表达式</td></tr><tr><td style="text-align:left;">RewriteResponseHeader</td><td style="text-align:left;">重写原始响应中的某个Header</td><td style="text-align:left;">Header名称，值的正则表达式，重写后的值</td></tr><tr><td style="text-align:left;">SaveSession</td><td style="text-align:left;">在转发请求之前，强制执行<code>WebSession::save</code>操作</td><td style="text-align:left;">无</td></tr><tr><td style="text-align:left;">secureHeaders</td><td style="text-align:left;">为原始响应添加一系列起安全作用的响应头</td><td style="text-align:left;">无，支持修改这些安全响应头的值</td></tr><tr><td style="text-align:left;">SetPath</td><td style="text-align:left;">修改原始的请求路径</td><td style="text-align:left;">修改后的路径</td></tr><tr><td style="text-align:left;">SetResponseHeader</td><td style="text-align:left;">修改原始响应中某个Header的值</td><td style="text-align:left;">Header名称，修改后的值</td></tr><tr><td style="text-align:left;">SetStatus</td><td style="text-align:left;">修改原始响应的状态码</td><td style="text-align:left;">HTTP 状态码，可以是数字，也可以是字符串</td></tr><tr><td style="text-align:left;">StripPrefix</td><td style="text-align:left;">用于截断原始请求的路径</td><td style="text-align:left;">使用数字表示要截断的路径的数量</td></tr><tr><td style="text-align:left;">Retry</td><td style="text-align:left;">针对不同的响应进行重试</td><td style="text-align:left;">retries、statuses、methods、series</td></tr><tr><td style="text-align:left;">RequestSize</td><td style="text-align:left;">设置允许接收最大请求包的大小。如果请求包大小超过设置的值，则返回 <code>413 Payload Too Large</code></td><td style="text-align:left;">请求包大小，单位为字节，默认值为5M</td></tr><tr><td style="text-align:left;">ModifyRequestBody</td><td style="text-align:left;">在转发请求之前修改原始请求体内容</td><td style="text-align:left;">修改后的请求体内容</td></tr><tr><td style="text-align:left;">ModifyResponseBody</td><td style="text-align:left;">修改原始响应体的内容</td><td style="text-align:left;">修改后的响应体内容</td></tr><tr><td style="text-align:left;">Default</td><td style="text-align:left;">为所有路由添加过滤器</td><td style="text-align:left;">过滤器工厂名称及值</td></tr></tbody></table><p>**Tips：**每个过滤器工厂都对应一个实现类，并且这些类的名称必须以<code>GatewayFilterFactory</code>结尾，这是Spring Cloud Gateway的一个约定，例如<code>AddRequestHeader</code>对应的实现类为<code>AddRequestHeaderGatewayFilterFactory</code>。</p><hr><h4 id="_1、addrequestheader-gatewayfilter-factory" tabindex="-1"><a class="header-anchor" href="#_1、addrequestheader-gatewayfilter-factory" aria-hidden="true">#</a> 1、AddRequestHeader GatewayFilter Factory</h4><p>为原始请求添加Header，配置示例：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> add_request_header_route
        <span class="token key atrule">uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//example.org
        <span class="token key atrule">filters</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> AddRequestHeader=X<span class="token punctuation">-</span>Request<span class="token punctuation">-</span>Foo<span class="token punctuation">,</span> Bar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为原始请求添加名为 <code>X-Request-Foo</code> ，值为 <code>Bar</code> 的请求头</p><h4 id="_2、addrequestparameter-gatewayfilter-factory" tabindex="-1"><a class="header-anchor" href="#_2、addrequestparameter-gatewayfilter-factory" aria-hidden="true">#</a> 2、AddRequestParameter GatewayFilter Factory</h4><p>为原始请求添加请求参数及值，配置示例：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> add_request_parameter_route
        <span class="token key atrule">uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//example.org
        <span class="token key atrule">filters</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> AddRequestParameter=foo<span class="token punctuation">,</span> bar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为原始请求添加名为foo，值为bar的参数，即：<code>foo=bar</code></p><h4 id="_3、addresponseheader-gatewayfilter-factory" tabindex="-1"><a class="header-anchor" href="#_3、addresponseheader-gatewayfilter-factory" aria-hidden="true">#</a> 3、AddResponseHeader GatewayFilter Factory</h4><p>为原始响应添加Header，配置示例：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> add_response_header_route
        <span class="token key atrule">uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//example.org
        <span class="token key atrule">filters</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> AddResponseHeader=X<span class="token punctuation">-</span>Response<span class="token punctuation">-</span>Foo<span class="token punctuation">,</span> Bar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为原始响应添加名为 <code>X-Request-Foo</code> ，值为 <code>Bar</code> 的响应头</p><h4 id="_4、deduperesponseheader-gatewayfilter-factory" tabindex="-1"><a class="header-anchor" href="#_4、deduperesponseheader-gatewayfilter-factory" aria-hidden="true">#</a> 4、DedupeResponseHeader GatewayFilter Factory</h4><p>DedupeResponseHeader可以根据配置的Header名称及去重策略剔除响应头中重复的值，这是Spring Cloud Greenwich SR2提供的新特性，低于这个版本无法使用。</p><p>我们在Gateway以及微服务上都设置了CORS（解决跨域）Header的话，如果不做任何配置，那么请求 -&gt; 网关 -&gt; 微服务，获得的CORS Header的值，就将会是这样的：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>
Access-Control-Allow-Credentials: true, <span class="token boolean">true</span>
Access-Control-Allow-Origin: https://musk.mars, https://musk.mars
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到这两个Header的值都重复了，若想把这两个Header的值去重的话，就需要使用到DedupeResponseHeader，配置示例：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> dedupe_response_header_route
        <span class="token key atrule">uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//example.org
        <span class="token key atrule">filters</span><span class="token punctuation">:</span>
        <span class="token comment"># 若需要去重的Header有多个，使用空格分隔</span>
        <span class="token punctuation">-</span> DedupeResponseHeader=Access<span class="token punctuation">-</span>Control<span class="token punctuation">-</span>Allow<span class="token punctuation">-</span>Credentials Access<span class="token punctuation">-</span>Control<span class="token punctuation">-</span>Allow<span class="token punctuation">-</span>Origin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>去重策略：</p><ul><li>RETAIN_FIRST：默认值，保留第一个值</li><li>RETAIN_LAST：保留最后一个值</li><li>RETAIN_UNIQUE：保留所有唯一值，以它们第一次出现的顺序保留</li></ul><p>若想对该过滤器工厂有个比较全面的了解的话，建议阅读该过滤器工厂的源码，因为源码里有详细的注释及示例，比官方文档写得还好：<code>org.springframework.cloud.gateway.filter.factory.DedupeResponseHeaderGatewayFilterFactory</code></p><h4 id="_5、hystrix-gatewayfilter-factory" tabindex="-1"><a class="header-anchor" href="#_5、hystrix-gatewayfilter-factory" aria-hidden="true">#</a> 5、Hystrix GatewayFilter Factory</h4><p>为路由引入Hystrix的断路器保护，配置示例：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> hystrix_route
        <span class="token key atrule">uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//example.org
        <span class="token key atrule">filters</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> Hystrix=myCommandName
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Hystrix是Spring Cloud第一代容错组件，不过已经进入维护模式，未来Hystrix会被Spring Cloud移除掉，取而代之的是Alibaba Sentinel/Resilience4J。所以本文不做详细介绍了，感兴趣的话可以参考官方文档：</p>`,31),r={href:"https://cloud.spring.io/spring-cloud-static/Greenwich.SR2/single/spring-cloud.html#hystrix",target:"_blank",rel:"noopener noreferrer"},d=t(`<h4 id="_6、fallbackheaders-gatewayfilter-factory" tabindex="-1"><a class="header-anchor" href="#_6、fallbackheaders-gatewayfilter-factory" aria-hidden="true">#</a> 6、FallbackHeaders GatewayFilter Factory</h4><p>同样是对Hystrix的支持，上一小节所介绍的过滤器工厂支持一个配置参数：<code>fallbackUri</code>，该配置用于当发生异常时将请求转发到一个特定的uri上。而<code>FallbackHeaders</code>这个过滤工厂可以在转发请求到该uri时添加一个Header，这个Header的值为具体的异常信息。配置示例：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> ingredients
        <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//ingredients
        <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> Path=//ingredients/<span class="token important">**</span>
        <span class="token key atrule">filters</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Hystrix
          <span class="token key atrule">args</span><span class="token punctuation">:</span>
            <span class="token key atrule">name</span><span class="token punctuation">:</span> fetchIngredients
            <span class="token key atrule">fallbackUri</span><span class="token punctuation">:</span> forward<span class="token punctuation">:</span>/fallback
      <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> ingredients<span class="token punctuation">-</span>fallback
        <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">9994</span>
        <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> Path=/fallback
        <span class="token key atrule">filters</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> FallbackHeaders
          <span class="token key atrule">args</span><span class="token punctuation">:</span>
            <span class="token key atrule">executionExceptionTypeHeaderName</span><span class="token punctuation">:</span> Test<span class="token punctuation">-</span>Header
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里也不做详细介绍了，感兴趣可以参考官方文档：</p>`,4),k={href:"https://cloud.spring.io/spring-cloud-static/Greenwich.SR2/single/spring-cloud.html#fallback-headers",target:"_blank",rel:"noopener noreferrer"},v=t(`<h4 id="_7、prefixpath-gatewayfilter-factory" tabindex="-1"><a class="header-anchor" href="#_7、prefixpath-gatewayfilter-factory" aria-hidden="true">#</a> 7、PrefixPath GatewayFilter Factory</h4><p>为原始的请求路径添加一个前缀路径，配置示例：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> prefixpath_route
        <span class="token key atrule">uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//example.org
        <span class="token key atrule">filters</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> PrefixPath=/mypath
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该配置使访问<code>\${GATEWAY_URL}/hello</code> 会转发到<code>https://example.org/mypath/hello</code></p><h4 id="_8、preservehostheader-gatewayfilter-factory" tabindex="-1"><a class="header-anchor" href="#_8、preservehostheader-gatewayfilter-factory" aria-hidden="true">#</a> 8、PreserveHostHeader GatewayFilter Factory</h4><p>为请求添加一个preserveHostHeader=true的属性，路由过滤器会检查该属性以决定是否要发送原始的Host Header。配置示例：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> preserve_host_route
        <span class="token key atrule">uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//example.org
        <span class="token key atrule">filters</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> PreserveHostHeader
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不设置，那么名为 <code>Host</code> 的Header将由Http Client控制</p><h4 id="_9、requestratelimiter-gatewayfilter-factory" tabindex="-1"><a class="header-anchor" href="#_9、requestratelimiter-gatewayfilter-factory" aria-hidden="true">#</a> 9、RequestRateLimiter GatewayFilter Factory</h4><p>用于对请求进行限流，限流算法为令牌桶。配置示例：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> requestratelimiter_route
        <span class="token key atrule">uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//example.org
        <span class="token key atrule">filters</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> RequestRateLimiter
          <span class="token key atrule">args</span><span class="token punctuation">:</span>
            <span class="token key atrule">redis-rate-limiter.replenishRate</span><span class="token punctuation">:</span> <span class="token number">10</span>
            <span class="token key atrule">redis-rate-limiter.burstCapacity</span><span class="token punctuation">:</span> <span class="token number">20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于另一篇文章中已经介绍过如何使用该过滤器工厂实现网关限流，所以这里就不再赘述了：</p>`,12),y={href:"https://blog.51cto.com/zero01/2430532",target:"_blank",rel:"noopener noreferrer"},m=n("p",null,"或者参考官方文档：",-1),b={href:"https://cloud.spring.io/spring-cloud-static/Greenwich.SR2/single/spring-cloud.html#_requestratelimiter_gatewayfilter_factory",target:"_blank",rel:"noopener noreferrer"},g=t(`<h4 id="_10、redirectto-gatewayfilter-factory" tabindex="-1"><a class="header-anchor" href="#_10、redirectto-gatewayfilter-factory" aria-hidden="true">#</a> 10、RedirectTo GatewayFilter Factory</h4><p>将原始请求重定向到指定的Url，配置示例：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> redirect_route
        <span class="token key atrule">uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//example.org
        <span class="token key atrule">filters</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> RedirectTo=302<span class="token punctuation">,</span> https<span class="token punctuation">:</span>//acme.org
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该配置使访问 <code>\${GATEWAY_URL}/hello</code> 会被重定向到 <code>https://acme.org/hello</code> ，并且携带一个 <code>Location:http://acme.org</code> 的Header，而返回客户端的HTTP状态码为302</p><p>注意事项：</p><ul><li>HTTP状态码应为3xx，例如301</li><li>URL必须是合法的URL，该URL会作为<code>Location</code> Header的值</li></ul><h4 id="_11、removehopbyhopheadersfilter-gatewayfilter-factory" tabindex="-1"><a class="header-anchor" href="#_11、removehopbyhopheadersfilter-gatewayfilter-factory" aria-hidden="true">#</a> 11、RemoveHopByHopHeadersFilter GatewayFilter Factory</h4>`,7),h={href:"https://tools.ietf.org/html/draft-ietf-httpbis-p1-messaging-14#section-7.1.3",target:"_blank",rel:"noopener noreferrer"},f=t(`<ul><li>Connection</li><li>Keep-Alive</li><li>Proxy-Authenticate</li><li>Proxy-Authorization</li><li>TE</li><li>Trailer</li><li>Transfer-Encoding</li><li>Upgrade</li></ul><p>可以通过配置去指定仅删除哪些Header，配置示例：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">filter</span><span class="token punctuation">:</span>
        <span class="token key atrule">remove-hop-by-hop</span><span class="token punctuation">:</span>
          <span class="token comment"># 多个Header使用逗号（,）分隔</span>
          <span class="token key atrule">headers</span><span class="token punctuation">:</span> Connection<span class="token punctuation">,</span>Keep<span class="token punctuation">-</span>Alive
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_12、removerequestheader-gatewayfilter-factory" tabindex="-1"><a class="header-anchor" href="#_12、removerequestheader-gatewayfilter-factory" aria-hidden="true">#</a> 12、RemoveRequestHeader GatewayFilter Factory</h4><p>为原始请求删除某个Header，配置示例：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> removerequestheader_route
        <span class="token key atrule">uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//example.org
        <span class="token key atrule">filters</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> RemoveRequestHeader=X<span class="token punctuation">-</span>Request<span class="token punctuation">-</span>Foo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删除原始请求中名为 <code>X-Request-Foo</code> 的请求头</p><h4 id="_13、removeresponseheader-gatewayfilter-factory" tabindex="-1"><a class="header-anchor" href="#_13、removeresponseheader-gatewayfilter-factory" aria-hidden="true">#</a> 13、RemoveResponseHeader GatewayFilter Factory</h4><p>为原始响应删除某个Header，配置示例：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> removeresponseheader_route
        <span class="token key atrule">uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//example.org
        <span class="token key atrule">filters</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> RemoveResponseHeader=X<span class="token punctuation">-</span>Response<span class="token punctuation">-</span>Foo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删除原始响应中名为 <code>X-Request-Foo</code> 的响应头</p><h4 id="_14、rewritepath-gatewayfilter-factory" tabindex="-1"><a class="header-anchor" href="#_14、rewritepath-gatewayfilter-factory" aria-hidden="true">#</a> 14、RewritePath GatewayFilter Factory</h4><p>通过正则表达式重写原始的请求路径，配置示例：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> rewritepath_route
        <span class="token key atrule">uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//example.org
        <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> Path=/foo/<span class="token important">**</span>
        <span class="token key atrule">filters</span><span class="token punctuation">:</span>
        <span class="token comment"># 参数1为原始路径的正则表达式，参数2为重写后路径的正则表达式</span>
        <span class="token punctuation">-</span> RewritePath=/foo/(<span class="token punctuation">?</span>&lt;segment<span class="token punctuation">&gt;</span>.<span class="token important">*)</span><span class="token punctuation">,</span> /$\\<span class="token punctuation">{</span>segment<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该配置使得访问 <code>/foo/bar</code> 时，会将路径重写为<code>/bar</code> 再进行转发，也就是会转发到 <code>https://example.org/bar</code>。需要注意的是：由于YAML语法，需用<code>$\\</code> 替换 <code>$</code></p><h4 id="_15、rewriteresponseheader-gatewayfilter-factory" tabindex="-1"><a class="header-anchor" href="#_15、rewriteresponseheader-gatewayfilter-factory" aria-hidden="true">#</a> 15、RewriteResponseHeader GatewayFilter Factory</h4><p>重写原始响应中的某个Header，配置示例：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> rewriteresponseheader_route
        <span class="token key atrule">uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//example.org
        <span class="token key atrule">filters</span><span class="token punctuation">:</span>
        <span class="token comment"># 参数1为Header名称，参数2为值的正则表达式，参数3为重写后的值</span>
        <span class="token punctuation">-</span> RewriteResponseHeader=X<span class="token punctuation">-</span>Response<span class="token punctuation">-</span>Foo<span class="token punctuation">,</span> password=<span class="token punctuation">[</span>^&amp;<span class="token punctuation">]</span>+<span class="token punctuation">,</span> password=<span class="token important">***</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该配置的意义在于：如果响应头中 <code>X-Response-Foo</code> 的值为<code>/42?user=ford&amp;password=omg!what&amp;flag=true</code>，那么就会被按照配置的值重写成<code>/42?user=ford&amp;password=***&amp;flag=true</code>，也就是把其中的<code>password=omg!what</code>重写成了<code>password=***</code></p><h4 id="_16、savesession-gatewayfilter-factory" tabindex="-1"><a class="header-anchor" href="#_16、savesession-gatewayfilter-factory" aria-hidden="true">#</a> 16、SaveSession GatewayFilter Factory</h4><p>在转发请求之前，强制执行<code>WebSession::save</code>操作，配置示例：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> save_session
        <span class="token key atrule">uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//example.org
        <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> Path=/foo/<span class="token important">**</span>
        <span class="token key atrule">filters</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> SaveSession

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要用在那种像 Spring Session 延迟数据存储（数据不是立刻持久化）的，并希望在请求转发前确保session状态保存情况。如果你将Spring Secutiry于Spring Session集成使用，并想确保安全信息都传到下游机器，你就需要配置这个filter。</p><h4 id="_17、secureheaders-gatewayfilter-factory" tabindex="-1"><a class="header-anchor" href="#_17、secureheaders-gatewayfilter-factory" aria-hidden="true">#</a> 17、secureHeaders GatewayFilter Factory</h4>`,24),x={href:"https://blog.appcanary.com/2017/http-security-headers.html",target:"_blank",rel:"noopener noreferrer"},w=t(`<ul><li><code>X-Xss-Protection:1; mode=block</code></li><li><code>Strict-Transport-Security:max-age=631138519</code></li><li><code>X-Frame-Options:DENY</code></li><li><code>X-Content-Type-Options:nosniff</code></li><li><code>Referrer-Policy:no-referrer</code></li><li><code>Content-Security-Policy:default-src &#39;self&#39; https:; font-src &#39;self&#39; https: data:; img-src &#39;self&#39; https: data:; object-src &#39;none&#39;; script-src https:; style-src &#39;self&#39; https: &#39;unsafe-inline&#39;</code></li><li><code>X-Download-Options:noopen</code></li><li><code>X-Permitted-Cross-Domain-Policies:none</code></li></ul><p>如果你想修改这些Header的值，那么就需要使用这些Headers对应的后缀，如下：</p><ul><li><code>xss-protection-header</code></li><li><code>strict-transport-security</code></li><li><code>frame-options</code></li><li><code>content-type-options</code></li><li><code>referrer-policy</code></li><li><code>content-security-policy</code></li><li><code>download-options</code></li><li><code>permitted-cross-domain-policies</code></li></ul><p>配置示例：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">filter</span><span class="token punctuation">:</span>
        <span class="token key atrule">secure-headers</span><span class="token punctuation">:</span>
          <span class="token comment"># 修改 X-Xss-Protection 的值为 2; mode=unblock</span>
          <span class="token key atrule">xss-protection-header</span><span class="token punctuation">:</span> 2; mode=unblock
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想禁用某些Header，可使用如下配置：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">filter</span><span class="token punctuation">:</span>
        <span class="token key atrule">secure-headers</span><span class="token punctuation">:</span>
          <span class="token comment"># 多个使用逗号（,）分隔</span>
          <span class="token key atrule">disable</span><span class="token punctuation">:</span> frame<span class="token punctuation">-</span>options<span class="token punctuation">,</span>download<span class="token punctuation">-</span>options

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_18、setpath-gatewayfilter-factory" tabindex="-1"><a class="header-anchor" href="#_18、setpath-gatewayfilter-factory" aria-hidden="true">#</a> 18、SetPath GatewayFilter Factory</h4><p>修改原始的请求路径，配置示例：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> setpath_route
        <span class="token key atrule">uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//example.org
        <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> Path=/foo/<span class="token punctuation">{</span>segment<span class="token punctuation">}</span>
        <span class="token key atrule">filters</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> SetPath=/<span class="token punctuation">{</span>segment<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该配置使访问 <code>\${GATEWAY_URL}/foo/bar</code> 时会转发到 <code>https://example.org/bar</code> ，也就是原本的<code>/foo/bar</code>被修改为了<code>/bar</code></p><h4 id="_19、setresponseheader-gatewayfilter-factory" tabindex="-1"><a class="header-anchor" href="#_19、setresponseheader-gatewayfilter-factory" aria-hidden="true">#</a> 19、SetResponseHeader GatewayFilter Factory</h4><p>修改原始响应中某个Header的值，配置示例：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> setresponseheader_route
        <span class="token key atrule">uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//example.org
        <span class="token key atrule">filters</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> SetResponseHeader=X<span class="token punctuation">-</span>Response<span class="token punctuation">-</span>Foo<span class="token punctuation">,</span> Bar

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将原始响应中 <code>X-Response-Foo</code> 的值修改为 <code>Bar</code></p><h4 id="_20、setstatus-gatewayfilter-factory" tabindex="-1"><a class="header-anchor" href="#_20、setstatus-gatewayfilter-factory" aria-hidden="true">#</a> 20、SetStatus GatewayFilter Factory</h4><p>修改原始响应的状态码，配置示例：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> setstatusstring_route
        <span class="token key atrule">uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//example.org
        <span class="token key atrule">filters</span><span class="token punctuation">:</span>
        <span class="token comment"># 字符串形式</span>
        <span class="token punctuation">-</span> SetStatus=BAD_REQUEST
      <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> setstatusint_route
        <span class="token key atrule">uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//example.org
        <span class="token key atrule">filters</span><span class="token punctuation">:</span>
        <span class="token comment"># 数字形式</span>
        <span class="token punctuation">-</span> SetStatus=401
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SetStatusd的值可以是数字，也可以是字符串。但一定要是Spring <code>HttpStatus</code> 枚举类中的值。上面这两种配置都可以返回401这个HTTP状态码。</p><h4 id="_21、stripprefix-gatewayfilter-factory" tabindex="-1"><a class="header-anchor" href="#_21、stripprefix-gatewayfilter-factory" aria-hidden="true">#</a> 21、StripPrefix GatewayFilter Factory</h4><p>用于截断原始请求的路径，配置示例：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> nameRoot
        <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//nameservice
        <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> Path=/name/<span class="token important">**</span>
        <span class="token key atrule">filters</span><span class="token punctuation">:</span>
        <span class="token comment"># 数字表示要截断的路径的数量</span>
        <span class="token punctuation">-</span> StripPrefix=2

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上配置，如果请求的路径为 <code>/name/bar/foo</code> ，那么则会截断成<code>/foo</code>后进行转发 ，也就是会截断2个路径。</p><h4 id="_22、retry-gatewayfilter-factory" tabindex="-1"><a class="header-anchor" href="#_22、retry-gatewayfilter-factory" aria-hidden="true">#</a> 22、Retry GatewayFilter Factory</h4><p>针对不同的响应进行重试，例如可以针对HTTP状态码进行重试，配置示例：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> retry_test
        <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>8080/flakey
        <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> Host=<span class="token important">*.retry.com</span>
        <span class="token key atrule">filters</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Retry
          <span class="token key atrule">args</span><span class="token punctuation">:</span>
            <span class="token key atrule">retries</span><span class="token punctuation">:</span> <span class="token number">3</span>
            <span class="token key atrule">statuses</span><span class="token punctuation">:</span> BAD_GATEWAY
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可配置如下参数：</p><ul><li><code>retries</code>：重试次数</li><li><code>statuses</code>：需要重试的状态码，取值在 <code>org.springframework.http.HttpStatus</code> 中</li><li><code>methods</code>：需要重试的请求方法，取值在 <code>org.springframework.http.HttpMethod</code> 中</li><li><code>series</code>：HTTP状态码序列，取值在 <code>org.springframework.http.HttpStatus.Series</code> 中</li></ul><h4 id="_23、requestsize-gatewayfilter-factory" tabindex="-1"><a class="header-anchor" href="#_23、requestsize-gatewayfilter-factory" aria-hidden="true">#</a> 23、RequestSize GatewayFilter Factory</h4><p>设置允许接收最大请求包的大小，配置示例：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> request_size_route
      <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>8080/upload
      <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> Path=/upload
      <span class="token key atrule">filters</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> RequestSize
        <span class="token key atrule">args</span><span class="token punctuation">:</span>
          <span class="token comment"># 单位为字节</span>
          <span class="token key atrule">maxSize</span><span class="token punctuation">:</span> <span class="token number">5000000</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果请求包大小超过设置的值，则会返回 <code>413 Payload Too Large</code>以及一个<code>errorMessage</code></p><h4 id="_24、modify-request-body-gatewayfilter-factory" tabindex="-1"><a class="header-anchor" href="#_24、modify-request-body-gatewayfilter-factory" aria-hidden="true">#</a> 24、Modify Request Body GatewayFilter Factory</h4><p>在转发请求之前修改原始请求体内容，该过滤器工厂只能通过代码配置，不支持在配置文件中配置。代码示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">RouteLocator</span> <span class="token function">routes</span><span class="token punctuation">(</span><span class="token class-name">RouteLocatorBuilder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">&quot;rewrite_request_obj&quot;</span><span class="token punctuation">,</span> r <span class="token operator">-&gt;</span> r<span class="token punctuation">.</span><span class="token function">host</span><span class="token punctuation">(</span><span class="token string">&quot;*.rewriterequestobj.org&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">filters</span><span class="token punctuation">(</span>f <span class="token operator">-&gt;</span> f<span class="token punctuation">.</span><span class="token function">prefixPath</span><span class="token punctuation">(</span><span class="token string">&quot;/httpbin&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">modifyRequestBody</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Hello</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON_VALUE</span><span class="token punctuation">,</span>
                    <span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> message<span class="token punctuation">;</span>
 
    <span class="token keyword">public</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
 
    <span class="token keyword">public</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> message<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Tips：该过滤器工厂处于 <strong>BETA</strong> 状态，未来API可能会变化，生产环境请慎用</p></blockquote><h4 id="_25、modify-response-body-gatewayfilter-factory" tabindex="-1"><a class="header-anchor" href="#_25、modify-response-body-gatewayfilter-factory" aria-hidden="true">#</a> 25、Modify Response Body GatewayFilter Factory</h4><p>可用于修改原始响应体的内容，该过滤器工厂同样只能通过代码配置，不支持在配置文件中配置。代码示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">RouteLocator</span> <span class="token function">routes</span><span class="token punctuation">(</span><span class="token class-name">RouteLocatorBuilder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">&quot;rewrite_response_upper&quot;</span><span class="token punctuation">,</span> r <span class="token operator">-&gt;</span> r<span class="token punctuation">.</span><span class="token function">host</span><span class="token punctuation">(</span><span class="token string">&quot;*.rewriteresponseupper.org&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">filters</span><span class="token punctuation">(</span>f <span class="token operator">-&gt;</span> f<span class="token punctuation">.</span><span class="token function">prefixPath</span><span class="token punctuation">(</span><span class="token string">&quot;/httpbin&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">modifyResponseBody</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
                    <span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Tips：该过滤器工厂处于 <strong>BETA</strong> 状态，未来API可能会变化，生产环境请慎用</p></blockquote><h4 id="_26、default-filters" tabindex="-1"><a class="header-anchor" href="#_26、default-filters" aria-hidden="true">#</a> 26、Default Filters</h4><p>Default Filters用于为所有路由添加过滤器工厂，也就是说通过Default Filter所配置的过滤器工厂会作用到所有的路由上。配置示例：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">default-filters</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> AddResponseHeader=X<span class="token punctuation">-</span>Response<span class="token punctuation">-</span>Default<span class="token punctuation">-</span>Foo<span class="token punctuation">,</span> Default<span class="token punctuation">-</span>Bar
      <span class="token punctuation">-</span> PrefixPath=/httpbin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>官方文档：</p>`,45),_={href:"https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.1.0.RELEASE/single/spring-cloud-gateway.html#_gatewayfilter_factories",target:"_blank",rel:"noopener noreferrer"};function H(R,F){const s=p("ExternalLinkIcon");return i(),o("div",null,[u,n("ul",null,[n("li",null,[n("a",r,[a("Hystrix GatewayFilter Factory"),e(s)])])]),d,n("ul",null,[n("li",null,[n("a",k,[a("FallbackHeaders GatewayFilter Factory"),e(s)])])]),v,n("ul",null,[n("li",null,[n("a",y,[a("Spring Cloud Gateway - 扩展"),e(s)])])]),m,n("ul",null,[n("li",null,[n("a",b,[a("RequestRateLimiter GatewayFilter Factory"),e(s)])])]),g,n("p",null,[a("为原始请求删除"),n("a",h,[a("IETF"),e(s)]),a("组织规定的一系列Header，默认删除的Header如下：")]),f,n("p",null,[a("secureHeaders过滤器工厂主要是参考了"),n("a",x,[a("这篇博客"),e(s)]),a("中的建议，为原始响应添加了一系列起安全作用的响应头。默认会添加如下Headers（包括值）：")]),w,n("ul",null,[n("li",null,[n("a",_,[a("GatewayFilter Factories"),e(s)])])])])}const q=l(c,[["render",H],["__file","gateway内置过滤器工厂.html.vue"]]);export{q as default};
