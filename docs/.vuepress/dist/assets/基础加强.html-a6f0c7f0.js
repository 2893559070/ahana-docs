import{_ as e,o as l,c,b as s,d as n,a}from"./app-676abf65.js";const p={},o=s("h1",{id:"基础加强",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#基础加强","aria-hidden":"true"},"#"),n(" 基础加强")],-1),i=s("h2",{id:"类加载",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#类加载","aria-hidden":"true"},"#"),n(" 类加载")],-1),u=s("p",null,"物理文件加载到内存中",-1),d=["src"],r=s("li",null,[s("p",null,"加载器 （ 自行了解 ）"),s("ul",null,[s("li",null,"启动类"),s("li",null,"平台类"),s("li",null,"系统类"),s("li",null,"自定义加载器")])],-1),k=s("h2",{id:"反射",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#反射","aria-hidden":"true"},"#"),n(" 反射")],-1),m=s("p",null,"动态获取信息及动态获取对象方法的功能称为Java中的反射机制，利用反射调用无视修饰符，相当于js对象调用方法",-1),v=a(`<p>获取Class类的对象</p><ul><li>getConstrucTors 返回所有公共构造方法对象的数组</li><li>getDeclaredConstructors 返回所有构造方法对象的数组</li><li>getConstructor（String.class. int.class） 返回单个公共构造方法对象</li><li>getDeclaredConstructor（String.class. int.class） 返回单个构造方法对象</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token comment">// 1. 通过Class类中的静态方法 forName</span>
    <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;包名.类名&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 2. 通过Class属性类获取 Student</span>
    <span class="token class-name">Class</span> clazz2 <span class="token operator">=</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>

    <span class="token comment">// 3. 利用对象的getClass方法来获取class对象</span>
    <span class="token class-name">Student</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Class</span> clazz3 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),b=a(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token comment">// 1. 通过Class类中的静态方法 forName</span>
    <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;包名.类名&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 获取构造方法</span>
    <span class="token class-name">Constructor</span> constructor <span class="token operator">=</span> clazz<span class="token punctuation">.</span>getDeclaredConstructor（<span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 用反射获取并使用私有变量 需要用setAccessible</span>
    constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 创建对象 （可能需要强转）</span>
    <span class="token class-name">Student</span> student <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 简写格式 (过时 仅了解)</span>
    <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;包名.类名&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 公用的</span>
    <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),_=["src"],g=a("<li><p>Field类的对象</p><ul><li><p>获取成员变量</p><ul><li>getFields 返回所有公共成员变量对象的数组</li><li>getDeclaredFields 返回所有成员变量对象的数组</li><li>getField（String name） 返回单个公共成员变量方法对象</li><li>getDeclaredField（String name） 返回单个成员变量方法对象</li></ul></li><li><p>设置成员变量</p><ul><li>void set(Object obj, Object value)</li><li>void get(Object obj)</li></ul><p>Class clazz = Class.forName(&quot;包名.类名&quot;); Field f = clazz.getField(&quot;name&quot;)</p><p>Student st = (Student) f.newInstance();</p><p>st.set(st, &quot;张三&quot;)</p></li></ul></li><li><p>获取method （原理相同）自行了解</p></li>",2);function h(t,f){return l(),c("div",null,[o,i,u,s("ul",null,[s("li",null,[s("p",null,[n("类加载过程 "),s("img",{src:t.$withBase("/java/类加载过程.png"),alt:"foo"},null,8,d)])]),r]),k,m,s("ul",null,[s("li",null,[v,s("ul",null,[s("li",null,[n("创建对象"),b,n(),s("img",{src:t.$withBase("/java/反射（暴力反射）.png"),alt:"foo"},null,8,_)])])]),g])])}const z=e(p,[["render",h],["__file","基础加强.html.vue"]]);export{z as default};
