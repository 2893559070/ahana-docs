import{_ as i,o as t,c as e,a as r}from"./app-676abf65.js";const a={},l=r('<h1 id="git-命令详解" tabindex="-1"><a class="header-anchor" href="#git-命令详解" aria-hidden="true">#</a> Git 命令详解</h1><h2 id="现在我们有了本地和远程的版本库-让我们来试着用用git的基本命令" tabindex="-1"><a class="header-anchor" href="#现在我们有了本地和远程的版本库-让我们来试着用用git的基本命令" aria-hidden="true">#</a> 现在我们有了本地和远程的版本库，让我们来试着用用Git的基本命令：</h2><ul><li><p>git pull：从其他的版本库（既可以是远程的也可以是本地的）将代码更新到本地，例如：&#39;git pull origin master&#39;就是将origin这个版本库的代码更新到本地的master主枝，该功能类似于SVN的update</p></li><li><p>git add：是将当前更改或者新增的文件加入到Git的索引中，加入到Git的索引中就表示记入了版本历史中，这也是提交之前所需要执行的一步，例如&#39;git add app/model/user.rb&#39;就会增加app/model/user.rb文件到Git的索引中，该功能类似于SVN的add</p></li><li><p>git rm：从当前的工作空间中和索引中删除文件，例如&#39;git rm app/model/user.rb&#39;，该功能类似于SVN的rm、del</p></li><li><p>git commit：提交当前工作空间的修改内容，类似于SVN的commit命令，例如&#39;git commit -m story #3, add user model&#39;，提交的时候必须用-m来输入一条提交信息，该功能类似于SVN的commit</p></li><li><p>git push：将本地commit的代码更新到远程版本库中，例如&#39;git push origin&#39;就会将本地的代码更新到名为orgin的远程版本库中</p></li><li><p>git log：查看历史日志，该功能类似于SVN的log</p></li><li><p>git revert：还原一个版本的修改，必须提供一个具体的Git版本号，例如&#39;git revert bbaf6fb5060b4875b18ff9ff637ce118256d6f20&#39;，Git的版本号都是生成的一个哈希值</p></li></ul><h2 id="上面的命令几乎都是每个版本控制工具所公有的-下面就开始尝试一下git独有的一些命令" tabindex="-1"><a class="header-anchor" href="#上面的命令几乎都是每个版本控制工具所公有的-下面就开始尝试一下git独有的一些命令" aria-hidden="true">#</a> 上面的命令几乎都是每个版本控制工具所公有的，下面就开始尝试一下Git独有的一些命令：</h2><ul><li><p>git branch：对分支的增、删、查等操作，例如&#39;git branch new_branch&#39;会从当前的工作版本创建一个叫做new_branch的新分支，&#39;git branch -D new_branch&#39;就会强制删除叫做new_branch的分支，&#39;git branch&#39;就会列出本地所有的分支</p></li><li><p>git checkout：Git的checkout有两个作用，其一是在不同的branch之间进行切换，例如&#39;git checkout new_branch&#39;就会切换到new_branch的分支上去；另一个功能是还原代码的作用，例如&#39;git checkout app/model/user.rb&#39;就会将user.rb文件从上一个已提交的版本中更新回来，未提交的内容全部会回滚</p></li><li><p>git rebase：用下面两幅图解释会比较清楚一些，rebase命令执行后，实际上是将分支点从C移到了G，这样分支也就具有了从C到G的功能</p></li><li><p>git reset：将当前的工作目录完全回滚到指定的版本号，假设如下图，我们有A-G五次提交的版本，其中C的版本号是 bbaf6fb5060b4875b18ff9ff637ce118256d6f20，我们执行了&#39;git reset bbaf6fb5060b4875b18ff9ff637ce118256d6f20&#39;那么结果就只剩下了A-C三个提交的版本</p></li><li><p>git stash：将当前未提交的工作存入Git工作栈中，时机成熟的时候再应用回来，这里暂时提一下这个命令的用法，后面在技巧篇会重点讲解</p></li><li><p>git config：利用这个命令可以新增、更改Git的各种设置，例如&#39;git config branch.master.remote origin&#39;就将master的远程版本库设置为别名叫做origin版本库，后面在技巧篇会利用这个命令个性化设置你的Git，为你打造独一无二的 Git</p></li><li><p>git tag：可以将某个具体的版本打上一个标签，这样你就不需要记忆复杂的版本号哈希值了，例如你可以使用&#39;git tag revert_version bbaf6fb5060b4875b18ff9ff637ce118256d6f20&#39;来标记这个被你还原的版本，那么以后你想查看该版本时，就可以使用 revert_version标签名，而不是哈希值了</p></li><li><p>Git 之所以能够提供方便的本地分支等特性，是与它的文件存储机制有关的。Git存储版本控制信息时使用它自己定义的一套文件系统存储机制，在代码根目录下有一个.git文件夹，会有如下这样的目录结构： <code>有几个比较重要的文件和目录需要解释一下：HEAD文件存放根节点的信息，其实目录结构就表示一个树型结构，Git采用这种树形结构来存储版本信息，那么HEAD就表示根；refs目录存储了你在当前版本控制目录下的各种不同引用（引用指的是你本地和远程所用到的各个树分支的信息），它有heads、remotes、stash、tags四个子目录，分别存储对不同的根、远程版本库、Git栈和标签的四种引用，你可以通过命令&#39;git show-ref&#39;更清晰地查看引用信息；logs目录根据不同的引用存储了日志信息。因此，Git只需要代码根目录下的这一个.git目录就可以记录完整的版本控制信息，而不是像SVN那样根目录和子目录下都有.svn目录。那么下面就来看一下Git与SVN的区别吧</code></p></li></ul>',5),c=[l];function g(o,n){return t(),e("div",null,c)}const p=i(a,[["render",g],["__file","git命令详解.html.vue"]]);export{p as default};
