import{_ as n,p as s,q as a,a1 as t}from"./framework-5866ffd3.js";const p={},l=t(`<h1 id="基础" tabindex="-1"><a class="header-anchor" href="#基础" aria-hidden="true">#</a> 基础</h1><p>System.exit(0) 退出jvm虚拟机</p><h2 id="面向对象" tabindex="-1"><a class="header-anchor" href="#面向对象" aria-hidden="true">#</a> 面向对象</h2><ul><li><p>封装</p><ul><li>私有成员变量，提供 set get方法</li><li>抽取方法 （代码的封装）</li><li>抽取属性到类中 （对数据的封装）</li><li>提供代码的复用性，安全性</li><li>javaBean <ul><li>alt + insert 快捷创建带参无参 构造方法</li></ul></li></ul></li><li><p>继承</p></li><li><p>多态</p></li><li><p>构造方法</p><ul><li><p>格式</p><ol><li>方法名需要和类名相同</li><li>没有返回值类型</li><li>没有具体的返回值</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printIn</span><span class="token punctuation">(</span>&#39;<span class="token class-name">Student</span>的构造方法&#39;<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentDemo</span> <span class="token punctuation">{</span>
        <span class="token class-name">Student</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>执行时机</p><ol><li>创建对象的时候调用</li><li>不能手动调用构造方法</li></ol></li><li><p>作用</p><ul><li>用于给对象的数据（属性）进行初始化</li><li>默认为无参数构造 写入参数变为带参数 可同时存在</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>静态方法</p><ul><li>静态 随着累的加载而加载 优于对象存在</li><li>静态方法中只能访问静态成员</li><li>静态方法中没有this关键字</li><li>非静态方法可以访问静态方法</li></ul></li></ul></li><li><p>分包</p><ul><li>包：本质上就是文件夹</li><li>创建包：单级包、多级包 多级包之间使用“ . ” 分割，定义规范：公司网址翻转（去掉www） 例如：com.baidu.其他包名</li><li>包命名规则：字母都是小写</li><li>package：定义包 多级包，中间使用“ . ”进行分割</li><li>包的访问 <ul><li>同一包下 无需引入直接访问</li><li>不同包下 <ol><li>需要使用 import 引入</li><li>通过全类名（包名+类名）访问 （多包下 出现相同的类名称，可以使用这总方式）</li></ol></li></ul></li></ul></li></ul><h2 id="api基础" tabindex="-1"><a class="header-anchor" href="#api基础" aria-hidden="true">#</a> API基础</h2><p>应用程序接口 ctrl + alt + m 抽取方法</p><ul><li><p>Scanner</p><ul><li>键盘录入</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span>
    <span class="token comment">// 数值 与 字符串一起录入时 建议使用 next</span>
    <span class="token keyword">int</span> num <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token class-name">String</span> s <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 遇到 tab 空格 结束</span>
    <span class="token class-name">String</span> s <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 遇到回车换行 结束</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>String</p><ul><li><p>创建方式</p><ul><li>&quot;&quot; 是字符串的对象</li><li>new String()</li><li>字符串不可变 但可以被共享</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token comment">// 下面的代码 s 的地址值 由 &quot;zhangsan&quot; 变成 &quot;lisi&quot;</span>
    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">;</span>
    s <span class="token operator">=</span> <span class="token string">&quot;lisi&quot;</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;c&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chs<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这总方式会创建两个对象 浪费内存 不建议使用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>字符串对比</p><ul><li>字符串 顺序和大写小写 无论出现几次 JVM 都只会创建一个 （字符串常量池 JD7 挪到的 堆内存中）</li><li>new 创建 都会创建不同的内存空间</li><li>字符串 使用 + 拼接 系统会自动创建 StringBuilder 进行toString()</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">&quot;ab&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> s3 <span class="token operator">=</span> s2 <span class="token operator">+</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">;</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printIn</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s3<span class="token punctuation">)</span> <span class="token comment">// 变量形式 false</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printIn</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span> <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">&quot;ab&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 自变量形式 true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>比较方式 <ul><li>== <ul><li>基本类型：比较数据值是否相同</li><li>引用类型：比较地址值是否相同</li></ul></li><li>equals (equalsIgnoreCase 忽略大小写)<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">&quot;ab&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> s3 <span class="token operator">=</span> s2 <span class="token operator">+</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">;</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printIn</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 变量形式 false</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printIn</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;ab&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 自变量形式 true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul></li><li><p>字符串遍历</p><ul><li>charAt<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>toCharArray()<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul></li><li><p>StringBuilder</p><ul><li>StringBuilder(&quot;a&quot;) String 类型 转 StringBuilder类型</li><li>可以提高字符串的操作效率</li><li>常用方法 <ul><li>append （任意数据类型）返回对象本身</li><li>reverse 翻转 返回对象本身</li><li>toString 转换成 String 类型</li></ul></li></ul></li></ul><h2 id="集合基础" tabindex="-1"><a class="header-anchor" href="#集合基础" aria-hidden="true">#</a> 集合基础</h2><ul><li>集合与数组的区别 <ul><li>共同点：都是存储数据的容器</li><li>不同点：数组的容量是固定的，集合的容量是可变的</li></ul></li><li>集合的使用 <ul><li>ArrayList <ul><li>ArrayList 不加泛型 可以存储任意类型</li><li>ArrayList&lt;<code>E</code>&gt; 加泛型 只能存储指定的类型</li></ul></li><li>方法 <ul><li>add 添加元素</li><li>remove <ul><li>更具元素 返回删除的状态</li><li>根据索引 返回被删除的元素</li></ul></li><li>get 根据索引获取元素</li><li>size 返回集合中元素的个数</li><li>for 循环 快捷键 名字.fori</li></ul></li></ul></li></ul>`,9),e=[l];function i(o,c){return s(),a("div",null,e)}const r=n(p,[["render",i],["__file","基础阶段.html.vue"]]);export{r as default};
